'use strict';

// let a = 10;
// alert(a);

// a = 20;
// alert(a); 

// let a = 1 + 2 + 3;
// alert(a);

// let a = 2,
//     b = 10;
// alert(a**b);

// let str1 = 'java',
//     str2 = 'script';
// alert(str1 + str2);

// let str1 = 'hello',
//     str2 = 'world';
// alert(str1 + ' ' + str2);

// let name = 'Egor';
// alert('привет, ' + name);

// let age = 31;
// alert('мне ' + age + ' год');

// alert('abc d'.length);

// let str = `a,
// b
// c`;
// alert(str);


// let a;
// alert(a);

// let a = null;
// alert(a);

// let a = true;
// alert(a);

// let b = false;
// alert(b);

// let str1 = 'abc',
//     str2 = 'def';
// alert(str1 * str2);

// alert(10 / 0);
// alert(-10 / 0);

// // Найдите количество секунд в сутках.
// let a = 60 * 60 * 24;
// alert('количество секунд в сутках = ' + a + ' сек');

// // Найдите количество секунд в 30 сутках.
// let a = 60 * 60 * 24 * 30;
// alert('количество секунд в месяце = ' + a + ' сек');

// // Найдите количество секунд в году.
// let a = 60 * 60 * 24 * 365;
// alert('количество секунд в году =' + a + ' сек');

// // Найдите количество минут в сутках.
// let a = 60 * 24;
// alert('количество минут в сутках = ' + a + ' мин');

// // Найдите количество минут в году.
// let a = 60 * 24 * 365;
// alert('количество минут в году = ' + a + ' мин');

// let a = '10',
//     b = '20';
// alert(Number(a) + Number(b));

// let a = +'2';
// let b = +'3';
// alert(a + b); 

// Дана переменная со значением 5px и переменная со значением 6px. Найдите сумму пикселей из значений этих переменных и выведите ее на экран.

// let a  = parseFloat('5.5px'),
//     b = parseFloat('6.25px');
// console.log(a + b + 'px');

// let a = 22,
//     b = 55;
// console.log(String(a) + String(b));

// // Дана переменная с числом. Найдите количество цифр в этом числе.
// let a = 98765423;
// console.log(String(a).length);

// // Даны две переменные с числами. Найдите количество цифр в одном и во втором числе, результаты сложите и выведите на экран.
// let a = 5673,
//     b = 988735243;
// console.log(String(a).length + String(b).length);

// console.log(String(true));

// console.log( String(true) + Number(true) );

// let test = Boolean('abc');
// console.log(test);

// let test = Boolean('');
// console.log(test);

// let test = Boolean(true);
// console.log(test);

// let test = Boolean(false);
// console.log(false);

// let test = Boolean(1 / 0);
// console.log(test);

// Дана строка 'abcde'. Обращаясь к отдельным символам этой строки выведите на экран символ 'a', символ 'c', символ 'e'.

// let a = 'abcde';
// console.log(a[0]);
// console.log(a[2]);
// console.log(a[4]);

// Дана переменная со строкой 'abcde'. Обращаясь к отдельным символам этой строки запишите в новую переменную символы этой строки в обратном порядке, то есть 'edcba'.

// let str = 'abcde';
// let str1 = str[4] + str[3] + str[2] + str[1] + str[0];
// console.log(str1);

// Дана переменная str со строкой 'abcde' и переменная num с номером символа. Выведите на экран символ, номер которого хранится в переменной num.

// let str = 'abcde',
//     num = 2;
// console.log(str[num]);

// // Дана строка. Выведите на экран ее последний символ.
// let str = 'gogsyan';
// console.log(str[str.length - 1]);

// // Дана строка. Выведите на экран ее предпоследний символ.
// let str = 'gogsyan';
// console.log(str[str.length - 2]);

// Дана строка '12345'. Найдите сумму цифр этой строки.

// let str = '12345';
// console.log(Number(str[0]) + Number(str[1]) + Number(str[2]) + Number(str[3]) + Number(str[4]));

// Дано число 12345. Найдите сумму цифр этого числа.
// let str = String(12345);
// console.log(Number(str[0]) + Number(str[1]) + Number(str[2]) + Number(str[3]) + Number(str[4]));

// // Дано число 12345. Найдите произведение цифр этого числа.
// let str = 12345;
// str = String(12345);
// console.log(str[0] * str[1] * str[2] * str[3] * str[4]);

// Дано число 12345. Переставьте цифры этого числа в обратном порядке.

// let str = 12345;
// str = String(12345);
// let str1 = str[4] + str[3] + str[2] + str[1] + str[0];
// console.log(str1);


//==================== Префиксы и постфиксы ===================

// Переделайте этот код так, чтобы в нем использовались описанные сокращенные операции:
// let num = 47;
// num += 7;
// num -= 18;
// num *= 10;
// num /= 15;
// console.log(num);

// let num1 = 3;
// let num2 = ++num1;
// console.log(num1);
// console.log(num2);

// let num1 = 3;
// let num2 = num1--;
// console.log(num1);
// console.log(num2);

// let num1 = 3;
// num1++;
// let num2 = num1--;
// console.log(num1++);
// console.log(--num2);


// ========================= Prompt ==========================

// let name = prompt('Ваше имя?');
// alert('Ваше имя: ' + name);

// Спросите возраст пользователя с помощью функции prompt. Выведите с помощью alert введенный пользователем возраст.
// alert('Ваш возраст: ' + prompt('Ваш возраст?'));

// let num1 = prompt('Введите первое число');
// let num2 = prompt('Введите второе число');
// alert(Number(num1) + Number(num2));

// С помощью функции prompt спросите у пользователя сторону квадрата. Выведите на экран площадь введенного квадрата.
// let side = prompt('Введите сторону квадрата');
// let S = side * side;
// alert('Площадь квадрата равна ' + S);

// С помощью двух функций prompt спросите у пользователя стороны прямоугольника. Выведите на экран периметр введенного прямоугольника.
// let a = prompt('Введите одну сторну прямоугольника');
// let b = prompt('Введите другую сторну прямоугольника');
// let P = 2 * (Number(a) + Number(b));
// alert('Периметр прямоуголника равен ' + P);



// ================================== Массивы в JS ================================

// Создайте массив с элементами 'a', 'b' и 'c'. Выведите его на экран с помощью функции alert, а также выведите его в консоль с помощью console.log.
// let arr = ['a', 'b', 'c'];
// console.log(arr);

// Создайте массив с элементами 'a', 'b', 'c'. Выведите на экран каждый из этих элементов.
// let arr = ['a', 'b', 'c'];
// console.log(arr[0]);
// console.log(arr[1]);
// console.log(arr[2]);

// Создайте массив с элементами массив с элементами 'a', 'b', 'c', 'd'. Выведите с его помощью на экран строку 'a+b+c+d'.
// let arr = ['a', 'b', 'c', 'd'];
// console.log((arr[0] + '+') + (arr[1] + '+') + (arr[2] + '+') + arr[3]);

// // Создайте массив с элементами 1, 2 и 3. Выведите на экран сумму этих элементов.
// let arr = [1, 2, 3];
// console.log(arr[0] + arr[1] + arr[2]);

// Создайте массив с элементами 2, 5, 3, 9. Умножьте первый элемент массива на второй, а третий элемент на четвертый. Результаты сложите, присвойте переменной result. Выведите на экран значение этой переменной.
// let arr = [2, 5, 3, 9];
// let result = arr[0] * arr[1] + arr[2] * arr[3];
// console.log(result);

// Создайте массив с произвольными элементами. Выведите на экран количество элементов в этом массиве.
// let arr = [23, 33, 12, 54, 2, 4, 90];
// console.log(arr.length);

// Создайте массив с произвольными элементами. Выведите на экран последний элемент этого массива.
// let arr = [2, 34, 43, 6, 10, 22, 111];
// console.log(arr[arr.length - 1]);

// Создайте массив с элементами 'a', 'b', 'c'. Запишите вместо первого элемента число 1, вместо второго - 2, вместо третьего - 3.
// let arr = ['a', 'b', 'c'];
// arr[0] = 1;
// arr[1] = -2;
// arr[2] = -3;
// console.log(arr);

// Создайте массив с числами. Прибавьте к каждому элементу массива число 3. Выведите на экран измененный массив.
// let arr = [23, 5, 6, 78,];
// arr[0] += 3;
// arr[1] += 3;
// arr[2] += 3;
// arr[3] += 3;
// console.log(arr);

// Создайте массив с элементами 1, 2 и 3. С помощью оператора ++ увеличьте каждый элемент массива на единицу.
// let arr = [1, 2, 3];
// arr[0]++;
// ++arr[1];
// arr[2]++;
// console.log(arr);

// С помощью описанного приема создайте массив с элементами 1, 2 и 3.
// let arr = [];
// arr[0] = 1;
// arr[1] = 2;
// arr[2] = 3;
// console.log(arr);

// Пусть дан такой массив: let arr = [1, 2, 3]; Добавьте ему в конец элементы 4 и 5.
// let arr = [1, 2, 3];
// arr[3] = 4;
// arr[4] = 5;
// console.log(arr);


// ==================================  ОБЪЕКТЫ  =====================================

// let obj = {1: 'a', 2: 'b', 3: 'c'};
// console.log(obj);

// Создайте объект с ключами a, b и c и значениями 1, 2 и 3. Найдите сумму его элементов.
// let obj = {a: 1, b: 2, c: 3};
// console.log(obj['a'] + obj['b'] + obj['c']);

// Создайте объект с ключами 1a, 2b и с-с и значениями 1, 2 и 3. Найдите сумму его элементов.
// let obj = {'1a': 1, '2b': 2, 'c-c': 3};
// console.log(obj['1a'] + obj['2b'] + obj['c-c']);

// Найдите сумму его элементов. Обращайтесь к элементам с помощью изученного синтаксиса.
// let obj = {key1: 1, key2: 2, key3: 3};
// console.log(obj.key1 + obj.key2 + obj.key3);

// Создайте объект user с ключами name (имя), surname (фамилия), patronymic (отчество) и какими-то произвольными значениями. Выведите на экран фамилию, имя и отчество через пробел.
// let user = {name: 'Tom', surname: 'Taylor', patronymic: 'John'};
// console.log(user.name + ' ' + user.surname + ' ' + user.patronymic);

// Создайте объект date (дата) с ключами year (год), month (месяц) и day (день) и значениями, соответствующими текущему дню. Выведите созданную дату на экран в формате 'год-месяц-день'.

// let date = {year: 2021, month: 7, day: 11};
// console.log(date.year + '-' + date.month + '-' + date.day);

// Создайте объект с ключами a, b и c и элементами 1, 2 и 3.
// let obj = {};
// obj.a = 1;
// obj.b = 2;
// obj.c = 3;
// console.log(obj);

// Дана также переменная key со значением 2. Выведите на экран элемент, ключ которого хранится в переменной key.

// let arr = ['a', 'b', 'c'];
// let key = 2;
// console.log(arr[key]);

// Дана также переменная key1 со значением 1 и переменная key2 со значением 2. Найдите сумму элементов, ключи которых хранятся в наших переменных.

// let arr = [1, 2, 3, 4, 5];
// let key1 = 1,
//     key2 = 2;
// console.log(arr[key1] + arr[key2]);


// Дана переменная key, в которой хранится один из ключей нашего объекта. Выведите с помощью переменной key соответствующий элемент объекта.
// let obj = {'a': 1, 'b': 2, 'c': 3};
// let key = 'a';
// console.log(obj[key]);


// ================  Типизация массивов и объектов в JavaScript  =========================
// let arr = [1, 2, 3];
// console.log( typeof arr[0] );

// console.log( Array.isArray([1, 2, 3]) );

// ======================  Передача объектов по ссылке в JavaScript ================

// let arr1 = [1, 2, 3];
// let arr2 = arr1;

// arr1[0] = 'a';
// arr2[1] = 'b';

// console.log(arr1);

// let arr1 = [1, 2, 3];
// let arr2 = arr1;

// arr1[0] = 'a';
// arr2[0] = 'b';

// console.log(arr2);


// ===========================  Конструкция if-else в JavaScript ===================

// let test = 22;
// if (test > 10) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// let test = 22;
// if (test < 10) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// let test = 22;
// if (test >= 10) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// let test = 22;
// if (test <= 10) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// Если переменная test равна 10, то выведите на экран слово 'верно', иначе выведите слово 'неверно'.
// let test = 3;
// if (test == 10) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// let test = 3;
// if (test != 10) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// Даны переменные test1 и test2. Проверьте, что значение какой из этих переменных больше и выведите соответствующее сообщение на экран.

// let test1 = 3,
//     test2 = 45;
// if (test1 < test2) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }


// =======================  Сложные условия в if-else в JavaScript  ====================

// Если переменная num больше нуля и меньше 5, то выведите на экран слово 'верно', иначе выведите слово 'неверно'.

// let num = 3;
// if (num > 0 && num < 5) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// Если переменная num больше или равна 10 и меньше или равна 20, то выведите на экран слово 'верно', иначе выведите слово 'неверно'.
// let num = 32;
// if (num >= 10 && num <= 20) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// Если переменная num1 равна или меньше 1, а переменная num2 больше или равна 3, то выведите на экран слово 'верно', иначе выведите слово 'неверно'.

// let num1 = 1,
//     num2 = 3;
// if (num1 <= 1 && num2 >= 3) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// let num1 = -5;
// let num2 = 15;

// if (num1 >= 0 || num2 >= 0) {
// 	console.log('верно');
// } else {
// 	console.log('неверно');
// }

// let num = 3;
		
// if (num > 5 || num > 0 && num < 3) {
// 	console.log('верно');
// } else {
// 	console.log('неверно');
// }

// let num1 = -22,
//     num2 = 11;

// if ( !(num1 >= 0 || num2 <= 10) ) {
// 	console.log('верно');
// } else {
// 	console.log('неверно');
// }

// Если переменная test равна true, то выведите на экран слово 'верно', иначе выведите слово 'неверно'.

// let test = true;
// if (test === true) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// let test;		
// if (test == true) {
// 	console.log('верно');
// } else {
// 	console.log('неверно');
// }

// let test = 3 * 'a';
		
// if (test == true) {
// 	console.log('верно');
// } else {
// 	console.log('неверно');
// }

// Перепишите следующий код с использованием сокращенного сравнения:
// let test = true;
// if (test) {
// 	console.log('верно');
// } else {
// 	console.log('неверно');
// }

// let test = true;

// if (!test) {
// 	console.log('верно');
// } else {
// 	console.log('неверно');
// }

// let test = 3;

// if (test) {
// 	console.log('верно');
// } else {
// 	console.log('неверно');
// }

// let test = -1;

// if (test) {
// 	alert('верно');
// } else {
// 	alert('неверно');
// }

// Если переменная test равна 10, то пусть на экран выведется слово 'верно'. В противном случае пусть ничего не произойдет.

// let test = 10;
// if (test == 10) {
//     console.log('верно');
// }

// В переменной day лежит какое-то число из интервала от 1 до 31. Определите в какую декаду месяца попадает это число (в первую, вторую или третью).

// let day = 22;
// if (day <= 10) {
//     console.log('1-я декада месяца');
// }
// if (day >=11 && day <= 20) {
//     console.log('2-я декада месяца');
// }
// if (day >= 21 && day <= 31) {
//     console.log('3-я декада месяца');
// }

// Решите предыдущую задачу на декады месяца через конструкцию else if.

// let day = 22;
// if (day >= 1 && day <= 10) {
//     console.log('1-я декада месяца');
// } else if (day >=11 && day <= 20) {
//     console.log('2-я декада месяца');
// } else if (day >= 21 && day <= 31) {
//     console.log('3-я декада месяца');
// }

// let day = 0;
// if (day >= 1 && day <= 10) {
//     console.log('1-я декада месяца');
// } else if (day >=11 && day <= 20) {
//     console.log('2-я декада месяца');
// } else if (day >= 21 && day <= 31) {
//     console.log('3-я декада месяца');
// } else {
//     console.log('неверное значение day');
// }

// Пусть в переменной num хранится число. Если это число меньше 10 или больше 99, то выведите на экран сообщение об этом. Если же число попадает в указанный диапазон, то найдите сумму цифр этого числа. Если полученная сумма меньше или равна 9, то выведите на экран сообщение о том, что сумма цифр однозначна, в противном случае выведите сообщение о том, что сумма цифр двузначна.

// let num = 44;
// num = String(num);
// if (Number(num) < 10 || Number(num) > 99) {
//     console.log('число меньше 10 или больше 99');
// } else {
//     if ((Number(num[0]) + Number(num[1])) <= 9) {
//         console.log('сумма цифр однозначна');
//     } else {
//         console.log('сумма цифр двузначна');
//     }
// }

// Автор приведенного ниже кода хотел выполнить проверку возраста на достижение 18 лет.
// Код, однако, не работает. Исправьте ошибку автора кода.
// Вот проблемный код:

// let age = 17;
// if (age >= 18) {
// 	let adult = true;
// } else {
// 	let adult = false;
// }
// console.log(adult);

// let age = 17;
// let adult;
// if (age >= 18) {
// 	adult = true;
// } else {
// 	adult = false;
// }
// console.log(adult);

// let age = 17;
// let result;

// if (age >= 18) {
// 	if (age <= 23) {
// 		result = 'от 18 до 23';
// 	} else {
// 		result = 'больше 23';
// 	}
// } else {
// 	result = 'меньше 18';
// }

// console.log(result);

// Решите аналогичную задачу, только определите в какую треть часа попадает указанное количество минут.

// let min = 33;
// if (min >= 0 && min <= 20) {
//     console.log('1-я треть');
// }
// if (min >= 21 && min <= 40) {
//     console.log('2-я треть');
// }
// if (min >= 41 && min <= 59) {
//     console.log('3-я треть');
// }

// В переменной arr содержится некоторый массив с числами. Напишите условие, которое проверит, что в массиве 3 элемента. Если это так, выведите на экран сумму элементов массива.
// let arr = [12, 33, 4];
// if (arr.length == 3) {
//     console.log(arr[0] + arr[1] + arr[2]);
// }

// // Дано целое число. Напишите условие, которое проверит, равна ли последняя цифра этого числа нулю.
// let num = 121;
// num = String(num);
// if (num[num.length - 1] == 0) {
//     console.log('!');
// }

// Пусть в переменной num хранится число. Определите, четное число или нет. Число будет четным, если последний символ равен 0, 2, 4, 6 или 8, и нечетным в противном случае.
// let num = 2;
// num = String(num);
// if (num[num.length - 1] == 0 || num[num.length - 1] == 2 || num[num.length - 1] == 4 || num[num.length - 1] == 6 || num[num.length - 1] == 8) {
//     console.log(num + ' - четное число');
// } else {
//     console.log(num + ' - нечетное число')
// }


// Как известно, четные числа делятся на 2 без остатка, а нечетные - с остатком. Пусть у вас дано число. С помощью оператора % и конструкции if проверьте четное это число или нет.
// let a = 31;
// let rest = a % 2;
// if (rest == 0) {
//     console.log(a + ' - четное число');
// } else {
//     console.log(a + ' - нечетное число');
// }

// Дано число. Проверьте, что оно делится на 3.
// let a = 9;
// let rest = a % 3;     
// if (rest == 0) {
//     console.log(a + ' - делится на 3');
// } else {
//     console.log(a + ' - не делится на 3');
// }

// В переменной month лежит какое-то число из интервала от 1 до 12. Определите в какую пору года попадает этот месяц (зима, лето, весна, осень).
// let month = 11;
// if (month == 12 || month == 1 || month == 2) {
//     console.log('Зима');
// } else if (month == 3 || month == 4 || month == 5) {
//     console.log('Весна');
// } else if (month == 6 || month == 7 || month == 8) {
//     console.log('Лето'); 
// } else if (month == 9 || month == 10 || month == 11) {
//     console.log('Осень');
// } else {
//     console.log('Ошибка!!! Число должно быть от 1 до 12');
// }

// Дана строка, состоящая из символов, например, 'abcde'. Проверьте, что первым символом этой строки является буква 'a'. Если это так - выведите 'да', в противном случае выведите 'нет'.
// let str = 'bcde';
// if (str[0] == 'a') {
//     console.log('да');
// } else {
//     console.log('нет');
// }

// Дано число, например, 12345. Проверьте, что первым символом этого числа является цифра 1, 2 или 3. Если это так - выведите 'да', в противном случае выведите 'нет'.
// let num = 12345;
// let first = String(num)[0];
// if (first == 1 || first == 2 || first == 3) {
//     console.log('да');
// } else {
//     console.log('нет');
// }

// Дано трехзначное число. Найдите сумму цифр этого числа.
// let num = 123;
// num = String(num);
// console.log;

// Дано число из 6-ти цифр. Проверьте, что сумма первых трех цифр равняется сумме вторых трех цифр. Если это так - выведите 'да', в противном случае выведите 'нет'.

// let num = 123123;
// num = String(num);
// if ((Number(num[0]) + Number(num[1]) + Number(num[2])) == (Number(num[3]) + Number(num[4]) + Number(num[5]))) {
//     console.log('да');
// } else {
//     console.log('нет');
// }


// =====================  Конструкция switch-case в JavaScript  ============================

// Переменная num может принимать значения 1, 2, 3 или 4. Если она имеет значение 1, то выведите на экран текст 'зима', если значение 2 - 'весна' и так далее. Если в переменной будет какое-то другое значение - выведите на экран сообщение об ошибке. Решите задачу через switch-case.

// let num = 2;
// switch (num) {
//     case 1:
//         console.log('зима');
//     break;
//     case 2:
//         console.log('весна');
//     break;
//     case 3:
//         console.log('лето');
//     break;
//     case 4:
//         console.log('осень');
//     break;
//     default:
//         console.log('не верное значение!');
//     break;
// }


// ===========================  Тернарный оператор в JavaScript  ===========================

// Пусть дана переменная num, которая может быть либо отрицательной, либо положительной. Запишите в переменную result число 1, если переменная num больше или равна нулю, и число -1, если переменная num меньше нуля.

// let num = 11;
// let result = num >= 0 ? 1: -1;
// console.log(result);



// ====================== Логические операции в JavaScript  ==============================

// Используя оператор ==, узнайте, равны ли значения этих переменных или нет.
// let a = 2 * (3 - 1);
// let b = 6 - 2;
// console.log(a == b);

// Используя оператор >, узнайте, больше ли переменная a, чем b.
// let a = 5 * (7 - 4);
// let b = 1 + 2 + 7;
// console.log(a > b);

// Используя операцию оператор !=, узнайте, разные ли значения этих переменных или нет.
// let a = 2 ** 4;
// let b = 4 ** 2;
// console.log(a != b);


// ===========================  Функция confirm в JavaScript  =============================

// Спросите у пользователя, есть ли ему уже 18 лет. Если есть - выведите на экран алерт с текстом для взрослых, а если нет, выведите сообщение о том, что доступ пользователю запрещен.
// let adult = confirm('Вам есть 18 лет?');
// if (adult) {
//     alert('Текст для взрослых');
// } else {
//     alert('Доступ запрещен!');
// }


// ===============================  Цикл while в JavaScript  ===============================

// Выведите в консоль числа от 1 до 100.
// let i = 1;
// while (i <= 100) {
//     console.log(i);
//     i++;
// }

// Выведите в консоль числа 11 до 33.
// let i = 11;
// while (i <= 33) {
//     console.log(i);
//     i++;
// }

// Выведите в консоль четные числа в промежутке от 0 до 100.
// let i = 2;
// while (i <= 100) {
//     console.log(i);
//     i += 2;
// }

// Выведите в консоль нечетные числа в промежутке от 1 до 99.
// let i = 1;
// while (i <= 99) {
//     console.log(i);
//     i += 2;
// }

// Выведите в консоль числа от 30 до 0.
// let i = 30;
// while (i >= 0) {
//     console.log(i);
//     i--;
// }


// =================================  Цикл for в JavaScript  =============================

// // С помощью цикла for выведите в консоль числа от 1 до 100.
// for (let i = 1; i <= 100; i++) {
//     console.log(i);
// }

// // С помощью цикла for выведите в консоль числа от 11 до 33.
// for (let i = 11; i <= 33; i++) {
//     console.log(i);
// }

// // С помощью цикла for выведите в консоль четные числа в промежутке от 0 до 100.
// for (let i = 2; i <= 100; i += 2) {
//     console.log(i);
// }

// // С помощью цикла for выведите в консоль нечетные числа в промежутке от 1 до 99.
// for (let i = 1; i <= 99; i += 2) {
//     console.log(i);
// }

// // С помощью цикла for выведите в консоль числа от 100 до 0.
// for (let i = 100; i >= 0; i--) {
//     console.log(i);
// }


// ========================== Накопление результата в цикле JavaScript ===================

// Найдите произведение целых чисел от 1 до 20.
// let result = 1;
// for (i = 1; i <= 20; i++) {
//     result = result * i;
// }
// console.log(result);

// Найдите сумму четных чисел от 2 до 100.
// let result = 0;
// for (i = 2; i <= 100; i += 2) {
//     result += i;
// }
// console.log(result);

// Найдите сумму нечетных чисел от 1 до 99.
// let result = 0;
// for (let i = 1; i <= 99; i += 2) {
//     result += i;
// }
// console.log(result);


// =============================  Цикл for для массивов в JavaScript  ======================

// Дан массив с элементами 'a', 'b', 'c', 'd', 'e'. С помощью цикла for выведите все эти элементы на экран.
// let arr = ['a', 'b', 'c', 'd', 'e'];
// for (let i = 0; i < arr.length; i++) {
//     console.log(arr[i]);
// }

// Дан массив с элементами 1, 2, 3, 4, 5. С помощью цикла for и оператора if выведите в консоль нечетные элементы массива.
// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i] % 2 != 0) {
//         console.log(arr[i]);
//     }
// }

// Дан массив с элементами 1, 2, 3, 4, 5. С помощью цикла for найдите произведение элементов этого массива.
// let result = 1;
// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length; i++) {
//     result *= arr[i];
// }
// console.log(result);

// Дан массив с элементами 1, 2, 3, 4, 5. С помощью цикла for найдите сумму квадратов элементов этого массива.

// let result = 0;
// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length; i++) {
//     result += arr[i] ** 2;
// }
// console.log(result);

// Дан массив с элементами 2, 5, 9, 15, 1, 4. С помощью цикла for и оператора if выведите в консоль те элементы массива, которые больше 3-х, но меньше 10.
// let arr = [2, 5, 9, 15, 1, 4];
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i] > 3 && arr[i] < 10) {
//         console.log(arr[i]);
//     }
// }

// Дан массив с числами. Числа могут быть положительными и отрицательными. Найдите сумму положительных элементов массива.

// let arr = [-1, -3, 45, 23, 0, -34, 66];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i] > 0) {
//         result += arr[i];
//     }
// }
// console.log(result);

// Дан массив arr. Найдите среднее арифметическое его элементов (сумма делить на количество). Проверьте задачу на массиве с элементами 1, 2, 3, 4, 5.

// let arr = [1, 2, 3, 4, 5];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
//     result += arr[i];
// }
// console.log(result / arr.length);

// Дан массив числами, например: [10, 20, 30, 50, 235, 3000]. Выведите на экран только те числа из массива, которые начинаются на цифру 1, 2 или 5.
// let arr = [10, 20, 30, 50, 235, 3000];
// for (let i = 0; i < arr.length; i++) {
//     let first = String(arr[i])[0];
//     if (first == 1 || first == 2 || first == 5) {
//         console.log(arr[i]);
//     }
// }

// Дан массив с числами. Выведите элементы этого массива в обратном порядке.
// let arr = [34, 78, 909, 455, 1];
// console.log(arr[4]);
// console.log(arr[3]);
// console.log(arr[2]);
// console.log(arr[1]);
// console.log(arr[0]);

// Дан массив с числами. С помощью цикла выведите на экран все элементы, значение которых совпадает с их порядковым номером в массиве.
// let arr = [1, 2, 3, 67, 5];
// for (let i = 0; i < arr.length; i++) {
//     if (i + 1 == arr[i]) {
//         console.log(arr[i]);
//     }
// }

// Дан массив с числами. С помощью цикла for и функции document.write выведите каждый элемент массива с новой строки. Используйте для этого тег br.

// let arr = [1, 2, 3, 4, 5, 6];
// for (let i = 0; i < arr.length; i++) {
//     document.write(arr[i] + '<br>');
// }

// Дан массив с числами. С помощью цикла for и функции document.write выведите каждый элемент массива в отдельном абзаце.
// let arr = [1, 2, 3, 4, 5, 6];
// for (let i = 0; i < arr.length; i++) {
//     document.write('<p>' + arr[i] + '</p>');
// }

// Составьте массив дней недели. С помощью цикла for выведите все дни недели, а выходные дни выведите жирным.
// let week = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
// for (let i = 0; i < week.length; i++) {
//     if (week[i] == 'сб' || week[i] == 'вс') {
//         document.write('<b>' + week[i] +'</b>' + ' ');
//     } else {
//         document.write(week[i] + ' ');
//     }
// }

// Составьте массив дней недели. С помощью цикла for выведите все дни недели, а текущий день выведите курсивом. Номер текущего дня должен храниться в переменной day.
// let week = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
// let day = 4;
// for (let i = 0; i < week.length; i++) {
//     if (day == i + 1) {
//         document.write('<i>' + week[i] + '</i>' + ' ');
//     } else {
//         document.write(week[i] + ' ');
//     }
// }


// ====================  Перебор массива циклом for-of в JavaScript  =====================

// Дан массив с элементами 'a', 'b', 'c', 'd', 'e'. С помощью цикла for-of выведите все эти элементы на экран.
// let arr = ['a', 'b', 'c', 'd', 'e'];
// for (let elem of arr) {
//     console.log(elem);
// }

// Дан массив с элементами 1, 2, 3, 4, 5. С помощью цикла for-of найдите сумму элементов этого массива.
// let arr = [1, 2, 3, 4, 5];
// let result = 0;
// for (let elem of arr) {
//     result += elem;
// }
// console.log(result);

// Пусть у вас есть массив с названиями месяцев. С помощью цикла выведите на экран все месяцы из массива. Определите, каким циклом удобнее будет решить эту задачу: циклом for-of или обычным for со счетчиком.
// let month = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль'];
// for (let elem of month) {
//     console.log(elem);
// }

// Пусть у вас есть массив с названиями месяцев. Пусть в переменной month хранится номер текущего месяца, например, 10. С помощью цикла выведите все месяцы, а текущий месяц выведите курсивом. Определите, каким циклом удобнее будет решить эту задачу: циклом for-of или обычным for со счетчиком.

// let year = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь','декабрь'];
// let month = 10;
// for (let i = 0; i < year.length; i++) {
//     if (month == i + 1) {
//         document.write('<i>' + year[i] + '</i>' + ' ');
//     } else {
//         document.write(year[i] + ' ');
//     }
// }

// ================= Перебор объекта циклом for-in в JavaScript ==========================

// С помощью цикла for-in найдите сумму элементов этого объекта.
// let obj = {a: 1, b: 2, c: 3, d: 4, e: 5};
// let result = 0;
// for (let key in obj) {
//     result += obj[key];
// }
// console.log(result);


// ======================== Инструкция break в JavaScript =============================

// Дан массив с числами. Запустите цикл, который будет по очереди выводить элементы этого массива в консоль до тех пор, пока не встретится элемент со значением 0. После этого цикл должен завершить свою работу.

// let arr = [23, 34, 5, 6, 1, 0, 56, 77];
// for (let elem of arr) {
//     if (elem != 0) {
//         console.log(elem);
//     } else {
//         console.log(elem);
//         break;
//     }
// }

// Дан массив с числами. Найдите сумму элементов, расположенных от начала массива до первого отрицательного числа.
// let arr = [10, 44, 55, -23, 5, 7];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i] > 0) {
//         result += arr[i];
//     } else {
//         break;
//     }
// }
// console.log(result);

// Дан массив с числами. Найдите позицию первого числа 3 в этом массиве (считаем, что это число обязательно есть в массиве).

// let arr = [1, 2, 44, 4, 5, 423, 456, 3, 1, -213];
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i] == 3) {
//         console.log(i + 1 + ' - позиция числа 3 в этом массиве');
//         break;
//     }
// }

// Определите, сколько целых чисел, начиная с числа 1, нужно сложить, чтобы сумма получилась больше 100.
// let result = 1;
// for (let i = 0; i < 100; i++) {
//     if (result <= 100) {
//         result += i;
//     } else {
//         console.log(i - 1);
//         break;
//     }
// }


// ========================  Инструкция continue в JavaScript  ===========================

// let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];

// for (let elem of arr) {
// 	let result;
	
// 	if (elem % 2 == 0) {
// 		result = elem * elem;
// 	} else if (elem % 3 == 0) {
// 		result = elem * elem * elem;
// 	} else {
// 		continue; // перейдем на новую итерацию цикла
// 	}
	
// 	console.log(result); // выполнится, если делится на 2 или 3
// }


// ================================  Работа с флагами в JavaScript  ======================

// Проверьте, что в этом массиве есть элемент 'c'. Если есть - выведите 'да', а если нет - выведите 'нет'.
// let arr = ['a', 'b', 'v', 'd', 'e'];
// let flag = false;
// for (let elem of arr) {
//     if (elem == 'c') {
//         flag = true;
//         break;
//     }
// }
// if (flag === true) {
//     console.log('да');
// } else {
//     console.log('нет');
// }


// ====================== Нахождение простых чисел на JavaScript ========================

// Давайте напишем код, который будет проверять число на то, простое оно или нет. Простое число - это число, которое не делится ни на одно другое число (кроме как на 1 и на само себя - на это делятся все числа).
// let num = 43;
// let flag = true;
// for (let i = 2; i < num; i++) {
//     if (num % i == 0) {
//         flag = false;
//         break;
//     }
// }
// if (flag === true) {
//     console.log('простое');
// } else {
//     console.log('нет');
// }


// =================  Циклы без заданного количества итераций в JavaScript  ==============

// Дано число num с неким начальным значением. Умножайте его на 3 столько раз, пока результат умножения не станет больше 1000. Какое число получится? Посчитайте количество итераций, необходимых для этого.
// let num = 2;
// while (num < 1000) {
//     num *= 3;
// }
// console.log(num);


// for (var num = 2, i = 0; num < 1000; num *= 3, i++);
// console.log(num, i);


// ===================  Формирование строк через циклы в JavaScript  ======================

// С помощью цикла сформируйте строку, заполненную 5-тью нулями.
// let str = '';
// for (let i = 0; i < 5; i++) {
//     str += '0';
// }
// console.log(str);

// С помощью цикла сформируйте строку 123456789 и запишите ее в переменную str. Выведите значение этой переменной на экран.
// let str = '';
// for (let i = 1; i <= 9; i++) {
//     str += i;
// }
// console.log(str);

// С помощью цикла сформируйте строку 987654321 и запишите ее в переменную str. Выведите значение этой переменной на экран.
// let str = '';
// for (let i = 9; i >= 1; i--) {
//     str += i;
// }
// console.log(str);

// С помощью цикла сформируйте строку -1-2-3-4-5-6-7-8-9- и запишите ее в переменную str. Выведите значение этой переменной на экран.
// let str = '';
// for (let i = -1; i >= -9; i--) {
//     str = str + i;
// }
// console.log(str + '-');


// ===================  Цикл for и типы данных JavaScript  ===========================

// Переберите циклом числа от 10 до 1000 и выведите на экран те числа, сумма двух первых цифр которых равна 5.
// for (let i = 10; i <= 1000; i++) {
//     let str = String(i);
//     if (Number(str[0]) + Number(str[1]) == 5) {
//         console.log(i);
//     }
// }

// for (let i = 1; i <= 100; i++) {
// 	let str = String(i); // преобразуем число в строку
	
// 	if (str[0] == 1 || str[0] == 2) {
// 		console.log(i);
// 	}
// }


// ==============================  Типизация и сумма  =====================================

// let result = '';

// for (let i = 1; i <= 9; i++) {
// 	result += i;
// }

// console.log(result);

// Переберите циклом числа от 1 до 30 и сложите их как строки.
// let result = '';
// for (let i = 1; i <= 30; i++) {
//     result += i;
// }
// console.log(result);


// ========================  Вложенные циклы в JavaScript  ==============================

// С помощью двух вложенных циклов выведите на экран следующую строку: 111222333444555666777888999

// for (let i = 1; i <= 9; i++) {
//     // i = 1
//     for(let j = 1; j <= 3; j++) {
//         document.write(i);
//     }
// }

// С помощью двух вложенных циклов выведите на экран следующую строку: 11 12 13 21 22 23 31 32 33

// let str = '';
// for (let i = 1; i <= 3; i++) {
//     for (let j = 1; j <= 3; j++) {
//         str += String(i) + String(j) + ' ';
//     }
// }
// console.log(str);


// ===================  Заполнение массивов через цикл в JavaScript  ==================

// let arr = [];

// for (let i = 0; i <= 4; i++) {
// 	arr[i] = i + 1;
// }

// console.log(arr);

// С помощью цикла заполните массив числами от 1 до 100.

// let arr = [];
// for (i = 0; i <= 99; i++) {
//     arr[i] = i + 1;
// }
// console.log(arr);


// ==================== Заполнение значениями не по порядку ============================

// let arr = [];
// for (i = 1, j = 0; i <= 99; i += 2, j++) {
//     arr[j] = i;
// }
// console.log(arr);


// ========================  Изменение массива в цикле JavaScript ========================

// Дан массив с числами. Переберите этот массив циклом и возведите каждый элемент этого массива в квадрат.
// let arr = [1, 2, 3, 4, 5, 6, 7];
// for (let i = 0; i < arr.length; i++) {
//     arr[i] **= 2;
// }
// console.log(arr);

// Дан массив с числами. Переберите этот массив циклом и отнимите от каждого элемента единицу.
// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length; i++) {
//     arr[i]--;
// }
// console.log(arr);

// Дан массив с числами. Переберите этот массив циклом и прибавьте к каждому элементу 10.
// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length; i++) {
//     arr[i] += 10;
// }
// console.log(arr);


// ===================== Заполнение массива методом push в JavaScript ===================

// Объявите пустой массив, а затем заполните его числами от 1 до 10. Используйте для этого метод push.
// let arr = [];
// arr.push(1);
// arr.push(2);
// arr.push(3);
// arr.push(4);
// arr.push(5);
// arr.push(6);
// arr.push(7);
// arr.push(8);
// arr.push(9);
// arr.push(10);
// console.log(arr);

// Используя цикл и метод push заполните массив числами от 1 до 10.
// let arr = [];
// for (let i = 1; i <= 10; i++) {
//     arr.push(i);
// }
// console.log(arr);

// Используя цикл и метод push заполните массив 10-ю буквами x.
// let arr = [];
// for (let i = 0; i < 10; i++) {
//     arr.push('x');
// }
// console.log(arr);


// Дан массив с числами. Переберите его циклом и запишите в новый массив только положительные из чисел.

// let arr = [0, -7, 2, 3, 5, -30, 99];
// let result = [];
// for (let elem of arr) {
//     if (elem > 0) {
//         result.push(elem);
//     }
// }
// console.log(result);

// Дан следующий массив: let arr = ['a', 'b', 'c', 'd', 'e'] Описанным способом сделайте из него массив: let arr = ['e', 'd', 'c', 'b', 'a']
// let arr = ['a', 'b', 'c', 'd', 'e'];
// let result = [];
// for (i = arr.length -1; i >= 0; i--) {
//     result.push(arr[i]);
// }   
// console.log(result);

// let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
// let result = [];
// for (let elem of arr) {
// 	if (elem % 2 != 0) {
// 		result.push(elem);
// 	}
// }

// console.log(result);


// ========================  Заполнение объектов через цикл в JavaScript  =================

// Объявите пустой объект, а затем заполните его названиями дней недели в качестве ключей, и порядковыми номерами дней недели в качестве значений.
// let obj = {};
// obj['пн'] = 1;
// obj['вт'] = 2;
// obj['ср'] = 3;
// obj['чт'] = 4;
// obj['пт'] = 5;
// obj['сб'] = 6;
// obj['вс'] = 7;
// console.log(obj);

// Даны два массива: первый с названиями дней недели, а второй - с их порядковыми номерами:
// let arr1 = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
// let arr2 = [1, 2, 3, 4, 5, 6, 7];
// С помощью цикла создайте объект, ключами которого будут названия дней, а значениями - их номера.
// let arr1 = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
// let arr2 = [1, 2, 3, 4, 5, 6, 7];
// let obj = {};
// for (let i = 0; i < 7; i++) {
//     obj[arr1[i]] = arr2[i];
// }
// console.log(obj);

// Модифицируйте предыдущую задачу так, чтобы ключами стали номера дней, а значениями - их названия.
// let arr1 = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
// let arr2 = [1, 2, 3, 4, 5, 6, 7];
// let obj = {};
// for (let i = 0; i < 7; i++) {
//     obj[arr2[i]] = arr1[i];
// }
// console.log(obj);

// Дан объект:
// let obj = {'a': 12, 'b': 21, 'c': 13, 'd': 23, 'e': 17};
// Запишите в новый объект те элементы, значения которых расположены в промежутке от 10 до 20.
// let obj = {'a': 12, 'b': 21, 'c': 13, 'd': 23, 'e': 17};
// let result = {};
// for (let key in obj) {
//     if (obj[key] >= 10 && obj[key] <= 20) {
//         result[key] = obj[key];
//     }
// }
// console.log(result);

// Дан объект:
// let obj = {1: 'пн', 2: 'вт', 3: 'ср', 4: 'чт', 5: 'пт', 6: 'сб', 7: 'вс'};
// Запишите в новый объект дни недели, номера которых являются нечетными числами.
// let obj = {1: 'пн', 2: 'вт', 3: 'ср', 4: 'чт', 5: 'пт', 6: 'сб', 7: 'вс'};
// let result = {};
// for (let key in obj) {
//     if (key % 2 != 0) {
//         result[key] = obj[key];
//     }
// }
// console.log(result);

// Дан объект:
// let obj = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5};
// Переберите этот объект циклом и возведите каждый элемент этого объекта в квадрат.
// let obj = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5};
// for (let key in obj) {
//     obj[key] **= 2;
// }
// console.log(obj);

// Самостоятельно, не подсматривая в мой код, выполните переворот какого-нибудь объекта.

// let obj = {1: 'пн', 2: 'вт', 3: 'ср', 4: 'чт', 5: 'пт', 6: 'сб', 7: 'вс'};
// let result = {};
// for (let key in obj) {
//     result[obj[key]] = Number(key);
// }
// console.log(result);


//================= Практика на циклы с массивами и объектами JavaScript =================

// Дан следующий объект с работниками и их зарплатами:
// let obj = {
// 	employee1: 100,
// 	employee2: 200,
// 	employee3: 300,
// 	employee4: 400,
// 	employee5: 500,
// 	employee6: 600,
// 	employee7: 700
// };
// Увеличьте зарплату каждого работника на 10%.

// let obj = {
//     	employee1: 100,
//     	employee2: 200,
//     	employee3: 300,
//     	employee4: 400,
//     	employee5: 500,
//     	employee6: 600,
//     	employee7: 700
// };
// for (key in obj) {
//     obj[key] += obj[key] * 0.1;
// }
// console.log(obj);

// Модифицируйте предыдущую задачу так, чтобы зарплата увеличивалась только тем работникам, у которых она меньше или равна 400.
// let obj = {
//     	employee1: 100,
//     	employee2: 200,
//     	employee3: 300,
//     	employee4: 400,
//     	employee5: 500,
//     	employee6: 600,
//     	employee7: 700
// };
// for (key in obj) {
//     if (obj[key] <= 400) {
//         obj[key] += obj[key] * 0.1;
//     }
// }
// console.log(obj);

// Даны следующие массивы:
// let arr1 = [1, 2, 3, 4, 5];
// let arr2 = [6, 7, 8, 9, 10];
// С помощью этих массивов создайте новый объект, сделав его ключами элементы первого массива, а значениями - элементы второго.
// let arr1 = [1, 2, 3, 4, 5];
// let arr2 = [6, 7, 8, 9, 10];
// let result = {};
// for (let i = 0; i < arr1.length; i++) {
//     result[arr1[i]] = arr2[i]; 
// }
// console.log(result);

// Дан следующий объект:
// let obj = {1: 6, 2: 7, 3: 8, 4: 9, 5: 10};
// Найдите сумму ключей этого объекта и поделите ее на сумму значений.
// let obj = {1: 6, 2: 7, 3: 8, 4: 9, 5: 10};
// let summK = 0;
// let summEl = 0;
// for (let key in obj) {
//     summK += Number(key);
//     summEl += obj[key];
// }
// console.log(summK);
// console.log(summEl);
// console.log(summK / summEl);

// Дан следующий объект:
// let obj = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5};
// Запишите ключи этого объекта в один массив, а значения - в другой.
// let obj = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5};
// let arr1 = [];
// let arr2 = [];
// for (let key in obj) {
//     arr1.push(key);
//     arr2.push(obj[key]);
// }
// console.log(arr1);
// console.log(arr2);

// Запишите в новый массив элементы, значение которых начинается с цифры 1 или цифры 2.
// let obj = {
// 	1: 125,
// 	2: 225,
// 	3: 128,
// 	4: 356,
// 	5: 145,
// 	6: 281,
// 	7: 452,
// };
// let arr = []; 
// for (key in obj) {
//     let str = String(obj[key]);
//     if (str[0] == 1 || str[0] == 2) {
//         arr.push(obj[key]);
//     }
// }
// console.log(arr);

// Дан следующий массив:
// let arr = ['a', 'b', 'c', 'd', 'e'];
// Создайте из этого массива следующий объект:
// let arr = {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e'};

// let arr = ['a', 'b', 'c', 'd', 'e', 'p', 't'];
// let obj = {};
// for (let i = 0; i < arr.length; i++) {
//     obj[i + 1] = arr[i];
// }
// console.log(obj);

// Дан следующий массив:
// let arr = ['a', 'b', 'c', 'd', 'e'];
// создайте из этого массива следующий объект:
// let arr = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5};

// let arr = ['a', 'b', 'c', 'd', 'e'];
// let obj = {};
// for (let i = 0; i < arr.length; i++) {
//     obj[arr[i]] = i + 1;
// }
// console.log(obj);

// ==================== Подсчет количества элементов в массиве JavaScript ================

// Дан следующий массив:
// let arr = [1, 2, 3, 2, 4, 3, 5, 6, 3, 2, 3];
// Подсчитайте количество цифр 3 в этом массиве.
// let arr = [1, 2, 3, 2, 4, 3, 5, 6, 3, 2, 3];
// let counter = 0;
// for (let elem of arr) {
//     if (elem == 3) {
//         counter++;
//     }
// }
// console.log(counter);

// Модифицируйте предыдущую задачу так, чтобы в одном цикле одновременно подсчитывалось и количество троек, и количество двоек.
// let arr = [1, 2, 3, 2, 4, 3, 5, 6, 3, 2, 3];
// let counter = 0;
// let counter1 = 0
// for (let elem of arr) {
//     if (elem == 3) {
//         counter++;
//     } else if (elem == 2) {
//         counter1++
//     }
// }
// console.log(counter, counter1);

// Пусть у нас опять дан наш массив:
// let arr = ['a', 'b', 'c', 'a', 'a', 'b'];
// Давайте подсчитаем сколько каких элементов есть в этом массиве и представим результат в виде объекта вот такого объекта:
// {a: 3, b: 2, c: 1}
// let arr = ['a', 'b', 'c', 'a', 'a', 'b'];
// let obj = {};
// for (let elem of arr) {
//     if (obj[elem] === undefined) {
//         obj[elem] = 1;
//     } else {
//         obj[elem]++;
//     }
// }
// console.log(obj);


//================= Получение соседей элементов в массиве JavaScript =====================

// Дан массив с числами. Переберите его циклом и в каждой итерации цикла выведите следующий элемент массива.
// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length - 1; i++) {
//     console.log(arr[i + 1]);
// }

// let arr = [1, 2, 3, 4, 5];

// for (let i = 1; i < arr.length; i++) {
// 	console.log(arr[i - 1] + arr[i]);
// }

// let arr = [1, 2, 3, 4, 5];

// for (let i = 0; i < arr.length; i++) {
// 	console.log(arr[i + 1]);
// }

// Модифицируйте предыдущую задачу так, чтобы в каждой итерации цикла выводилась сумма текущего и следующего элемента массива.
// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length - 1; i++) {
//     console.log(arr[i] + arr[i + 1]);
// }

// Дан массив с числами. Переберите его циклом и в каждой итерации цикла выведите два предыдущих элемента массива.
// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i - 2] != undefined) {
//         console.log(arr[i - 2], arr[i - 1]);
//     }
// }

// Модифицируйте предыдущую задачу так, чтобы в каждой итерации цикла выводилась сумма двух предыдущих элементов и текущего элемента массива.

// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i - 2] != undefined) {
//         console.log(arr[i - 2] + arr[i - 1] + arr[i]);
//     }
// }

// Дан массив с числами. Переберите его циклом и в каждой итерации цикла выведите сумму предыдущего, текущего и следующего элементов массива.
// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length; i++) {
//     if ((arr[i - 1] != undefined) && (arr[i + 1] != undefined)) {
//         console.log(arr[i] + arr[i - 1] + arr[i + 1] );
//     }
// }


//====================== Получение чисел Фибоначчи в JavaScript ===========================

// Разберите мое решение описанной задачи, а затем самостоятельно, не подсматривая в мой код, решите эту задачу.

// let one = 0;
// let two = 1;
// for (i = 1; i <= 10; i++) {
//     let current = one + two;
//     one = two;
//     two = current;
//     console.log(current);
// } 

// Решите задачу на нахождение ряда чисел, каждое из которых равно сумме трех предыдущих, а первые три числа равны 0, 1 и 2.

// let one = 0,
//     two = 1,
//     three = 2;
// for (let i = 1;  i <= 10; i++) {
//     let current = one + two + three;
//     one = two;
//     two = three;
//     three = current;
// console.log(current);
// }

//=========================== Вывод пирамидок на JavaScript ===============================

// Выведите на экран следующую пирамидку:
// xx
// xxxx
// xxxxxx
// xxxxxxxx
// xxxxxxxxxx

// let str = '';
// for (let i = 0; i < 5; i++) {
//     str = str + 'xx';
//     document.write(str + '<br>');
// }

// Выведите на экран следующую пирамидку:
// 1
// 333
// 55555
// 7777777
// 999999999

// for (let i = 1; i <= 9; i++) {
//     if (i % 2 != 0) {
//         for(let j = 1; j <= i; j++) {
//             document.write(i)
//         }
//     document.write('<br>');
//     }
// }

// Выведите на экран следующую пирамидку:
// xxxxxxxxxx
// xxxxxxxx
// xxxxxx
// xxxx
// xx

// for (let i = 5; i >= 1; i--) {
//     let str = '';
//     for (let j = 0; j < i; j++) {
//         str = str + 'xx';
//     }
//     document.write(str + '<br>');
// }

// Выведите на экран следующую пирамидку:
// 999999999
// 88888888
// 7777777
// 666666
// 55555
// 4444
// 333
// 22
// 1

// for (let i = 9; i >= 1; i--) {
//     for (let j = 0; j < i; j++) {
//         document.write(i);
//     }
//     document.write('<br>')
// }


//================ Заполнение массивов с накоплением строки в JavaScript ==================

// С помощью цикла сформируйте следующий массив:
// ['xx', 'xxxx', 'xxxxxx', 'xxxxxxxx', 'xxxxxxxxxx']
// let arr = [];
// let str = '';
// for (i = 0; i < 5; i++) {
//     str = str + 'xx';
//     arr.push(str);
// }
// console.log(arr);

// С помощью цикла сформируйте следующий массив:
// ['11111', '22222', '33333', '44444', '55555']
// let arr = [];
// for (let i = 1; i <= 5; i++) {
//     let str = '';
//     for (let j = 0; j < 5; j++) {
//         str = str + i;
//     }
//     arr.push(str);
// }
// console.log(arr);

//=========================== Отработка циклов JavaScript ===============================

// Выведите с помощью цикла столбец чисел от 1 до 100.
// for (i = 1; i <= 100; i++) {
//     console.log(i);
// }

// Выведите с помощью цикла столбец чисел от 100 до 1.
// for (i = 100; i >= 1; i--) {
//     console.log(i);
// }

// Выведите с помощью цикла столбец четных чисел от 1 до 100.
// for (i = 1; i <= 100; i++) {
//     if (i % 2 == 0) {
//         console.log(i);
//     }
// }

// Заполните массив 10-ю иксами с помощью цикла.
// let arr = [];
// for (i = 0; i < 10; i++) {
//     arr.push('x');
// }
// console.log(arr);

// Заполните массив числами от 1 до 10 с помощью цикла.
// let arr = [];
// for (i = 0; i < 10; i++) {
//     arr.push(i + 1);
// }
// console.log(arr);

// Дан массив с числами. С помощью цикла выведите только те элементы массива, которые больше нуля и меньше 10-ти.
// let arr = [2, 34, 412, 0, 1, 3, 7];
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i] > 0 && arr[i] < 10) {
//         console.log(arr[i]);
//     }
// }

// Дан массив с числами. С помощью цикла проверьте, что в нем есть элемент со значением 5.
// let arr = [11, 34, 5, 22, 10];
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i] == 5) {
//         console.log('Yes');
//         break;
//     }
// }

// Дан массив с числами. С помощью цикла найдите сумму элементов этого массива.
// let arr = [11, 34, 5, 22, 10];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
//     result += arr[i];
// }
// console.log(result);

// Дан массив с числами. С помощью цикла найдите сумму квадратов элементов этого массива.
// let arr = [11, 34, 5, 22, 10];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
//     result += arr[i] ** 2;
// }
// console.log(result);

// Дан массив с числами. Найдите среднее арифметическое его элементов (сумма элементов, делить на количество).
// let arr = [11, 34, 5, 0, 10];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
//     result += arr[i] / arr.length;  
// }
// console.log(result);

// Напишите скрипт, который будет находить факториал числа. Факториал (обозначается !) - это произведение (умножение) всех целых чисел, меньше данного, и его самого. Например, 4! = 1*2*3*4.

// let num = 4;
// let result = 1;
// for (let i = 1; i <= num; i++) {
//     result *= i;
// }
// console.log('факториал ' + num + ' = ' + result);


//====================== Многомерные массивы в JavaScript ================================

// Выведите с его помощью элементы с текстом 'l', 'e', 'g' и 'a'.
// let arr = [
// 	['a', 'b', 'c'],
// 	['d', 'e', 'f'],
// 	['g', 'h', 'i'],
// 	['j', 'k', 'l'],
// ];
// console.log(arr[3][2], arr[1][1], arr[2][0], arr[0][0]);

// Найдите сумму всех его элементов.
// let arr = [[1, 2], [3, 4], [5, 6]];
// let result = arr[0][0] + arr[0][1] + arr[1][0] + arr[1][1] + arr[2][0] + arr[2][1];
// console.log(result);

// Найдите сумму всех элементов приведенного массива.
// let arr = [[[1, 2],[3, 4],],[[5, 6],[7, 8],],];
// let result = arr[0][0][0] + arr[0][0][1] + arr[0][1][0] + arr[0][1][1] + arr[1][0][0] + arr[1][0][1] + arr[1][1][0] + arr[1][1][1];
// console.log(result);


//==================== Перебор многомерных массивов в JavaScript ==========================

// С помощью вложенных циклов найдите сумму элементов этого массива.
// let arr = [[1, 2, 3], [4, 5], [6]];
// let result = 0;
// for (let subArr of arr) {
// 	for (let elem of subArr) {
// 		result += elem;
// 	}
// }
// console.log(result);

// С помощью вложенных циклов найдите сумму элементов этого массива.
// let arr = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]];
// let result = 0;
// for (let subArr of arr) {
// 	for (let subSubArr of subArr) {
// 		for (let elem of subSubArr) {
// 			result += elem;
// 		}
// 	}
// }
// console.log(result);

// Решите предыдущие две задачи через цикл for.
// let arr = [[1, 2, 3], [4, 5], [6]];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
// 	for (let j = 0; j < arr[i].length; j++) {
// 		result += arr[i][j];
// 	}
// }
// console.log(result);

// let arr = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
// 	for (let j = 0; j < arr[i].length; j++) {
// 		for (let k = 0; k < arr[i][j].length; k++) {
// 			result += arr[i][j][k];
// 		}
// 	}
// }
// console.log(result);

//==================== Заполнение многомерных массивов JavaScript ========================

// Сформируйте с помощью двух вложенных циклов следующий массив:
// [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]

// let arr = [];
// for (let i = 0; i < 3; i++) {
// 	arr[i] = [];
// 	for (let j = 0; j < 5; j++) {
// 		arr[i].push(j + 1);
// 	}
// }
// console.log(arr);

// Сформируйте с помощью двух вложенных циклов следующий массив:
// [['x', 'x', 'x', 'x'], ['x', 'x', 'x', 'x'], ['x', 'x', 'x', 'x']]
// let arr = [];
// for (let i = 0; i < 3; i++) {
// 	arr[i] = [];
// 	for (let j = 0; j < 4; j++) {
// 		arr[i][j] = 'x';
// 	}
// }
// console.log(arr);

// Сформируйте с помощью трех вложенных циклов следующий массив:
// [
// 	[
// 		[1, 2, 3, 4, 5],
// 		[1, 2, 3, 4, 5],
// 	],
// 	[
// 		[1, 2, 3, 4, 5],
// 		[1, 2, 3, 4, 5],
// 	],
// 	[
// 		[1, 2, 3, 4, 5],
// 		[1, 2, 3, 4, 5],
// 	],
// ]

// let arr = [];
// for (let i = 0; i < 3; i++) {
// 	arr[i] = [];
// 	for (let j = 0; j < 2; j++) {
// 		arr[i][j]= [];
// 		for (let k = 0; k < 5; k++) {
// 			arr[i][j].push(k + 1);
// 		}
// 	}
// }
// console.log(arr);

// let arr = [];

// for (let i = 0; i < 3; i++) {
// 	arr[i] = [];
	
// 	for (let j = 1; j <= 5; j++) {
// 		arr[i].push(j);
// 	}
// }

// console.log(arr);

// Сформируйте с помощью двух вложенных циклов следующий массив:
// [[1, 2], [3, 4], [5, 6], [7, 8]]
// let arr = [];
// for (let i = 0, k = 1; i < 4; i++) {
// 	arr[i] = [];
// 	for (let j = 0; j < 2; j++, k++) {
// 		arr[i][j] = k;
// 	}
// }
// console.log(arr);

// Сформируйте с помощью двух вложенных циклов следующий массив:
// [[2, 4, 6], [8, 10, 12], [14, 16, 18], [20, 22, 24]]
// let arr = [];
// for (i = 0, k = 1; i < 4; i++) {
// 	arr[i] = [];
// 	for (j = 0; j < 3; j++, ++k) {
// 		arr[i][j] = k * 2;
// 	}
// }
// console.log(arr);

// Сформируйте с помощью трех вложенных циклов следующий трехмерный массив:
// [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]

// let arr = [];
// for (let i = 0, k = 1; i < 2; i++) {
// 	arr[i] = [];
// 	for (let j = 0; j < 2; j++) {
// 		arr[i][j] = [];
// 		for (let s = 0; s < 2; s++, k++){
// 			arr[i][j].push(k);
// 		}
// 	}
// }
// console.log(arr);

// Автор следующего кода хотел сделать массив [[1, 2, 3], [4, 5, 6], [7, 8, 9]]:
// let arr = [];
// for (let i = 0; i < 3; i++) {
// 	arr[i] = [];
// 	for (let j = 0; j < 3; j++) {
// 		arr[i][j] = k;
// 		k++;
// 	}
// }
// console.log(arr);
// Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
// let arr = [];
// for (let i = 0, k = 1; i < 3; i++) {
// 	arr[i] = [];
// 	for (let j = 0; j < 3; j++) {
// 		arr[i][j] = k;
// 		k++;
// 	}
// }
// console.log(arr);


//========================= Многомерные объекты в JavaScript ==============================

// Найдите сумму элементов приведенного объекта.
// let obj = {
// 	key1: {
// 		key1: 1,
// 		key2: 2,
// 		key3: 3,
// 	},
// 	key2: {
// 		key1: 4,
// 		key2: 5,
// 		key3: 6,
// 	},
// 	key3: {
// 		key1: 7,
// 		key2: 8,
// 		key3: 9,
// 	},
// }
// let result = 0;
// for (let key in obj) {
// 	let subObj = obj[key];
// 	for (let elem in subObj) {
// 		result += subObj[elem];
// 	}
// }
// console.log(result);

// Выведите на экран элемент 'b2' и элемент 'c1'.
// let obj = {
// 	1: {
// 		1: 'a1',
// 		2: 'a2',
// 		3: 'a3',
// 	},
// 	2: {
// 		1: 'b1',
// 		2: 'b2',
// 		3: 'b3',
// 	},
// 	3: {
// 		1: 'c1',
// 		2: 'c2',
// 		3: 'c3',
// 	},
// }
// for (let key in obj) {
// 	let subObj = obj[key];
// 	for (subKey in subObj) {
// 		if (subObj[subKey] == 'b2' || subObj[subKey] == 'c1') {
// 			console.log(subObj[subKey]);
// 		}
// 	}
// }

// Найдите сумму всех элементов-чисел.
// let obj = {
// 	key1: {
// 		a: 1, b: 2, c: {
// 			d: 3,
// 			e: 4,
// 		}, f: 5,
// 	},
// 	key2: {
// 		g: 6, h: 7,
// 	},
// }
// ?????

//===================== Перебор многомерных объектов в JavaScript ========================

// Используя циклы, найдите сумму элементов этого объекта.
// let obj = {
// 	1: {
// 		1: 11,
// 		2: 12,
// 		3: 13,
// 	},
// 	2: {
// 		1: 21,
// 		2: 22,
// 		3: 23,
// 	},
// 	3: {
// 		1: 24,
// 		2: 25,
// 		3: 26,
// 	}
// }
// let result = 0;
// for (let key in obj) {
// 	let subObj = obj[key];
// 	for (let subKey in subObj) {
// 		result += subObj[subKey];
// 	}
// }
// console.log(result);


//============== Ключи из переменных в многомерных структурах JavaScript =================

// let months = {
// 	'ru': [
// 		'январь',
// 		'февраль',
// 		'март',
// 		'апрель',
// 		'май',
// 		'июнь',
// 		'июль',
// 		'август',
// 		'сентябрь',
// 		'октябрь',
// 		'ноябрь',
// 		'декабрь',
// 	],
// 	'en': [
// 		'january',
// 		'february',
// 		'march',
// 		'april',
// 		'may',
// 		'june',
// 		'july',
// 		'august',
// 		'september',
// 		'october',
// 		'november',
// 		'december',
// 	],
// };
// let lang = 'ru'; 
// let month = 5;   
// console.log(months[lang][month]);

// Пусть даны также 3 переменные, содержащие год, месяц и день. Выведите дело, соответствующее значениям переменных.
// let affairs = {
// 	'2018': {
// 		11: {
// 			29: ['дело111', 'дело112', 'дело113'],
// 			30: ['дело121', 'дело122', 'дело123'],
// 		},
// 		12: {
// 			30: ['дело211', 'дело212', 'дело213'],
// 			31: ['дело221', 'дело222', 'дело223'],
// 		},
// 	},
// 	'2019': {
// 		12: {
// 			29: ['дело311', 'дело312', 'дело313'],
// 			30: ['дело321', 'дело322', 'дело323'],
// 			31: ['дело331', 'дело332', 'дело333'],
// 		}
// 	},
// }
// let year = '2019';
// let month = 12;
// let day = 30;
// console.log(affairs[year][month][day]);

//================= Многомерные массивы и объекты в JavaScript ==========================

// Выведите на экран сумму зарплат первого и второго работников.
// let employees = [
// 	{
// 		name: 'name1',
// 		salary: 300,
// 	},
// 	{
// 		name: 'name2',
// 		salary: 400,
// 	},
// 	{
// 		name: 'name3',
// 		salary: 500,
// 	},
// ];

// let result = employees[0]['salary'] + employees[1]['salary'];
// console.log(result);

// Выведите на экран элемент 'Вася' и элемент 'Лена'.
// let students = {
// 	'boys':  ['Коля', 'Вася', 'Петя'],
// 	'girls': ['Даша', 'Маша', 'Лена'],
// };
// console.log(students['boys'][1] + ' и ' + students['girls'][2]);


//=================== Перебор многомерных комбинаций в JavaScript =========================

// Выведите на экран данные каждого работника в формате имя - зарплата.
// let employees = [
// 	{
// 		name: 'name1',
// 		salary: 300,
// 	},
// 	{
// 		name: 'name2',
// 		salary: 400,
// 	},
// 	{
// 		name: 'name3',
// 		salary: 500,
// 	},
// ];
// for(let employee of employees) {
// 	document.write(employee.name + ' - ' + employee.salary + '<br>');
// }

// Выведите на экран сумму зарплат всех работников.
// let employees = [
// 	{
// 		name: 'name1',
// 		salary: 300,
// 	},
// 	{
// 		name: 'name2',
// 		salary: 400,
// 	},
// 	{
// 		name: 'name3',
// 		salary: 500,
// 	},
// ];
// let result = 0;
// for (let employee of employees) {
// 	result += employee.salary;
// }
// console.log(result);

// Выведите на экран сумму зарплат тех работников, возраст которых равен или более 30 лет.
// let employees = [
// 	{
// 		name: 'name1',
// 		salary: 300,
// 		age: 28,
// 	},
// 	{
// 		name: 'name2',
// 		salary: 400,
// 		age: 29,
// 	},
// 	{
// 		name: 'name3',
// 		salary: 500,
// 		age: 30,
// 	},
// 	{
// 		name: 'name4',
// 		salary: 600,
// 		age: 31,
// 	},
// 	{
// 		name: 'name5',
// 		salary: 700,
// 		age: 32,
// 	},
// ];
// let result = 0;
// for (let employee of employees) {
// 	if (employee.age >= 30) {
// 		result += employee.salary;
// 	}
// }
// console.log(result);

// Выведите на экран имена и зарплаты неуволенных работников.
// let employees = [
// 	{
// 		name: 'name1',
// 		salary: 300,
// 		dismissed: false,
// 	},
// 	{
// 		name: 'name2',
// 		salary: 400,
// 		dismissed: true,
// 	},
// 	{
// 		name: 'name3',
// 		salary: 500,
// 		dismissed: false,
// 	},
// 	{
// 		name: 'name4',
// 		salary: 600,
// 		dismissed: true,
// 	},
// 	{
// 		name: 'name5',
// 		salary: 700,
// 		dismissed: false,
// 	},
// ];
// for (let employee of employees) {
// 	if (employee.dismissed != true) {
// 		document.write(employee.name + ' : ' + employee.salary + '<br>');
// 	}
// }

// С помощью вложенных циклов выведите на экран все строки с данными.
// let data = {
// 	1: [
// 		'data11',
// 		'data12',
// 		'data13',
// 	],
// 	2: [
// 		'data21',
// 		'data22',
// 		'data23',
// 	],
// 	3: [
// 		'data31',
// 		'data32',
// 		'data33',
// 		'data34',
// 		'data35',
// 	],
// 	4: [
// 		'data41',
// 		'data42',
// 	],
// };

// for (let key in data) {
// 	for (let num of data[key]) {
// 		console.log(num);
// 	}
// }

// Количество объектов в массиве и количество элементов в объекте может быть произвольным.
// С помощью вложенных циклов выведите на экран все строки с данными.
// let data = [
// 	{
// 		1: 'data11',
// 		2: 'data12',
// 		3: 'data13',
// 		4: 'data14',
// 	},
// 	{
// 		1: 'data21',
// 		2: 'data22',
// 		3: 'data33',
// 	},
// 	{
// 		1: 'data31',
// 		2: 'data32',
// 	},
// ];
// for (let elem of data) {
// 	for (let key in elem) {
// 		console.log(elem[key]);
// 	}
// }

// С помощью вложенных циклов выведите на экран все строки с данными.
// let data = [
// 	{
// 		1: [
// 			'data111',
// 			'data112',
// 			'data113',
// 		],
// 		2: [
// 			'data121',
// 			'data122',
// 			'data123',
// 		],
// 	},
// 	{
// 		1: [
// 			'data211',
// 			'data212',
// 			'data213',
// 		],
// 		2: [
// 			'data221',
// 			'data222',
// 			'data223',
// 			'data224',
// 		],
// 		3: [
// 			'data231',
// 			'data232',
// 			'data233',
// 			'data234',
// 			'data235',
// 		],
// 	},
// 	{
// 		1: [
// 			'data411',
// 			'data412',
// 			'data413',
// 		],
// 		2: [
// 			'data421',
// 		],
// 	},
// ];
// for (let elem of data) {
// 	for (let key in elem) {
// 		for (let num of elem[key]) {
// 			console.log(num);
// 		}
// 	}
// }

 
//========================= Математические методы в JavaScript ===========================

// Возведите 2 в 10 степень.
// console.log(Math.pow(2, 10));
// console.log(2 ** 10);

// Найдите квадратный корень из 245.
// console.log(Math.sqrt(245));

// Дан массив с элементами 4, 2, 5, 19, 13, 0, 10. Найдите квадратный корень из суммы кубов его элементов. Для решения воспользуйтесь циклом for.
// let arr = [4, 2, 5, 19, 13, 0, 10];
// let result = 0;
// for (i = 0; i < arr.length; i++) {
// 	result += Math.pow(arr[i], 3);
// }
// console.log(Math.sqrt(result));

// Найдите квадратный корень из 379. Результат округлите до целых, до десятых, до сотых.
// console.log(Math.sqrt(379).toFixed());
// console.log(Math.sqrt(379).toFixed(1));
// console.log(Math.sqrt(379).toFixed(2));

// Найдите квадратный корень из 587. Округлите результат в большую и меньшую стороны, запишите результаты округления в объект с ключами 'floor' и 'ceil'.
// let obj = {};
// obj.ceil = Math.ceil(Math.sqrt(587));
// obj.floor = Math.floor(Math.sqrt(587));
// console.log(obj);

// Даны числа 4, -2, 5, 19, -130, 0, 10. Найдите минимальное и максимальное число.
// console.log(Math.max(4, -2, 5, 19, -130, 0, 10));
// console.log(Math.min(4, -2, 5, 19, -130, 0, 10));

// // Выведите на экран случайное целое число от 1 до 100.
// function getRandomInt(min, max) {
// 	return Math.floor(Math.random() * (max - min + 1)) + min;
// }
// console.log(getRandomInt(1, 100));

// // С помощью цикла заполните массив 10-ю случайными целыми числами.
// function getRandomInt(min, max) {
// 	return Math.floor(Math.random() * (max - min + 1)) + min;
// }
// let arr = [];
// for (i = 0; i < 10; i++) {
// 	arr[i] = getRandomInt(1, 1000);
// }
// console.log(arr);

// // Даны переменные a и b. Найдите найдите модуль разности a и b. Проверьте работу скрипта самостоятельно для различных a и b.
// let a = -32,
// 	b = -393;
// console.log(Math.abs(a - b));


//=========================== Строковые методы JavaScript ================================

// // Дана строка 'js'. Сделайте из нее строку 'JS'.
// let str = 'js';
// console.log(str.toUpperCase());

// // Дана строка 'JS'. Сделайте из нее строку 'js'.
// let str = 'JS';
// console.log(str.toLowerCase());

// Дана строка 'я учу javascript!'. Вырежьте из нее слово 'учу' и слово 'javascript' тремя разными способами (через substr, substring, slice).
// let str = 'я учу javascript!';
// let sub1 = str.substr(2, 3);
// let sub2 = str.substr(6, 10);
// console.log(sub1, sub2);

// let str = 'я учу javascript!';
// let sub1 = str.substring(2, 5);
// let sub2 = str.substring(6, 16);
// console.log(sub1, sub2);

// let str = 'я учу javascript!';
// let sub1 = str.slice(2, 5);
// let sub2 = str.slice(6, -1);
// console.log(sub1, sub2);

// Дана строка 'abcde'. Определите позицию буквы 'c' в этой строке.
// let str = 'abcde';
// console.log(str.indexOf('c'));

// Дана строка. Проверьте, есть ли в этой строке символ 'a'.
// let str = 'abcde';
// if (str.indexOf('a') != -1) {
// 	console.log('есть');
// } else {
// 	console.log('нет');
// }

// Дана строка. Проверьте, начинается ли эта строка с символа 'a'.
// let str = 'cabcde';
// if (str.indexOf('a') == 0) {
// 	console.log('начинается');
// } else {
// 	console.log('нет');


// Дана строка. Проверьте, заканчивается ли эта строка на символ 'a'.
// let str = 'abcdea';
// if(str.lastIndexOf('a') == str.length - 1) {
// 	console.log('да');
// } else {
// 	console.log('нет');
// }

// // Дана строка. Проверьте, начинается ли эта строка на http://.
// let str = 'http://abcde';
// if (str.slice(0, 7) == 'http://') {
// 	console.log('да');
// } else {
// 	console.log('нет');
// }

// Дана строка. Проверьте, заканчивается ли эта строка на .html.
// let str = 'a.html';
// let a = '.html'
// if (str.lastIndexOf(a) == str.length - a.length) {
// 	console.log('yes');
// } else {
// 	console.log('no');
// }

// Дана строка. Проверьте, начинается ли эта строка на http://
// let str = 'http://asderf';
// console.log(str.startsWith('http://'));

// Дана строка. Проверьте, заканчивается ли эта строка на .html.
// let str = 'dqdwqdqw.htl';
// console.log(str.endsWith('.html'));

// Дана строка '1-2-3-4-5'. С помощью метода split запишите каждое число этой строки в отдельный элемент массива.
// let str = '1-2-3-4-5';
// let arr = str.split('-');
// console.log(arr);

// Дана строка '12345'. С помощью метода split запишите каждый символ этой строки в отдельный элемент массива.
// let str = '12345';
// let arr = str.split('');
// console.log(arr);

// С помощью метода join слейте его в строку '1-2-3-4-5'.
// let arr = [1, 2, 3, 4, 5];
// let str = arr.join('-');
// console.log(str);


//======================== Методы для массивов в JavaScript =============================

// Дан массив [1, 2, 3]. Добавьте ему в конец элементы 4, 5, 6.
// let arr = [1, 2, 3];
// arr.push(4, 5, 6);
// console.log(arr);

// Дан массив [1, 2, 3]. Добавьте ему в начало элементы 4, 5, 6.
// let arr = [1, 2, 3];
// arr.unshift(4, 5, 6);
// console.log(arr);

// Дан массив ['js', 'css', 'jq']. Выведите на экран первый элемент.
// let arr = ['js', 'css', 'jq'];
// let elem = arr.shift();
// console.log(elem);

// Дан массив ['js', 'css', 'jq']. Выведите на экран последний элемент.
// let arr = ['js', 'css', 'jq'];
// let elem = arr.pop();
// console.log(elem);

// Дан массив [1, 2, 3, 4, 5]. С помощью метода slice запишите в новый элементы [1, 2, 3].
// let arr = [1, 2, 3, 4, 5];
// let newArr = arr.slice(0, 3);
// console.log(newArr);

// Дан массив [1, 2, 3, 4, 5]. С помощью метода slice запишите в новый элементы [4, 5].
// let arr = [1, 2, 3, 4, 5];
// let newArr = arr.slice(3);
// console.log(newArr);

// Дан массив [1, 2, 3, 4, 5]. С помощью метода splice преобразуйте массив в [1, 4, 5].
// let arr = [1, 2, 3, 4, 5];
// arr.splice(1, 2);
// console.log(arr);

// Дан массив [1, 2, 3, 4, 5]. С помощью метода splice запишите в новый массив элементы [2, 3, 4].
// let arr = [1, 2, 3, 4, 5];
// let sub = arr.splice(1, 3);
// console.log(sub);

// Дан массив [1, 2, 3, 4, 5]. С помощью метода splice сделайте из него массив [1, 2, 3, 'a', 'b', 'c', 4, 5].
// let arr = [1, 2, 3, 4, 5];
// arr.splice(3, 0, 'a', 'b', 'c');
// alert(arr);

// Дан массив [1, 2, 3, 4, 5]. С помощью метода splice сделайте из него массив [1, 'a', 'b', 2, 3, 4, 'c', 5, 'e'].
// let arr = [1, 2, 3, 4, 5];
// arr.splice(1, 0, 'a', 'b');
// arr.splice(6, 0, 'c');
// arr.splice(8, 0, 'd');
// console.log(arr);

// Дан массив с числами. Проверьте, есть ли в этом массиве число 3.
// let arr = [1, 2, 3, 4, 5];
// console.log(arr.indexOf(3));


//===================== Практика на использования изученных методов ========================

// Преобразуйте последнюю букву строки в верхний регистр.
// let str = 'london';
// let result = str.slice(0, 5) + str.slice(5).toUpperCase();
// console.log(result);

// Преобразуйте первые 2 буквы строки в верхний регистр.
// let str = 'london';
// let result = str.slice(0, 2).toUpperCase() + str.slice(2);
// console.log(result);

// Преобразуйте первую букву строки в нижний регистр.
// let str = 'London';
// let result = str.slice(0, 1).toLocaleLowerCase() + str.slice(1);
// console.log(result);

// Давайте напишем код, который преобразует первую букву каждого слова в верхний регистр.
// let str = 'word1 word2 word3';
// let words = str.split(' ');
// for (i = 0; i < words.length; i++) {
//     words[i] = words[i].slice(0, 1).toUpperCase() + words[i].slice(1);
// }
// let result = words.join(' ');
// console.log(result);

// Преобразуйте строку 'var_test_text' в 'VarTestText'.
// Написанный код должен работать для любых строк такого типа (то есть для строк, в которых слова разделены символов подчеркивания).
// let str = 'var_test_text';
// let arr = str.split('_')
// for (i = 0; i < arr.length; i++) {
//     arr[i] = arr[i].slice(0, 1).toUpperCase() + arr[i].slice(1);
// }
// let result = arr.join('');
// console.log(result);

// Модифицируйте предыдущую задачу так, чтобы первая буква новой строки была в нижнем регистре.
// let str = 'var_test_text';
// let arr = str.split('_')
// for (i = 0; i < arr.length; i++) {
//     arr[i] = arr[i].slice(0, 1)+ arr[i].slice(1);
// }
// let result = arr.join('');
// console.log(result);

// Дана строка со словами. Напишите скрипт, который переставит слова в строке в обратном порядке.
// let str = 'Один Два Три';
// let result = str.split(' ').reverse().join(' ');
// console.log(result);


//=============== Основы работы с пользовательскими функциями в JavaScript ================

// Сделайте функцию, выводящую на экран ваше имя.
// function func() {
//     alert('Egor');
// }
// func();

// Сделайте функцию, выводящую на экран сумму чисел от 1 до 100.
// let result = 0;
// function func() {
//     for (let i = 1; i <= 100; i++) {
//         result += i;
//     }
//     alert(result);   
// }
// func();


//====================== Параметры функций в JavaScript ==================================

// Сделайте функцию, которая параметром принимает число и выводит на экран куб этого числа.
// function func(num) {
//     alert(num ** 3);
// }
// func(10);
// func(25);
// func(33);

// Сделайте функцию, которая параметром принимает число и проверяет, положительное это число или отрицательное. В первом случае пусть функция выводит на экран текст '+++', а во втором '---'.
// function func(num) {
//     if (num > 0) {
//         alert('+++');
//     } else if (num < 0) {
//         alert('---');
//     } else {
//         alert(0);
//     }
// }
// func(90);
// func(-12);
// func(0);

// Сделайте функцию, которая параметрами принимает 3 числа и выводит на экран сумму этих чисел.
// function func(num1, num2, num3) {
//     alert(num1 + num2 + num3) 
// }
// func(12, 33, 55);

// Сделайте функцию func, которая параметром будет принимать 3 числа и выводить на экран их сумму.
// Пусть даны 3 переменные с числами:
// let param1 = 1;
// let param2 = 2;
// let param3 = 3;
// С помощью созданной вами функции выведите на экран сумму значений эти переменных.

// function func(num1, num2, num3) {
//         alert(num1 + num2 + num3) 
//     }
// let param1 = 1;
// let param2 = 2;
// let param3 = 3;
// func(param1, param2, param3);

// function func(name1 = 'Аноним', age1 = 'неизвестен') {
// 	alert('ваше имя: ' + name1 + ' возраст: ' + age1);
// }
// func('Вася');


//============================== Инструкция return в JavaScript ===========================

// Сделайте функцию, которая параметром принимает число, а возвращает куб этого числа. С помощью этой функции найдите куб числа 3 и запишите его в переменную result.
// function func(num) {
//     return num ** 3;
// }
// let result = func(3);
// alert(result);  

// Сделайте функцию, которая параметром принимает число, а возвращает квадратный корень из этого числа.
// С помощью этой функции найдите корень числа 3, затем найдите корень числа 4. Просуммируйте полученные результаты и выведите их на экран.

// function funk(num) {
//     return Math.sqrt(num);
// }
// let result = funk(3) + funk(4);
// alert(result);

// Пусть у вас есть функция, возвращающая квадратный корень из числа, и функция, округляющая дробь до трех знаков в дробной части:
// function sqrt(num) {
// 	return Math.sqrt(num);
// }
// function round(num) {
// 	return num.toFixed(3);
// }
// С помощью этих функций найдите квадратный корень из числа 2 и округлите его до трех знаков в дробной части.
// function sqrt(num) {
//     	return Math.sqrt(num);
//     }
// function round(num) {
//     return num.toFixed(3);
// }
// let result = round(sqrt(2));
// console.log(result);

// Пусть у вас есть функция, возвращающая квадратный корень из числа, и функция, возвращающая сумму трех чисел:
// function sqrt(num) {
// 	return Math.sqrt(num);
// }
// function sum(num1, num2, num3) {
// 	return num1 + num2 + num3;
// }
// С помощью этих функций найдите сумму корней чисел 2, 3 и 4 и запишите ее в переменную result.
// function sqrt(num) {
// 	return Math.sqrt(num);
// }
// function sum(num1, num2, num3) {
// 	return num1 + num2 + num3;
// }
// let result = sum(sqrt(2), sqrt(3), sqrt(4));
// console.log(result);

// Пусть у вас есть функция, округляющая дробь до трех знаков в дробной части:
// function round(num) {
// 	return num.toFixed(3);
// }
// С помощью этой функции модифицируйте предыдущую задачу так, чтобы в переменную result записывалась дробь, округленная до 3-х знаков в дробной части.
// function sqrt(num) {
// 	return Math.sqrt(num);
// }
// function sum(num1, num2, num3) {
// 	return num1 + num2 + num3;
// }
// function round(num) {
//     return num.toFixed(3);
// }
// let result = round(sum(sqrt(2), sqrt(3), sqrt(4)));
// console.log(result);

// Напишите функцию, которая параметром будет принимать число и делить его на 2 столько раз, пока результат не станет меньше 10. Пусть функция возвращает количество итераций, которое потребовалось для достижения результата.
// function moreThenTen(num) {
//     for (i = 1; i <= num; i++) {
//         num = num / 2
//         if (num < 10) {
//             return num = i;
//         }
//     }
// }
// console.log(moreThenTen(100));

// function moreThenTen(num) {
//     let i = 1;
//     while(true){
//         num /= 2;
//         if(num < 10){
//         return i;
//         }
//     i++;
//     }
// }
// console.log(moreThenTen(0));

// function func(num1, num2) {
// 	let result;	
// 	if (num1 > 0 && num2 > 0) {
// 		result = num1 * num2;
// 	} else {
// 		result = num1 - num2;
// 	}
// 	return result;
// }
// alert(func(3, 4));
// Перепишите ее в сокращенной форме согласно изученной теории.

// function func(num1, num2) {
//     if (num1 > 0 && num2 > 0) {
//         return num1 * num2;
//     } else {
//         return num1 - num2;
//     }
// }
// alert(func(3, 4));


//====================== Примеры на создание функций в JavaScript ==========================

// Напишите функцию, которая будет находить сумму квадратов элементов массива.
// function getSum(arr) {
//     let summ = 0;
//     for (let elem of arr) {
//         summ += elem ** 2;
//     }
//     return summ;
// }
// let arr1 = [1, 2, 3, 4, 5];
// console.log(getSum(arr1));

// Сделайте функцию getDigitsSum (digit - это цифра), которая параметром будет принимать целое число и возвращать сумму его цифр.
// function getDigitSum(num) {
//     num = String(num);
//     let arr = num.split('');
//     let sum = 0;
//     for (let i = 0; i < arr.length; i++) {
//         sum += Number(arr[i]);
//     }
//     return sum;
// }
// console.log(getDigitSum(987));

// Реализуйте функцию getDivisors, которая параметром будет принимать число и возвращать массив его делителей, то есть чисел, на которое делится наше число. К примеру, если мы передадим число 24 - мы должны получить массив [1, 2, 3, 4, 6, 8, 12, 24].
// function getDivisors(num) {
//     let arr = [];
//     for (let i = 1; i <= num; i++) {
//         if (num % i == 0) {
//             arr.push(i);
//         }
//     }
//     return arr;
// }
// console.log(getDivisors(100));

// Сделайте функцию reverseStr, которая параметром будет принимать строку и переворачивать ее символы в обратном порядке. Решите задачу без цикла, используя комбинацию стандартных функций JavaScript.
// function reverseStr(str) {
//     let arr = str.split('');
//     arr.reverse();
//     let newStr = arr.join('');
//     return newStr;
// }
// console.log(reverseStr('лига'));

// Сделайте функцию delElem, которая параметрами будет принимать значение и массив и удалять из массива все элементы с таким значением.
// function delElem(num, arr) {
//     for (let i = 0; i < arr.length; i++) {
//         if (arr[i] == num) {
//             arr.splice(i, 1);    
//         }
//     }
//     return arr;
// }
// console.log(delElem(2, [1, 2, 3, 4, 5]));

// Сделайте функцию, заполняющую массив целыми числами от 1 до заданного.
// function fillArray(num) {
//     let arr = [];
//     for (let i = 1; i <= num; i++) {
//         arr.push(i);
//     }
//     return arr;
// }
// console.log(fillArray(25));

// Сделайте функцию, заполняющую массив целыми числами от начального до конечного заданных чисел.
// let num1 = 1;
// let num2 = 10;
// let arr = [];
// for (let i = num1; i <= num2; i++) {
//     arr.push(i);
// }
// console.log(arr);

// function fillArray(num1, num2) {
//     let arr = [];
//     for (let i = num1; i <= num2; i++) {
//         arr.push(i);
//     }
//     return arr;
// }
// console.log(fillArray(1, 10));


//=============================== Флаги в функциях JavaScript ==============================

// Сделайте функцию, которая параметром будет принимать массив с числами, и проверять, что все элементы в этом массиве являются четными числами.
// function isEven (arr) {
//     for (let elem of arr) {
//         if (elem % 2 != 0) {
//             return false;
//         }
//     }
//     return true;
// }
// console.log(isEven([2, 5, 6, 8]));

// Сделайте функцию, которая параметром будет принимать число и проверять, что все цифры 
// function isUneven(num) {
//     num = String(num);
//     let arr = num.split('');
//     for (let elem of arr) {
//         if (Number(elem) % 2 == 0) {
//             return false;
//         }
//     }
//     return true;    
// }   
// console.log(isUneven(3157));

// Сделайте функцию, которая параметром будет принимать массив и проверять, есть ли в этом массиве два одинаковых элемента подряд.
// function noRepeatInArow(arr) {
//     for (let i = 0; i < arr.length; i++) {
//         if (arr[i] == arr[i + 1]) {
//             return false;
//         }
//     }
//     return true;
// }
// console.log(noRepeatInArow([1, 2, 3, , 4, 5]));


//=================== Логические операторы без if в функциях JavaScript ====================

// function func(a, b) {
// 	if (a == b) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// }
// Перепишите ее код в сокращенной форме согласно изученной теории.
// function func(a, b) {
// 	return a == b;
// }
// console.log(func(3, 2));

// function func(a, b) {
// 	if (a != b) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// }
// Перепишите ее код в сокращенной форме согласно изученной теории.
// function func(a, b) {
// 	return a != b;
// }
// console.log(func(2, 3));


//====================== Правильное использование функций JavaScript ========================

// Дана функция, проверяющая числа на простоту:
// function isPrime(num) {
// 	for (let i = 2; i < num; i++) {
// 		if (num % i == 0) {
// 			return false;
// 		}
// 	}
	
// 	return true;
// }
// С помощью приведенной функции найдите все простые числа в интервале от 1 до 100.

// let result = [];
// for (i = 1; i <= 100; i++) {
//     if (isPrime(i)) {
//         result.push(i);
//     }
// }
// console.log(result);

// function isPrime(num) {
// 	for (let i = 2; i < num; i++) {
// 		if (num % i == 0) {
// 			return false;
// 		}
// 	}	
// 	return true;
// }

// Дана функция getDigitsSum, которая параметром принимает целое число и возвращает сумму его цифр:
// function getDigitsSum(num) {
// 	let sum = 0;
// 	let digits = String(num).split('');
// 	for (let digit of digits) {
// 		sum += Number(digit);
// 	}	
// 	return sum;
// }
// С помощью приведенной функции getDigitsSum найдите все года от 1 до 2030, сумма цифр которых равна 13.

// let result = [];
// for (let i = 1; i <= 2030; i++) {
//     if (getDigitsSum(i) == 13) {
//         result.push(i);
//     }
// }
// alert(result);

// function getDigitsSum(num) {
//     let sum = 0;
//     let digits = String(num).split('');
//     for (let digit of digits) {
//         sum += Number(digit);
//     }	
//     return sum;
// }

// Пусть дан какой-то массив с числами, например, такой:
// [123, 456, 789]
// Давайте сделаем так, чтобы цифры в каждом элементе массива были в обратном порядке. То есть из нашего массива сделаем следующий:
// [321, 654, 987]
// Некий программист уже написал код, реализующий описанную задачу:
// let nums = [123, 456, 789];
// let result = [];
// for (let num of nums) {
// 	result.push(String(num).split('').reverse().join(''));
// }
// console.log(result); // выведет [321, 654, 987]
// Переделайте приведенный код так, чтобы переворот числа выполняла отдельная функция.
// let nums = [123, 456, 789];
// let result = [];
// for (let num of nums) {
// 	result.push(flipNumbers(num));
// }
// console.log(result); 

// function flipNumbers(number) {
//     let resultate = String(number).split('').reverse().join('');
//     return resultate;
// }

// Даны два числа. Необходимо проверить, равна ли сумма цифр первого числа сумме цифр второго числа.
// Некий программист уже написал решение задачи, вот оно:
// let num1 = 234;
// let num2 = 531;
// let digits1 = String(num1).split('');
// let digitsSum1 = 0;
// for (let digit1 of digits1) {
// 	digitsSum1 += Number(digit1);
// }
// let digits2 = String(num1).split('');
// let digitsSum2 = 0;
// for (let digit2 of digits2) {
// 	digitsSum2 += Number(digit2);
// }
// if (digitsSum1 == digitsSum2) {
// 	alert('суммы цифр совпадают');
// } else {
// 	alert('суммы цифр не совпадают');
// }
// В чем недостатки приведенного кода? Переделайте код так, чтобы он был более удачным.
// let num1 = 234;
// let num2 = 531;
// if (getDigitsSum(num1) == getDigitsSum(num2)) {
// 	console.log('суммы цифр совпадают');
// } else {
// 	console.log('суммы цифр не совпадают');
// }

// function getDigitsSum(num) {
//     let digits = String(num).split('');
//     let digitsSum = 0;
//     for (let digit of digits) {
//         digitsSum += Number(digit);
//     }
//     return digitsSum;
// }

// Дан массив с числами. Необходимо перебрать этот массив с числами и вывести в консоль нетривиальные делители этих чисел (то есть исключая число 1 и само число).
// Некий программист уже написал решение задачи:
// let nums = [12, 24, 35, 14];
// for (let num of nums) {
// 	console.log(num + ': ' + getDivisors(num).join(', '));
// }
// function getDivisors(num) {
// 	let result = [];
	
// 	for (let i = 2; i < num; i++) {
// 		if (num % i == 0) {
// 			result.push(num);
// 		}
// 	}
	
// 	return result;
// }
// Программист не тестировал отдельно работу функции getDivisors, а написал весь код сразу и затем запустил его. При запуске оказалось, что код работает как-то не так. Видимо, в функции getDivisors была допущена какая-то ошибка.
// айдите и исправьте ошибку. Потестируйте отдельно функцию getDivisors, чтобы убедиться, что она работает корректно после вашей правки. После того, как вы убедитесь в корректности работы функции - проверьте полный код решения задачи.

// let nums = [12, 24, 35, 14];
// for (let num of nums) {
// 	console.log(num + ': ' + getDivisors(num).join(', '));
// }

// function getDivisors(num) {
// 	let result = [];
// 	for (let i = 2; i < num; i++) {
// 		if (num % i == 0) {
// 			result.push(i);
// 		}
// 	}
// 	return result;
// }

 
//==================== Комбинация вспомогательных функций JavaScript =======================

// Дана функция getSum, находящая сумму элементов переданного массива:
// function getSum(arr) {
// 	let sum = 0;
// 	for (let elem of arr) {
// 		sum += Number(elem);
// 	}
// 	return sum;
// }
// Дана функция getDigits, возвращающая массив цифр числа:
// function getDigits(num) {
// 	return String(num).split('');
// }
// Используя комбинацию приведенных функций найдите сумму цифр числа 12345.
// console.log(getSum(getDigits(12345)));
// function getSum(arr) {
// 	let sum = 0;
// 	for (let elem of arr) {
// 		sum += Number(elem);
// 	}
// 	return sum;
// }
// function getDigits(num) {
// 	return String(num).split('');
// }

// Дано число. Нужно найти его делители (без 1 и самого числа), а затем найти среднее арифметическое (сумма делить на количество) делителей числа и вывести результат на экран.
// Некий программист уже написал решение задачи:
// console.log( getAvg(getDivisors(24)) );
// // Нахождение среднего арифметического:
// function getAvg(arr) {
// 	let sum = 0;
// 	for (let elem of arr) {
// 		sum = elem;
// 	}	
// 	return sum / arr.length;
// }
// // Нахождение массива делителей числа:
// function getDivisors(num) {
// 	let result = [];	
// 	for (let i = 2; i > num; i++) {
// 		if (num % i == 0) {
// 			result.push(i);
// 		}
// 	}
// }
// Программист не тестировал отдельно работу своих функций, а написал весь код сразу и затем запустил его. При запуске оказалось, что код работает неверно.
// Найдите и исправьте ошибки программиста. Потестируйте отдельно работу всех функций, чтобы убедиться, что они работают корректно после ваших правок. После того, как вы убедитесь в корректности работы функций - проверьте полный код решения задачи.

// console.log(getAvg(getDivisors(32)));
// function getAvg(arr) {
// 	let sum = 0;
// 	for (let elem of arr) {
// 		sum += elem;
// 	}	
// 	return sum / arr.length;
// }

// function getDivisors(num) {
// 	let result = [];	
// 	for (let i = 2; i < num; i++) {
// 		if (num % i == 0) {
// 			result.push(i);
// 		}
// 	}
//     return result;
// }


//============= Вспомогательные функции внутри других функций в JavaScript =================

// Пусть у нас дан массив с числами. Решим следующую задачу: запишем в новый массив только те элементы, сумма цифр в которых от 1 до 9.
// let arr = [123, 22, 88, 3]
// let result = [];
// function getDigits(num) {
//     let str = String(num);
//     return str.split('');
// }

// function getSum(arr) {
//     let sum = 0;
//     for (let elem of arr) {
//         sum += Number(elem);
//     }
//     return sum;
// }

// function inRange(num) {
//     let result = getSum(getDigits(num));
//     return result >= 1 && result <= 9;
// }

// for (let elem of arr) {
//     if (inRange(elem)) {
//         result.push(elem);
//     }
// }
// console.log(result);


//======================= Дружественные числа на JavaScript =============================

// function isFreindly(num1, num2) {
// 	let sum1 = getSum(getOwnDivisors(num1));
// 	let sum2 = getSum(getOwnDivisors(num2));
// 	if (sum1 == num2 && sum2 == num1) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// }

// function getOwnDivisors(num) {
// 	// тут будет какой-то код
// }

// function getSum(arr) {
// 	// тут будет какой-то код
// }
// Реализуйте функцию getOwnDivisors. Потестируйте ее работу.
// Реализуйте функцию getSum. Потестируйте ее работу.
// Проверьте работу функции isFreindly.

// function isFreindly(num1, num2) {
//     let sum1 = getSum(getOwnDivisors(num1));
//     let sum2 = getSum(getOwnDivisors(num2));
//     if (sum1 == num2 && sum2 == num1) {
//         return true;
//     } else {
//         return false;
//     }
// }

// function getOwnDivisors(num) {
//     let arr = [];
//     for (let i = 1; i < num; i++) {
//         if (num % i == 0) {
//             arr.push(i);
//         }
//     }
//     return arr;
// }

// function getSum(arr) {
//     let sum = 0;
//     for (elem of arr) {
//         sum += elem;
//     }
//     return sum;
// }
// console.log(isFreindly(222, 284));

// Сделайте функцию getFreindly, которая будет находить пары дружественных чисел в заданном промежутке и возвращать их в виде двухмерного массива вида [ [220, 284], [1184, 1210], [2620, 2924] ]. С помощью созданной функции найдите все пары дружественных чисел на промежутке от 1 до 9000.

// function getFreindly(startNum, endNum) {
//     let arr = [];
//     let result = [];
//     for (let i = startNum; i <= endNum; i++) {
//         if (friendlyNum(i)) {
//             arr[i] = [];    
//             arr[i][0] = i;
//             arr[i][1] = friendlyNum(i);
//         }
//     }    
//     for (let elem of arr) {
//         if (elem != undefined && ) {
//         result.push(elem);
//         }
//     }
//     return result;
// }

// function friendlyNum(num) {
//     let a = getSum(getOwnDivisors(num));
//     let b = getSum(getOwnDivisors(a));
//     if (b == num && a != num) {
//         return a;
//     } else {
//         return false;
//     }
// }

// function getOwnDivisors(num) {
//     let arr = [];
//     for (let i = 1; i < num; i++) {
//         if (num % i == 0) {
//             arr.push(i);
//         }
//     }
//     return arr;
// }

// function getSum(arr) {
//     let sum = 0;
//     for (elem of arr) {
//         sum += elem;
//     }
//     return sum;
// }
// console.log(getFreindly(1, 9000));

// Совершенное число - целое число, равное сумме всех своих собственных делителей (то есть всех положительных делителей, отличных от самого числа). Сделайте функцию getPerfect, которая будет находить совершенные числа в заданном диапазоне. Проверьте работу функции в промежутке от 1 до 1000.
// function getPerfect(numStart, numEnd){
//     let arr = [];
//     for (let i = numStart; i <= numEnd; i++){
//         if (getOwnDivisorsSum(i) == i) {
//             arr.push(i);
//         }
//     }
//     return arr;
// }
// console.log(getPerfect(1, 10000));

// function getOwnDivisorsSum(num) {
//     let arr = [];
//     let sum = 0;
//     for (let i = 1; i < num; i++) {
//         if (num % i == 0) {
//             arr.push(i);
//         }
//     }
//     for (let elem of arr) {
//         sum += elem;
//     }
//     return sum;
// }

// Сделайте функцию getSimpleDivisors, которая будет принимать параметром целое число и находить все делители этого числа, являющиеся простыми числами.

// function getDivisors(num) {
//     let arr = [];
//     for (let i = 1; i <= num; i++) {
//         if (num % i == 0) {
//             arr.push(i);
//         }
//     } 
//     return arr;
// }

// function getSimpleDivisors(num) {
//     let arr = getDivisors(num);
//     let result = [];
//     for (let elem of arr) {
//         let flag = true;
//         for (let i = 2; i < elem; i++) {
//             if (elem % i == 0) {
//                 flag = false;
//                 break;
//             }
//         }
//         if (flag) {
//             result.push(elem);
//         }
//     }
//     return result;
// }
// console.log(getSimpleDivisors(33));


// =========================== Пересечение массивов на JavaScript ==============================

// Давайте напишем функцию getInt, которая будет находить пересечение массивов и возвращать пересечение этих массивов.
// let result = [];
// function getInt(arr1, arr2){
//     for (elem of arr1) {
//         if (inArray(elem, arr2)) {
//             result.push(elem);
//         }
//     }
//     return result;
// }

// function inArray(elem, arr) {
//     return arr.indexOf(elem) != -1;
// }

// console.log(getInt([1, 2, 3], [2, 3, 4, 5]));


//========================== Разность массивов на JavaScript ==================================

// Пусть у нас даны два массива:
// let arr1 = [1, 2, 3];
// let arr2 = [2, 3, 4, 5];
// Можно заметить, что числа 1, 4 и 5 не присутствуют одновременно в обоих массивах. Такие элементы называются разностью массивов
// Давайте функцию getDiff, которая будет находить разность двух массивов.

// function getDiff(arr1, arr2) {
//     let diff1 = getFirstDiff(arr1, arr2);
//     let diff2 = getFirstDiff(arr2, arr1);
//     return [].concat(diff1, diff2);
// }

// function getFirstDiff(arr1, arr2) {
//     let result = [];
//     for (let elem of arr1) {
//         if (!inArray(elem, arr2)) {
//             result.push(elem);
//         }
//     }
//     return result;
// }

// function inArray(elem, arr) {
//     return arr.indexOf(elem) != -1;
// }
// console.log(getDiff([1, 2, 3], [2, 3, 4, 5]));


//=========================== Наибольший общий делитель на JavaScript ==========================

// Реализуйте функцию getGreatestCommonDivisor, которая параметрами будет принимать два числа и возвращать НОД этих двух чисел.
// При решении задачи старайтесь использовать вспомогательные функции, в том числе полученные нами ранее в теоретической части.
// Обязательно тестируйте каждую вспомогательную функцию перед использованием.
// function getGreatestCommonDivisor(num1, num2) {
//     let divisors1 = getDivisors(num1);
//     let divisors2 = getDivisors(num2);
//     let commondivisors = getInt(divisors1, divisors2);
//     let result = Math.max.apply(null, commondivisors);
//     return result;

// }
// function getDivisors(num) {
//     let arr = [];
//     for (let i = 1; i <= num; i++) {
//         if (num % i == 0) {
//             arr.push(i);
//         }
//     }
//     return arr;
// }

// function inArray(elem, arr) {
//     return arr.indexOf(elem) != -1;
// }

// function getInt(arr1, arr2) {
//     let arr = [];
//     for (let elem of arr1) {
//         if (inArray(elem, arr2)) {
//             arr.push(elem);
//         }
//     }
//     return arr;
// }
// console.log(getGreatestCommonDivisor(12, 18));

// Положительные целые числа, не имеющие общих делителей, кроме тривиальной единицы, называются взаимно простыми.
// Говоря другими словами, два числа можно назвать взаимно простыми, если их НОД равен единице.
// Напишите функцию, которая параметрами будет принимать два числа и проверять - взаимно простые они или нет.
// function getMutuallySimpleNumbers(num1, num2) {
//     let divisors1 = getDivisors(num1);
//     let divisors2 = getDivisors(num2);
//     let commondivisors = getInt(divisors1, divisors2);
//     let result = Math.max.apply(null, commondivisors);
//     return result == 1;
// }
// function getDivisors(num) {
//     let arr = [];
//     for (let i = 1; i <= num; i++) {
//         if (num % i == 0) {
//             arr.push(i);
//         }
//     }
//     return arr;
// }

// function inArray(elem, arr) {
//     return arr.indexOf(elem) != -1;
// }

// function getInt(arr1, arr2) {
//     let arr = [];
//     for (let elem of arr1) {
//         if (inArray(elem, arr2)) {
//             arr.push(elem);
//         }
//     }
//     return arr;
// }
// console.log(getMutuallySimpleNumbers(22, 17));


//=================== Случайный элемент из массива на JavaScript ==============================

// Самостоятельно, не подсматривая в мой код, реализуйте описанную функцию. При решении задачи код функции getRandomInt скопируйте из учебника.
// function getRandomInt(min, max) {
// 	return Math.floor(Math.random() * (max - min + 1)) + min;
// }

// let arr = [1, 2, 3, 4, 5];
// let key = getRandomInt(0, arr.length -1);
// console.log(key);

// function getRandomArrEl(arr) {
//     return arr[getRandomInt(0, arr.length -1)];
// }
// console.log(getRandomArrEl([1, 2, 3, 4, 5])); 

// Используя созданную функцию, найдите сумму трех случайных элементов из массива.
// function getRandomInt(min, max) {
// 	return Math.floor(Math.random() * (max - min + 1)) + min;
// }

// function getRandomArrElemsSum(arr, num) {
//     let result = arr[getRandomInt(0, arr.length -1)];
//     let sum = 0;
//     for (let i = 1; i < num; i++) {
//         sum += result;
//     }
//     return sum;
// }
// console.log(getRandomArrElemsSum([1, 2, 3, 4, 5], 3));


//========================== Перемешивание массива на JavaScript ===============================


// Реализуем функцию shuffle, параметром принимающую массив и перемешивающую его элементы в случайном порядке.
// Самостоятельно, не подсматривая в мой код, реализуйте описанную функцию. При решении задачи код функции getRandomInt скопируйте из учебника.
// function getRandomInt(min, max) {
// 	return Math.floor(Math.random() * (max - min + 1)) + min;
// }

// function shuffle(arr) {
//     let result = [];
//     while (arr.length > 0) {
//         let random = getRandomInt(0, arr.length - 1);
//         let elem = arr.splice(random, 1)[0];
//         result.push(elem);
//     }
//     return result;
// }
// console.log(shuffle([1, 2, 3, 4, 5]));

// Сделайте функцию range принимающую параметрами 2 целых числа - начало и конец диапазона, и возвращающую массив, заполненный целыми числами из этого диапазона.
// function getRandomInt(min, max) {
//     	return Math.floor(Math.random() * (max - min + 1)) + min;
// }

// function range(num1, num2) {
//     let arr = [];
//     while (arr.length < 10) {
//         let random = getRandomInt(num1, num2);
//         arr.push(random);
//     }
//     return arr;
// }
// console.log(range(1, 25));

// Сделайте функцию rangeRand, возвращающую массив, заполненный случайными целыми числами из заданного диапазона. При этом числа не должны повторяться. Для решения задачи используйте комбинацию функций range и shuffle.
// function getRandomInt(min, max) {
//     	return Math.floor(Math.random() * (max - min + 1)) + min;
// }

// function rangeRand(num1, num2) {
//     let arr = [];
//     while (arr.length < 10) {
//         let random = getRandomInt(num1, num2);
//         if (arr.indexOf(random) == -1) {
//             arr.push(random);
//         }
//     }
//     return arr;
// }
// console.log(rangeRand(1, 23));


//======================== Случайные элементы из массива на JavaScript =========================

// Давайте теперь реализуем функцию randoms, возвращающую заданное количество случайных элементов из массива.
// Пусть первым параметром функция принимает массив, а вторым - количество элементов, которое следует вернуть.
// function getRandomInt(min, max) {
//         return Math.floor(Math.random() * (max - min + 1)) + min;
// }

// function shuffle(arr) {
//     let result = [];
//     while (arr.length > 0) {
//         let random = getRandomInt(0, arr.length - 1);
//         let elem = arr.splice(random, 1)[0];
//         result.push(elem);
//     }
//     return result;
// }

// function first(arr, length) {
//     return arr.slice(0, length);
// }

// function randoms(arr, length) {
//     return first(shuffle(arr), length);
// }

// console.log(randoms([1,2,3,4,5], 3));


//============================== Счастливые билеты на JavaScript ================================

// Пусть нам нужно вывести на экран все возможные счастливые автобусные билеты. Билет называется счастливым, если сумма первых трех цифр билета равна сумме вторых трех цифр (будем рассматривать только билеты, в номере которых 6 цифр).
// function getLuckyTickets() {
//     let arr = [];
//     for (let i = 1001; i < 999999; i++) {
//         if (isLucky(i)) {
//             arr.push(i);
//         }
//     }
//     return arr;
// }

// function isLucky(num) {
//     let str = normolizeNum(num);
//     let sum1 = Number(str[0]) + Number(str[1]) + Number(str[2]);
//     let sum2 = Number(str[3]) + Number(str[4]) + Number(str[5]);
//     return sum1 == sum2; 
// }

// function normolizeNum(num) {
//     let str = String(num);
//     if (str.length == 5) {
//         str = '0' + str;
//     }
//     if (str.length == 4) {
//         str = '00' + str;
//     }
//     return str;
// }

// console.log(getLuckyTickets());


//====================== Счастливые билеты любой длины на JavaScript ============================

// function getLuckyTickets(digitsAmount) {
//     let result = [];
//     let first = getFirst(digitsAmount);
//     let last = getLast(digitsAmount);
//     for (let i = first; i < last; i++) {
//         let ticketNum = normalizeNum(i, digitsAmount)
//         if (isLucky(ticketNum)) {
//             result.push(ticketNum);
//         }
//     }
//     return result;
// }

// function getFirst(digitsAmount) {
//    let logic = digitsAmount / 2 - 1;
//    let num = '11';
//    let arr = num.split('');
//     for (let i = 0; i < logic; i++) {
//         arr.splice(1, 0, '0');
//     }
//     return Number(arr.join(''));
// }

// function getLast(digitsAmount) {
//     let result = '';
//     for (let i = 0; i < digitsAmount; i++) {
//         result += '9';
//     }
//     return Number(result);
// }

// function isLucky(num) {
//     let sum1 = 0;
//     let sum2 = 0;
// 	let result = num.length / 2;
//     for (let i = 0; i < result; i++) {
//         sum1 += Number(num[i]);  
//     }
//     for (let i = result; i < num.length; i++) {
//         sum2 += Number(num[i]);
//     }
//     return sum1 == sum2;
// }

// function normalizeNum(num, digitsAmount) {
// 	let str = String(num);
// 	return formStr('', digitsAmount - str.length) + str;
// }

// function formStr(data, digitsAmount) {
//     while (data.length < digitsAmount) {
//        data = '0' + data;
//     }
//     return data;
// }
// console.log(getLuckyTickets(10));


//==================== Область видимости переменных в функциях JavaScript =======================


// let num = 1;		
// function func() {
// 	alert(num);
// }
// num = 2;
// func();

// function func() {
// 	let num = 5;
// 	return num;
// }
// alert(num);

// function func() {
// 	let num = 5;
// 	return num;
// }

// alert(num);


//================== Область видимости и параметры функций JavaScript ==========================

// function func(localNum) {
// 	localNum = 2; // ничего не меняет снаружи
// }
// let num = 1;
// console.log(func(num));

// function func(localNum) {
// 	alert(localNum);
// }
// let num = 1;
// func(num);

// function func(localNum) {
// 	num = 2;
// }

// let num = 1;
// func(num);
// alert(num);

// function func() {
// 	num = 2;
// }

// let num = 1;
// func();
// alert(num);


//====================== Исходный код функции и ее результат в JavaScript ========================

// function func() {
// 	return '!';
// }

// alert(func); // не пишем круглые скобки


//======================== Функция как переменная в JavaScript =================================

// Сделайте функцию func, которая будет возвращать через return какую-либо строку.
// function func() {
//     return 'string';
// }
// alert(func());

// Запишите в переменную func число 123, тем самым затерев функцию из этой переменной. Выведите новое значение переменной func на экран.
// function func() {
//     return 'string'
// }
// func = 123;
// console.log(func);

// Сделайте функцию func1, которая будет возвращать через return число 3.
// function func1() {
//     return 3;
// }
// console.log(func1());

// Скопируйте исходный код функции func1, в переменную func2.
// function func1() {
//     return 3;
// }
// let func2 = func1;

// Выведите на экран сумму результатов работы функций func1 и func2.
// function func1() {
//     return 3;
// }
// let func2 = func1;
// console.log(func1() + func2());

// Сделайте безымянную функцию, которая будет возвращать через return число 1. Запишите эту функцию в переменную func1.
// let func1 = function() {
//     return 1;
// };

// Сделайте безымянную функцию, которая будет возвращать через return число 2. Запишите эту функцию в переменную func2.
// let func2 = function() {
//     return 2;
// };

// // Найдите сумму значений функций func1 и func2. Выведите эту сумму алертом на экран.
// let func1 = function() {
//     return 1;
// };
// let func2 = function() {
//     return 2;
// };
// alert(func1() + func2());

// следует придерживаться правила, общего для всех языков программирования: функции должны быть глаголами, а переменные - существительными.


//=============== Function expression и Function declaration в JavaScript ======================


//=================== Нюансы функциональных выражений в JavaScript =============================

// func();
// let test = function func() {
// 	alert('!');
// }

// func();
// alert(
// 	function func() {
// 		alert('!');
// 	}
// );

// func();
// +function func() {
// 	alert('!');
// }

// func();
// function func() {
// 	alert('!');
// }


//======================== Массив с анонимными функциями в JavaScript ============================
// let arr = [
// 	function() {alert('1')},
// 	function() {alert('2')},
// 	function() {alert('3')},
// ];

// alert(arr[0]);

// let arr = [
// 	function() {alert('1')},
// 	function() {alert('2')},
// 	function() {alert('3')},
// ];
// arr[0]();

// let arr = [
// 	function() {alert('1')},
// 	function() {alert('2')},
// 	function() {alert('3')},
// ];

// for (let func of arr) {
// 	func(); // вызываем наши функции в цикле
// }

// Сделайте массив arr с тремя функциями. Пусть первая возвращает через return число 1, вторая - число 2, третья - число 3.
// let arr = [
// 	function() {return 1},
// 	function() {return 2},
// 	function() {return 3},
// ];

// Используя созданный вами массив arr выведите на экран число 3, вызвав соответствующую функцию.
// let arr = [
// 	function() {return 1},
// 	function() {return 2},
// 	function() {return 3},
// ];
// alert(arr[2]());

// Используя созданный вами массив arr найдите сумму результатов функций (без цикла).
// let arr = [
// 	function() {return 1},
// 	function() {return 2},
// 	function() {return 3},
// ];
// let sum = arr[0]() + arr[1]() + arr[2]();
// alert(sum);

// Переберите созданный вами массив arr циклом и выведите результаты работы всех функций на экран.
// let arr = [
// 	function() {return 1},
// 	function() {return 2},
// 	function() {return 3},
// ];
// for (let elem of arr) {
// 	alert(elem());
// }


//======================== Объект с анонимными функциями в JavaScript ============================

// Сделайте объект с тремя функциями. Пусть первая возвращает через return число 1, вторая - число 2, третья - число 3. С помощью созданных функций выведите на экран сумму возвращаемых чисел.
// let obj = {
// 	func1 : function() {return 1},
// 	func2 : function() {return 2},
// 	func3 : function() {return 3}
// }
// alert(obj.func1() + obj.func2() + obj.func3());

// Переберите созданный объект циклом и выведите результаты работы функций на экран.
// let obj = {
// 	func1 : function() {return 1},
// 	func2 : function() {return 2},
// 	func3 : function() {return 3}
// }
// for (let elem in obj) {
// 	alert(obj[elem]());
// }

// Сделайте объект с тремя функциями, каждая из которых будет принимать параметром массив с числами. Сделайте так, чтобы первая функция возвращала сумму элементов массива, вторая функция - сумму квадратов, а третья - сумму кубов.
// let obj = {
// 	func1: function(arr) {
// 		let sum = 0;
// 		for (let elem of arr) {
// 			sum += elem;
// 		}
// 		return sum;
// 	},
	
// 	func2: function(arr) {
// 		let sumSquares = 0;
// 		for (let elem of arr) {
// 			sumSquares += elem ** 2;
// 		}
// 		return sumSquares;
// 	},

// 	func3: function(arr) {
// 		let sumCubes = 0;
// 		for (let elem of arr) {
// 			sumCubes += elem ** 3;
// 		}
// 		return sumCubes;
// 	}
// }
// for (let elem in obj) {
// 	alert(obj[elem]([1, 2, 3, 4, 5]));
// }

//======================= Передача функций параметрами в JavaScript ==============================

// Сделайте функцию test, параметрами принимающую 3 функции. Передайте в нее первым параметром функцию, возвращающую 1, вторым - функцию, возвращающую 2, третьим - функцию, возвращающую 3. Выведите на экран сумму результатов функций.
// test(
// 	function() {return 1;}, 
// 	function() {return 2;}, 
// 	function() {return 3;}
// );
// function test(func1, func2, func3) {
// 	console.log(func1() + func2() + func3());
// }	

// Сделайте функцию test, параметрами принимающую 3 функции и возвращающую сумму результатов переданных функций.
// function test(func1, func2, func3) {
// 	return alert(func1() + func2() + func3());
// }

// Сделайте 3 функции, объявив их как Function Declaration и дав им имена func1, func2 и func3. Пусть первая функция возвращает 1, вторая - 2, а третья - 3. Передайте эти функции параметром в функцию test из предыдущей задачи.
// function func1() {return 1;}
// function func2() {return 2;}
// function func3() {return 3;}

// test(func1, func2, func3);

// function test(func1, func2, func3) {
// 	return alert(func1() + func2() + func3());
// }

// Модифицируйте предыдущую задачу так, чтобы функции были объявлены как Function Expression с теми же именами.
// let func1 = function() {return 1;}
// let func2 = function() {return 2;}
// let func3 = function() {return 3;}

// test(func1, func2, func3);

// function test(func1, func2, func3) {
// 	console.log(func1() + func2() + func3());
// }

// Скопируйте код моей функции test. Вызовите эту функцию, передав ей параметром анонимную функцию, которая параметром будет принимать число и возвращать его куб.
// test(function(num) {
// 	return num ** 3;
// });

// function test(func) {
// 	alert(func(3));
// }

// Переделайте ваш код так, чтобы передаваемая функция была не анонимной, а была определена как Function Declaration с именем func.
// test(function func(num) {
// 	return num ** 3;
// });

// function test(func) {
// 	alert(func(3));
// }

// Переделайте передаваемую функцию на Function Expression с тем же именем func.
// let func = function(num) {
// 	return num ** 3;
// }
// test(func);

// function test(func) {
// 	alert(func(3));
// }

// Пусть передаваемая функция теперь принимает два параметра и возвращает их сумму. При вызове передаваемая функции внутри test передайте в передаваемую функцию число 2 и число 3. Выведите алертом результат.
// test(function func(num1, num2) {
// 	return num1 + num2;
// });

// function test(func) {
// 	alert(func(2, 3));
// }

// Пусть функция test первым параметром принимает число, а вторым и третьим параметрами - функции, также параметром принимающие числа.
// Пусть функция test возвращает сумму результатов переданных функций:
// function test(num, func1, func2) {
// 	return func1(num) + func2(num);
// }
// Вызовите функцию test, первым параметром передав число 3, вторым параметром функцию, возводящую число в квадрат, а третьим - функцию, возводящую число в куб. Выведите результат работы на экран.
// function test(num, func1, func2) {
// 	return alert(func1(num) + func2(num));
// }
// test(3, func1, func2);

// function func1(num) {
// 	return num * num;
// }
// function func2(num) {
// 	return num * num * num;
// }

// Давайте сделаем функцию, которая параметром будет принимать массив, а вторым параметром - функцию. Переданная функция должна будет применится к каждому элементу массива:
// function test(arr, func) {
// 	for (let i = 0; i < arr.length; i++) {
// 		arr[i] = func(arr[i]);
// 	}
// 	return arr;
// }



// let result = test([1, 2, 3, 4, 5], function func(num) {
// 	return num * num;
// });
// console.log(result);

// Вызовите созданную вами функцию test, передав ей параметром массив с числами. Сделайте так, чтобы функция вернула массив с кубами этих чисел.
// function test(arr, func) {
// 	for (let i = 0; i < arr.length; i++) {
// 		arr[i] = func(arr[i]);
// 	}
// 	return arr;
// }



// let result = test([1, 2, 3, 4, 5], function func(num) {
// 	return num * num * num;
// });
// console.log(result);



//============================== Функция в функции в JavaScript =================================
// Сделайте функцию func, которая параметрами будет принимать два числа, а возвращать сумму квадрата первого числа с кубом второго числа.
// Сделайте для этого вспомогательную функцию square, возводящую число в квадрат, и вспомогательную функцию cube, возводящую число в куб.
// function func(num1, num2) {
// 	function square(num) {
// 		return num * num;
// 	}
// 	function cube(num) {
// 		return num * num * num;
// 	}
// 	return square(num1) + cube(num2);
// }
// alert(func(5, 10));


//=============== Функция в функции и область видимости переменных в JavaScript ==================

// function test() {
// 	let num = 1;
// 	function func() {
// 		alert(num);
// 	}
// 	func();
// }
// test();

// function test() {
// 	let num;	
// 	function func() {
// 		alert(num);
// 	}	
// 	num = 1
// 	func();	
// 	num = 2
// 	func();
// }
// test();

// function test(num1, num2) {
// 	function func() {
// 		alert(num1 + num2);
// 	}	
// 	num1 = 2;
// 	func();
// }
// test(1, 2);

// function test(num) {
// 	function func(localNum) {
// 		localNum = 2;
// 	}
// 	func(num);
// 	alert(localNum);
// }
// test(1);

// function test(num) {
// 	function func(num) {
// 		num = 2;
// 	}	
// 	func(num);
// 	alert(num);
// }
// test(1);

// function test(num) {
// 	function func(num) {
// 		alert(num);
// 	}
// 	func(num);
// 	num = 2;
// }
// test(1);

//======================= Функция, возвращающая функцию в JavaScript ==============================

// Сделайте функцию func1, которая будучи вызвана вот так: func1()(), вернет число 1. Сделайте аналогичную функцию func2, возвращающую число 2. Найдите сумму результатов этих функций.
// function func1() {
// 	return function() {
// 		return 1;
// 	}
// }
// function func2() {
// 	return function() {
// 		return 2;
// 	}
// }
// alert(func1()() + func2()());

// Сделайте функцию func, которая будучи вызвана вот так: func()()()()(), вернет '!'.
// function func() {
// 	return function() {
// 		return function() {
// 			return function() {
// 				return function() {
// 					return '!';
// 				};
// 			};
// 		};
// 	};
// }
// alert(func()()()()());

// Сделайте функцию func, которая будучи вызвана вот так: func(2)(3)(4), вернет сумму переданных в параметры чисел.
// function func(num1) {
// 	return function(num2) {
// 		return function(num3) {
// 			return num1 + num2+ num3;
// 		};
// 	};
// } 
// alert(func(1)(2)(3));

// Сделайте функцию func, которая будучи вызвана вот так: func(2)(3)(4)(5)(), вернет массив переданных в параметры чисел.
// function func(num1) {
// 	let arr = [];
// 	return function(num2) {
// 		return function(num3){
// 			return function(num4) {
// 				return function() {
// 					return arr = [num1, num2, num3, num4];
// 				};  
// 			};
// 		};
// 	};
// } 
// console.log(func(2)(3)(4)(5)());


//========================= Лексическое окружение функций в JavaScript ===========================

// function test() {
// 	let num1 = 1;
// 	let num2 = 2;
// 	return function() {
// 		return num1 + num2;
// 	}
// }
// let func = test();
// alert(func());

// function test() {
// 	let num1 = 1;
// 	let num2 = 2;
// 	return function() {
// 		return num1 + num2;
// 	}
// }
// alert(test()());

// function test() {
// 	let num = 1;	
// 	return function() {
// 		return num;
// 	}
// }
// let num = 2;
// let func = test();
// alert(func());


//============================== Замыкания в JavaScript =======================================

// Самостоятельно, не подсматривая в мой код, реализуйте счетчик вызова функции, работающий на замыканиях.
// function func() {
// 	let num = 1;
// 	return function() {
// 		alert(num);
// 		num++;
// 	};
// }
// let result = func();
// result();
// result();
// result();
// result();
// result();
// result();

// Пусть функция в замыкании хранит число 10. Сделайте так, чтобы каждый вызов функции уменьшал это число на 1 и выводил на экран уменьшенное число.
// function test() {
// 	let num = 10;
// 	return function() {
// 		console.log(num);
// 		num--;
// 	};
// }
// let result = test();
// result();
// result();
// result();
// result();

// Модифицируйте предыдущую задачу так, чтобы отсчет доходил до 0, а затем каждый последующий вызов функции выводил на экран сообщение о том, что отсчет окончен.
// function test() {
// 	let num = 10;
// 	return function() {
// 		if (num >= 0) {
// 			console.log(num);
// 			num--;
// 		} else {
// 			console.log('отсчет окончен');
// 		}
// 	};
// }
// let result = test();
// result();
// result();
// result();
// result();
// result();
// result();
// result();
// result();
// result();
// result();
// result();
// result();
// result();

// let counter = 0;	
// function test() {
// 	return function() {
// 		alert(counter);
// 		counter++;
// 	};
// };
// let func = test;
// let func1 = func();
// let func2 = func();
// func1();
// func2();
// func1();
// func2();

// function test() {
// 	let counter = 0;	
// 	return function() {
// 		return function() {
// 			alert(counter);
// 			counter++;
// 		};
// 	};
// };
// let func = test()();
// let func1 = func;
// let func2 = func;
// func1();
// func2();
// func1();
// func2();

// function test() {
// 	let counter = 0;
// 	return function() {
// 		return function() {
// 			alert(counter);
// 			counter++;
// 		};
// 	};
// };
// let func = test();
// let func1 = func();
// let func2 = func();
// func1();
// func2();
// func1();
// func2();


//============================= Вызов функции на месте в JavaScript ===============================

// let result = function() {
// 	return '!';
// };		
// alert(result());

// let result = function() {return 1;}() + function() {return 2;}();
// alert(result);

// let result = (function() {
// 	return '!';
// });
// alert(result);

// let result = (function() {
// 	return '!';
// });
// alert(result());

// (function(num1, num2) {
// 	alert(num1 + num2);
// })(1, 2);

// Допишите следующий код так, чтобы его запуск алертом выводил '!':
// (function() {
// 	// какой-то код
// })()()();
// (function() {
// 	return function() {
//         return function() {
//             alert('!');
//         };
//     };
// })()()();

// Допишите следующий код так, чтобы его запуск выводил сумму переданных параметрами чисел:
// (function() {
// 	// какой-то код
// })(1)(2);
// (function(num1) {
// 	return function(num2) {
//         alert(num1 + num2);
//     };
// })(1)(2);

// Допишите следующий код так, чтобы его запуск выводил сумму переданных параметрами чисел:
// (function() {
// 	// какой-то код
// })(1)(2)(3);
// (function(num1) {
//     return function(num2) {
//         return function(num3) {
//             alert(num1 + num2 + num3);
//         }
//     };
// })(1)(2)(3);

//========================= Замыкания и вызов функции на месте в JavaScript =======================

// Не подсматривая в мой код, самостоятельно реализуйте такой же счетчик.
// let func = (function() {
//     let num = 1;
//     return function() {
//         alert(num);
//         num++;
//     };
// })();
// func();
// func();
// func();
// func();
// func();
// func();

// Модифицируйте работу счетчика так, чтобы он считал до 5, а потом отсчет начинался сначала.
// let func = (function() {
//     let num = 1;
//     return function() {
//         if (num <= 5) {
//             alert(num);
//             num++;
//         } else {
//             num = 1;
//         }
//     };
// })();
// func();
// func();
// func();
// func();
// func();
// func();
// func();
// func();
// func();
// func();


//========================= Понятие функции-коллбэка в JavaScript ================================

// Дан массив со строками. С помощью созданной нами функции each переверните символы каждой строки в обратном порядке.
// let result = each(['abc', 'def', 'gjk'], function(str) {
//     return str.split('').reverse().join('');
// });
// console.log(result);

// function each(arr, callback) {
// 	let result = [];
	
// 	for (let elem of arr) {
// 		result.push( callback(elem) );
// 	}
	
// 	return result;
// }

// Дан массив со строками. С помощью созданной нами функции each сделайте заглавным первый символ каждой строки.

// let result = each(['abc', 'def', 'gjk'], function(str) {
//     return str.slice(0, 1).toUpperCase() + str.slice(1);
// });
// console.log(result);

// function each(arr, callback) {
// 	let result = [];
	
// 	for (let elem of arr) {
// 		result.push( callback(elem) );
// 	}
	
// 	return result;
// }

// Дан массив с числами. С помощью созданной нами функции each найдите произведение каждого элемента массива на его порядковый номер.
// let result = each([0, 40, 33, 2, 50], function(elem, index) {
//     return elem * index;
// });
// console.log(result);

// function each(arr, callback) {
// 	let result = [];
// 	let i = 1;
// 	for (let elem of arr) {
// 		result.push( callback(elem, i++) );
// 	}
	
// 	return result;
// }

// Дан массив с числами. С помощью созданной нами функции filter оставьте в этом массиве только положительные числа.
// let result = filter([-1, 2, -3, 4, -5], function(elem) {
// 	if (elem > 0) {
// 		return true;
// 	} else {
//         return false;
//     }
// });
// console.log(result);

// function filter(arr, callback) {
//     let result = [];
//     for (let elem of arr) {
//         if (callback(elem)){
//             result.push(elem);
//         }
//     }
//     return result;
// }

// Дан массив со строками. С помощью созданной нами функции filter оставьте в этом массиве только строки, длина которых от 1 до 3 символов.
// let result = filter(['still', 'fly', 'reebok', 'a', 'by'], function(elem) {
//     if (elem.length >= 1 && elem.length <= 3) {
//         return true;
//     } else {
//         return false;
//     }
// });
// console.log(result);

// function filter(arr, callback) {
//     let result = [];
//     for (let elem of arr) {
//         if (callback(elem)){
//             result.push(elem);
//         }
//     }
//     return result;
// }

// Реализуйте функцию every, которая будет возвращать true, если для всех элементов массива функция-коллбэк вернула true, и будет возвращать false в противном случае.
// Пример работы такой функции (проверим, что в массиве только положительные числа):
// let result = every([1, 22, 13, 4, 50], function(elem) {
// 	if (elem > 0) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// });
// console.log(result); // выведет true

// function every(arr, callback) {
//     let result = [];
//     for (let elem of arr) {
//         if (callback(elem)) {
//             result.push(elem);
//         }
//     }
//     if (arr.length == result.length) {
//         return true;
//     } else {
//         return false;
//     }   
// }

// Реализуйте функцию some, которая будет возвращать true, если для хотя бы для одного элемента массива функция-коллбэк вернула true, и будет возвращать false в противном случае.
// Пример работы такой функции (проверим, что в массиве есть хотя бы одно отрицательное число):
// let result = some([1, 2, -3, 4, 5], function(elem) {
// 	if (elem < 0) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// });

// function some(arr, callback) {
//     let result = [];
//     for (let elem of arr) {
//         if (callback(elem)) {
//             result.push(elem);
//         }
//     }
//     if (result.length > 0) {
//         return true;
//     } else {
//         return false;
//     }   
// }
// console.log(result); // выведет false

// Реализуйте функцию alternate, которая первым параметром будет принимать массив, а вторым и третьим - коллбэки.
// Функция должна по очереди применять коллбэки к элементам массива. То есть: для первого элемента - первый коллбэк, для второго элемента - второй коллбэк, для третьего - опять первый коллбэк и так далее пока элементы массива не закончатся.
// Пример работы такой функции ():
// let result = alternate(
// 	['a', 'b', 'c', 'd', 'e'],
// 	function(elem) {
// 		return elem + '!';
// 	},
// 	function(elem) {
// 		return elem + '?';
// 	},
// );

// function alternate(arr, callback1, callback2) {
//     let result = [];
//     for (let i = 0; i < arr.length; i++) {
//         if ((i + 1) % 2 != 0 ) {
//             result.push(callback1(arr[i]));
//         } else {
//             result.push(callback2(arr[i]));
//         }
//     }
//     return result;
// }

// console.log(result); // выведет ['a!', 'b?', 'c!', 'd?', 'e!']


//============================= Стрелочные функции в JavaScript ==================================

// // Дана следующая функция с коллбэком:
// // let result = every([1, 2, 3, 4, 5], function(elem) {
// // 	if (elem > 0) {
// // 		return true;
// // 	} else {
// // 		return false;
// // 	}
// // });
// // Упростите коллбэк через стрелочную функцию.
// let result = every([1, 2, 3, 4, 5], elem => elem > 0);

// Дана следующая функция с коллбэком:
// let result = every([1, 2, 3, 4, 5], function(elem, index) {
// 	if (elem * index > 10) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// });
// Упростите коллбэк через стрелочную функцию.
// let result = every([1, 2, 3, 4, 5], (elem, index) => elem * index > 10);

// Дана следующая функция с коллбэком:
// let arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
// let result = each(arr, function(elem, index) {
// 	if (elem * index > 10) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// });
// Упростите коллбэк через стрелочную функцию.
// let result = each(arr, (elem, index) => elem * index > 10);

// let result = alternate(['a', 'b', 'c', 'd', 'e'], elem => elem + '!', elem => elem + '?');

// function alternate(arr, callback1, callback2) {
//     let result = [];
//     for (let i = 0; i < arr.length; i++) {
//         if ((i + 1) % 2 != 0 ) {
//             result.push(callback1(arr[i]));
//         } else {
//             result.push(callback2(arr[i]));
//         }
//     }
//     return result;
// }

// console.log(result); // выведет ['a!', 'b?', 'c!', 'd?', 'e!']


//=============================== Работа с рекурсией в JavaScript =================================

// function func(arr) {
// 	console.log(arr.shift(), arr);
	
// 	if (arr.length != 0) {
// 		func(arr);
// 	}
// }

// func([1, 2, 3]);

// Сделайте функцию, которая с помощью рекурсии выведет первые 10 чисел Фибоначчи. Числа Фибоначчи строятся следующим образом: каждое новое число равно сумме двух предыдущих. Первые два числа Фибоначчи - это 1 и 2. Следующее число будет равно 1 + 2 = 3, следующее число будет равно 2 + 3 = 5 и так далее.
// function func(prevPrevNum, prevNum){
// 	// тут код с рекурсией, который вы должны написать
// }
// func(1, 2); // вызываем функцию с первыми двумя числами

// function func(prevPrevNum, prevNum){
// 	let current = prevPrevNum + prevNum;
// 	console.log(current);
// 	if (current <= 200) {
// 		func(prevNum, current);
// 	}
// }
// func(1, 2);

// Модифицируйте предыдущую задачу так, чтобы функция не выводила числа, а возвращала массив первых 10 чисел Фибоначчи:
// console.log(func(1, 2)); // выведет массив чисел

// function func(prevPrevNum, prevNum){
// 	let current = prevPrevNum + prevNum;
// 	let arr = [];
// 	arr.push(current);
// 	if (current <= 200) {
// 		func(prevNum, current);
		
// 	}
// 	console.log
// }
// func(1, 2);

//==================== Редуцирование числа =======================
// Давайте проверим делится ли какое-нибудь число на 9.
// Самостоятельно, не подсматривая в код, решите описанную задачу.
// function reduceNum(num) {
// 	if (getDigitsSum(num) <= 9) {
// 		return getDigitsSum(num);
// 	} else {
// 		return reduceNum(getDigitsSum(num));
// 	}
// }

// function getDigitsSum(num) {
// 	return getSum(getDigits(num));
// }

// function getSum(arr) {
// 	let sum = 0;
// 	for (elem of arr) {
// 		sum += Number(elem);
// 	}
// 	return sum;
// }

// function getDigits(num) {
// 	return String(num).split('');
// }
// console.log(reduceNum(2187));


//=========================== Рекурсия и многомерные структуры в JavaScript =========================

// Дан многомерный объект произвольного уровня вложенности, например, такой:
// {a: 1, b: {c: 2, d: 3, e: 4}, f: {g: 5, j: 6, k: {l: 7, m: {n: 8, o: 9}}}}
// С помощью рекурсии выведите все примитивные элементы этого объекта на экран.

// function func(obj) {
// 	for (let key in obj) {
// 		if (typeof obj[key] == 'object') {
// 			func(obj[key]);
// 		} else {
// 			console.log(obj[key]);
// 		}
// 	}
// }
// func({a: 1, b: {c: 2, d: 3, e: 4}, f: {g: 5, j: 6, k: {l: 7, m: {n: 8, o: 9}}}});

// дан многомерный объект произвольного уровня вложенности, например, такой:
// {a: 1, b: {c: 2, d: 3, e: 4}, f: {g: 5, j: 6, k: {l: 7, m: {n: 8, o: 9}}}}
// С помощью рекурсии найдите сумму элементов этого объекта.
// function func(obj) {
// 	let sum = 0;
// 	for (let key in obj) {
// 		if (typeof obj[key] == 'object') {
// 			sum += func(obj[key]);
// 		} else {
// 			sum += obj[key];
// 		}
// 	}
// 	return sum;
// }
// console.log(func({a: 1, b: {c: 2, d: 3, e: 4}, f: {g: 5, j: 6, k: {l: 7, m: {n: 8, o: 9}}}}));

// Дан многомерный массив произвольного уровня вложенности, содержащий внутри себя строки, например, такой:
// ['a', ['b', 'c', 'd'], ['e', 'f', ['g', ['j', 'k']]]]
// С помощью рекурсии слейте элементы этого массива в одну строку:
// 'abcdefgjk'
// function func(arr) {
// 	let result = '';
// 	for (elem of arr) {
// 		if (typeof elem == 'object') {
// 			result += func(elem);
// 		} else {
// 			result += elem;
// 		}
// 	}
// 	return result;
// }
// console.log(func(['a', ['b', 'c', 'd'], ['e', 'f', ['g', ['j', 'k']]]]));

// Дан многомерный массив произвольного уровня вложенности, например, такой:
// [1, [2, 7, 8], [3, 4], [5, [6, 7]]]
// Возведите все элементы-числа этого массива в квадрат.
// function func(arr) {
// 	for (let i = 0; i < arr.length; i++) {
// 		if (typeof arr[i] == 'object') {
// 			arr[i] = func(arr[i]);
// 		} else {
// 			arr[i] = arr[i] ** 2;
// 		}
// 	}
// 	return arr;
// }
// console.log(func([1, [2, 7, 8], [3, 4], [5, [6, 7]]]));

// Дан многомерный массив произвольного уровня вложенности, например, такой:
// [1, [2, 7, 8], [3, 4, [5, [6, 7]]]]
// Напишите код, который развернет наш многомерный массив в одномерный. Для приведенного выше массива это будет выглядеть вот так:
// [1, 2, 7, 8, 3, 4, 5, 6, 7]
// let result = [];
// function func(arr) {
// 	for (let i = 0; i < arr.length; i++) {
// 		if (typeof arr[i] == 'object') {
// 			func(arr[i]);
// 		} else {
// 			result.push(arr[i]);
// 		}
// 	} 
// 	return result;
// }
// console.log(func([1, [2, 7, 8], [3, 4, [5, [6, 7]]]]));

// Дан многомерный массив произвольного уровня вложенности, например, такой:
// [1, [2, 7, 8], [3, 4], [5, [6, 7]]]
// Выведите на экран все элементы-массивы, содержащие внутри себя только примитивы.

// function func(arr) {
// 	let result = [];
// 		resultFinish = [];
// 	for (let i = 0; i < arr.length; i++) {
// 		if (typeof arr[i] == 'object') {
// 			for (let j = 0; j < arr[i].length; j++) {
// 				if (typeof arr[i][j] == 'object') {
// 					break;
// 				} else {
// 					result.push(arr[i]);
// 				}
// 			}
// 		}
// 	}
// 	// for (let i = 0; i < result.length; i++) {
// 	// 	if (typeof result[i] == 'object') {
// 	// 		resultFinish.push(result[i]);
// 	// 	}
// 	// }
// 	return result;
// }
// console.log(func([1, [2, 7, 8], [3, 4], [5, [6, 7]]])); 
//   не решил!!!!!!


//===================== Метод map для перебора массива в JavaScript ==============================

// Дан массив с числами. Используя метод map извлеките из каждого элемента массива квадратный корень и запишите результат в новый массив.
// let arr = [1, 2, 3, 4, 5];
// let result = arr.map(function(elem) {
// 	return Math.sqrt(elem);
// });
// console.log(result);

// Дан массив со строками. Используя метод map в конец значению каждого элемента массива добавьте символ '!'.
// let arr = ['a', 'b', 'c'];
// let result = arr.map(function(elem) {
// 	return elem + '!';
// });
// console.log(result);

// Дан массив со строками. Используя метод map переверните символы каждой строки в обратном порядке.
// let arr = ['ass', 'bss', 'css'];
// let result = arr.map(function(elem) {
// 	return elem.split('').reverse().join('');
// });
// console.log(result);

// let arr = ['123', '456', '789'];
// Используя метод map преобразуйте этот массив в следующий:
// let arr = [
// 	[1, 2, 3],
// 	[4, 5, 6],
// 	[7, 8, 9]
// ];
// let arr = ['123', '456', '789'];
// let result = arr.map(function(elem) {
// 	return elem.split('');
// });
// console.log(result);

// Дан массив с числами. Используя метод map запишите в каждый элемент массива значение этого элемента, умноженное на его порядковый номер в массиве.
// let arr = [1, 2, 3, 4, 5];
// let result = arr.map(function(elem, index) {
// 	return elem * index;
// });
// console.log(result);

// ============== Перебор многомерных массивов
// let arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
// let result = arr.map(function(elem) {
// 	return elem.map(function(num) {
// 		return num * num;
// 	});
// });
// console.log(result);


//========================== Метод forEach для перебора массива в JavaScript ==========================

// // Дан массив с числами. Используя метод forEach найдите сумму квадратов элементов этого массива.
// let arr = [1, 2, 3, 4, 5];
// let sum = 0;
// arr.forEach(function(elem) {
// 	sum += elem ** 2;
// });
// console.log(sum);

// Метод forEach появился в JavaScript раньше, чем новый цикл for-of. По сути, эти два способа перебора похожи, но цикл for-of имеет более простой синтаксис, поэтому, скорее всего, чаще вы будете пользоваться именно им.


//==================== Метод filter для фильтрации массива в JavaScript =============================
// Дан массив с числами. Оставьте в нем только положительные числа.
// let arr = [1, -2, 3, -4, 5];
// console.log(arr.filter(elem => elem > 0));

// Дан массив с числами. Оставьте в нем только отрицательные числа.
// let arr = [1, -2, 3, -4, 5];
// console.log(arr.filter(elem => elem < 0));

// Дан массив с числами. Оставьте в нем только числа, которые больше нуля, но меньше 10.
// let arr = [1, -4, 99, 45, -3, 5, 9];
// console.log(arr.filter(elem => elem > 0 && elem < 10));

// Дан массив со строками. Оставьте в нем только те строки, длина которых больше 5-ти символов.
// let arr = ['str', 'global', 'fly', 'tetris', 'mom', 'gadget'];
// console.log(arr.filter(elem => elem.length > 5));

// Дан массив с числами. Оставьте в нем только те числа, произведение которых на их порядковый номер меньше 30.
// let arr = [1, 20, 3, 47, 5, 4, 66];
// console.log(arr.filter((elem, index) => elem * index < 30));

// Дан массив, в нем могут быть обычные элементы и подмассивы, например [1, 2, [3, 4], 5, [6, 7]]. Оставьте в нем только обычные элементы.
// let arr = [1, 2, [3, 4], 5, [6, 7]];
// console.log(arr.filter(elem => typeof elem != 'object'));

// Дан массив с числами. Посчитайте количество отрицательных чисел в этом массиве.
// let arr = [-1, -2, 3, 4, 5, -10];
// console.log(arr.filter(elem => elem < 0).length);


//============================= Метод every для проверки массива в JavaScript =========================

// Дан массив с числами. Проверьте то, что все элементы в массиве больше нуля.
// let arr = [1, 2, -3, 4, 5];
// let result = arr.every(elem => elem > 0);
// console.log(result);

// Дан массив с числами. Проверьте то, что для всех элементов произведение их значений на их порядковый номер меньше 30.
// let arr = [1, 2, 3, 4, 8];
// let result = arr.every((elem, index) => elem * index < 30);
// console.log(result);


//======================= Метод some для проверки массива в JavaScript =============================

// Дан массив с числами. Проверьте то, что в массиве есть хотя бы одно число больше нуля.
// let arr = [-1, -2, -3, -4, -5];
// let result = arr.some(elem => elem > 0);
// console.log(result);

// Дан массив с числами. Проверьте то, что хотя бы для одного элемента произведение его значения на порядковый номер больше 30.
// let arr = [1, 2, 3, 4, 1];
// let result = arr.some((elem, index) => elem * index > 30);
// console.log(result);


//============================= Оператор spread в JavaScript ========================================

// Дан массив:
// let arr = [1, 2, 3, 4, 5];
// Дана также функция:
// function func(num1, num2, num3, num4, num5) {
// 	return num1 + num2 + num3 + num4 + num5;
// }
// Найдите с помощью приведенной функции сумму элементов массива.
// let arr = [1, 2, 3, 4, 5];
// function func(num1, num2, num3, num4, num5) {
//     return num1 + num2 + num3 + num4 + num5;
// }
// console.log(func(...arr));

// Дан массив с числами. Используя Math.min и spread выведите на экран минимальное значение массива.
// let arr= [23, 33, 76, 90, 6, 487];
// console.log(Math.min(...arr));


//============================= Оператор spread и слияние массивов ==================================

// Не запуская код, определите, что выведется в консоль:
// let arr1 = [1, 2, 3];
// let arr2 = [...arr1, 4, 5, 6];
// let arr3 = [...arr2, 7, 8, 9];
// let arr  = [0, ...arr3];
// console.log(arr);


//=============================== Оператор spread для строк и чисел в JavaScript =======================
// let arr1 = ['a', 'b', 'c'];
// let arr2 = [...arr1, ...'12345'];

// console.log(arr2);


//================================= Оператор rest в JavaScript =======================================

// func(1, 2, 3, 4, 5);
// function func(a, b, ...rest) {
// 	console.log(a); // выведет 1
// 	console.log(b); // выведет 2
// 	console.log(rest); // выведет [3, 4, 5]

// func(1, 2);
// function func(a, b, ...rest) {
// 	console.log(a); // выведет 1
// 	console.log(b); // выведет 2
// 	console.log(rest); // выведет []


//========================= Применение операторов rest и spread в JavaScript ===========================

// Напишите функцию, которая будет принимать параметрами произвольное количество чисел и возвращать их среднее арифметическое (сумма делить на количество).
// function func(...nums) {
//     let sum = 0;
//     for (elem of nums) {
//         sum += elem;
//     }
//     let result = sum / nums.length;
//     return result;
// }
// console.log(func(1, 2, 3, 4, 5));

// Для сравнения реализуйте нашу функцию без использования оператора rest.
// let result = unite([1, 2, 3], [4, 5, 6], [7, 8, 9]);
// console.log(result); // выведет [ [1, 2, 3,] [4, 5, 6], [7, 8, 9] ]
// function unite(...arrs){
// 	return arrs;
// }

// let result = unite([1, 2, 3], [4, 5, 6], [7, 8, 9]);
// console.log(result);

// function unite(arr1, arr2, arr3) {
//     let arrey = [];
//     arrey.unshift(arr1, arr2, arr3);
//     return arrey;
// }


//====================== Пересечение произвольного количества массивов на JavaScript ===================

// Самостоятельно, не подсматривая в мой код, повторите решение описанной задачи.
// Давайте напишем функцию getInt, которая будет находить пересечение любого количества массивов.
// function getInt(...arrs) {
//     let result = [];
//     let arr0 = arrs.shift();
//     for (let elem of arr0) {
//         if (inArrays(elem, arrs)) {
//             result.push(elem);
//         }
//     }
//     return result;
// }

// function inArrays(elem, arrs) {
//    for (let arr of arrs) {
//        if (!inArray(elem, arr)) {
//            return false;
//        }
//    }
//    return true;
// }

// function inArray(elem, arr){
// 	return arr.indexOf(elem) !== -1;
// }
// console.log(getInt([1, 2, 3], [2, 3, 4], [4, 3, 2]));



// =================== Разность произвольного количества массивов на JavaScript =======================

// function getDiff(arr1, arr2){
// 	let result = [];
	
// 	let diff1 = getFirstDiff(arr1, arr2);
// 	let diff2 = getFirstDiff(arr2, arr1);
	
// 	return [].concat( diff1, diff2 );
// }

// function getFirstDiff(arr1, arr2){
// 	let result = [];
	
// 	for (let elem of arr1) {
// 		if (inArray(elem, arr2)) {
// 			result.push(elem);
// 		}
// 	}
	
// 	return result;
// }

// function inArray(elem, arr){
// 	return arr.indexOf(elem) !== -1;
// }

// function getDiff(...arrs) {
//     let diff1 = getFirstDiff(arrs);
//     let diff2 = getFirstDiff(arrs.reverse());
//     return [].concat(diff1, diff2);
// }

// function getFirstDiff(arrs) {
//     let result = [];
//     let arr0 = arrs.shift();
//     for (let elem of arr0) {
//         if (inArrays(elem, arrs)) {
//             result.push(elem);
//         }
//     }
//     return result;
// }

// function inArrays(elem, arrs) {
//     for (let arr of arrs) {
//         if (!inArray(elem, arr)) {
//             return false;
//         }
//     }
//     return true;
// }

// function inArray(elem, arr) {
// 	return arr.indexOf(elem) == -1;
// }    
// console.log(getDiff([1, 2, 3], [2, 3, 4, 5]));

// function getDiff(...arrs) {
//     let result = [];
//     for (let i = 0; i < arrs.length; i++) {
//         let arr0 = arrs.pop();
//         for (let elem of arr0) {
//             if (checkInArray(elem, arrs)) {
//                 result.push(elem);
//             }
//         }
//         arrs.unshift(arr0);
//     }
//     return result;
// }

// function checkInArray(elem, arrs) {
//     let flag = true;
//     for (let arr of arrs) {
//         for (let subArr of arr) {
//             if (inArray(elem, arr)) {
//                 flag = false;
//                 break;
//             }
//         }
//     }
//     return flag;
// }

// function inArray(elem, arr) {
// 	return arr.indexOf(elem) !== -1;
// }    

// console.log(getDiff([1,6, 2, 3,5], [4,1, 2, 3], [12,7,1, 2, 3]));


//====================== Деструктуризация массивов в JavaScript ====================================

// В следующем коде части массива записываются в соответствующие переменные:
// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];
// let name       = arr[0];
// let surname    = arr[1];
// let department = arr[2];
// let position   = arr[3];
// let salary     = arr[4];
// Переделайте этот код через деструктуризацию согласно изученной теории.
// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];
// let [name, surname, department, position, salary] = arr;
// console.log(position);
// console.log(name);
// console.log(salary);
// console.log(department);

// function func() {
// 	return ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];
// }
// let arr = func();
// let name       = arr[0];
// let surname    = arr[1];
// let department = arr[2];
// let position   = arr[3];
// let salary     = arr[4];
// Переделайте этот код через деструктуризацию согласно изученной теории.
// function func() {
//     return ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];
// }
// let [name, surname, department, position, salary] = func();
// console.log(position);
// console.log(name);
// console.log(salary);
// console.log(department);

// В следующем коде части массива записываются в соответствующие переменные:
// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];
// let department = arr[2];
// let position   = arr[3];
// Переделайте этот код через деструктуризацию согласно изученной теории.
// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];
// let [,, department, position,] = arr;
// console.log(department);
// console.log(position);

// В следующем коде части массива записываются в соответствующие переменные:
// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];
// let name    = arr[0];
// let surname = arr[1];
// let info = arr.slice(2); // все элементы со второго до конца массива
// Переделайте этот код через деструктуризацию согласно изученной теории.
// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];
// let [name, surname, ...info] = arr;
// console.log(name);
// console.log(surname);
// console.log(info);

// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист'];
// let name       = arr[0];
// let surname    = arr[1];
// let department = arr[2];
// let position;
// if (arr[3] !== undefined) {
// 	position = arr[3];
// } else {
// 	position = 'джуниор';
// }
// // Переделайте этот код через деструктуризацию согласно изученной теории.
// let arr = ['Иван', 'Иванов', 'отдел разработки'];
// let [name, surname, department, position = 'джуниор'] = arr;
// console.log(name);
// console.log(surname);
// console.log(department);
// console.log(position);


//============================ Деструктуризация объектов в JavaScript ================================

// В следующем коде части объекта записываются в соответствующие переменные:
// let options = {
// 	color: 'red',
// 	width:  400,
// 	height: 500,
// };
// let color  = options.color;
// let width  = options.width;
// let height = options.height;
// Переделайте этот код через деструктуризацию согласно изученной теории.
// let options = {
//     color: 'red',
//     width: 400,
//     height: 500
// };
// let {color, width, height} = options;
// console.log(color);
// console.log(width);
// console.log(height);

// В следующем коде части объекта записываются в соответствующие переменные:
// let options = {
// 	color: 'red',
// 	width:  400,
// 	height: 500,
// };
// let c = options.color;
// let w = options.width;
// let h = options.height;
// Переделайте этот код через деструктуризацию согласно изученной теории.
// let options = {
//     color: 'red',
//     width: 500,
//     height: 400
// };
// let {color: c, width: w, height: h} = options;
// console.log(c);
// console.log(w);
// console.log(h);

// В следующем коде части объекта записываются в соответствующие переменные:
// let options = {
// 	width:  400,
// 	height: 500,
// };
// let color;
// if (options.color !== undefined) {
// 	color = options.color;
// } else {
// 	color = 'black';
// }
// let width  = options.width;
// let height = options.height;
// Переделайте этот код через деструктуризацию согласно изученной теории.
// let options = {
// 	width:  400,
// 	height: 500,
// };
// let {color = 'black', width, height} = options;
// console.log(color);
// console.log(width);
// console.log(height);

// В следующем коде части объекта записываются в соответствующие переменные:
// let options = {
// 	width:  400,
// 	height: 500,
// };
// let с;
// if (options.с !== undefined) {
// 	с = options.color;
// } else {
// 	с = 'black';
// }
// let w = options.width;
// let h = options.height;
// Переделайте этот код через деструктуризацию согласно изученной теории.
// let options = {
//     width:  400,
//     height: 500,
// };
// let {color: c = 'black', width: w, height: h} = options;
// console.log(c);
// console.log(w);
// console.log(h);


//======================== Деструктуризация параметров функций в JavaScript ===========================

// Переделайте следующий код через деструктуризацию согласно изученной теории:
// function func(employee) {
// 	let name       = employee[0];
// 	let surname    = employee[1];
// 	let department = employee[2];
// 	let position   = employee[3];
// 	let salary     = employee[4];
// }
// func( ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000] );

// func( ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000] );
// function func([name, surname, department, position, salary]) {
//     console.log(name);
//     console.log(surname);
//     console.log(department);
//     console.log(position);
//     console.log(salary);
// }

// Переделайте следующий код через деструктуризацию согласно изученной теории:
// function func(employee) {
// 	let name     = employee[0];
// 	let surname  = employee[1];
// 	let info     = employee.slice(2);
// }
// func( ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000] );

// func( ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000] );
// function func([name, surname, ...info]) {
//     console.log(name);
//     console.log(surname);
//     console.log(info);
// }

// Переделайте следующий код через деструктуризацию согласно изученной теории:
// function func(employee) {
// 	let name       = employee[0];
// 	let surname    = employee[1];
// 	let department = employee[2];
// 	let position;
// 	if (arr[3] !== undefined) {
// 		position = arr[3];
// 	} else {
// 		position = 'джуниор';
// 	}
// }
// func( ['Иван', 'Иванов', 'отдел разработки'] );

// func( ['Иван', 'Иванов', 'отдел разработки'] );
// function func([name, surname, department, position = 'джуниор']) {
//     console.log(name);
//     console.log(surname);
//     console.log(department);
//     console.log(position);
// }

// Переделайте следующий код через деструктуризацию согласно изученной теории:
// function func(department, employee, hired) {
// 	let name     = employee[0];
// 	let surname  = employee[1];	
// 	let year  = hired[0];
// 	let month = hired[1];
// 	let day   = hired[2];
// }
// func( 'отдел разработки', ['Иван', 'Иванов'], '2018-12-31' );

// func( 'отдел разработки', ['Иван', 'Иванов'], '2018-12-31' );
// function func(department, [name, surname], hired) {
//     console.log(department);
//     console.log(name);
//     console.log(surname);
//     console.log(hired);
// }

// Переделайте следующий код через деструктуризацию согласно изученной теории:
// function func(options) {
// 	let color  = options.color;
// 	let width  = options.width;
// 	let height = options.height;
// }
// func( {color: 'red', width: 400, height: 500} );
// function func({color, width, height}) {
//     console.log(color);
//     console.log(width);
//     console.log(height);
// }
// func( {color: 'red', width: 400, height: 500} );

// Переделайте следующий код через деструктуризацию согласно изученной теории:
// function func(options) {
// 	let width  = options.width;
// 	let height = options.height;
// 	let color;
// 	if (options.color !== undefined) {
// 		color = options.color;
// 	} else {
// 		color = 'black';
// 	}
// }
// func( {color: 'red', width: 400, height: 500} );
// function func({color = 'black', width, height}) {
//     console.log(color);
//     console.log(width);
//     console.log(height);
// }
// func( {width: 400, height: 500} );


//================================== Работа с объектом Date в JavaScript ===============================

// Выведите на экран текущий день.
// let date = new Date();
// console.log(date.getDate());

// Выведите на экран текущий месяц.
// let date = new Date();
// console.log(date.getMonth());

// Выведите на экран текущий год.
// let date = new Date();
// console.log(date.getFullYear());

//============================== Форматирование даты в JavaScript ====================================

// Выведите на экран текущую дату-время в формате 12:59:59 31.12.2014. Используйте для всех частей даты (кроме года) созданную нами функцию для добавления нуля при необходимости.
// function addZero(num) {
//     if (num >= 0 && num <= 9) {
//         return '0' + num;
//     } else {
//         return num;
//     }
// }
// let date = new Date();
// console.log(addZero(date.getHours()) + ':' + addZero(date.getMinutes()) + ':' + addZero(date.getSeconds()) + ' ' + addZero(date.getDate()) + '.' + addZero(date.getMonth() + 1) + '.' + date.getFullYear());

// Дана дата в формате год-месяц-день. Преобразуйте эту дату в формат день.месяц.год.
// let str = '1999-12-12';
// let result = str.split('-').reverse().join('.');
// console.log(result);


//================================ Получения дня недели на JavaScript =================================

// Выведите на экран номер текущего дня недели.
// let date = new Date();
// console.log(date.getDay());

// Определите, является ли текущий день недели выходным или рабочим днем.
// let date  = new Date();
// if (date.getDay() == 0 || date.getDay() == 6) {
//     console.log('сегодня выходной');
// } else {
//     console.log('рабочий день');
// }

// Определите сколько дней осталось до ближайшего воскресенья.
// let date = new Date();
// if (date.getDay() != 0) {
//     let result = 7 - date.getDay();
//     console.log(result + ' осталось до воскресения');
// } else {
//     console.log('сегодня воскресение');
// }


//===================== Вывод частей даты словом в JavaScript ====================================

// Пусть дан следующий массив:
// let months = [
// 	'янв', 'фев', 'мар', 'апр', 'май', 'июн',
// 	'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'
// ];
// Выведите с помощью этого массива название текущего месяца.
// let date = new Date();
// let month = date.getMonth();
// let months = ["янв", "фев", "март", "апр", "май", "июнь", "июль", "авг", "сент", "окт", "нояб", "дек"];
// console.log(months[month]);


//============================ Установка времени в объекте Date в JavaScript ============================

// Узнайте, какой день недели был в ваш день рождения.
// let date = new Date(2021, 12, 15);
// let day = date.getDay();
// let days = ["вс", "пн", "вт", "ср", "чт", "пт", "сб"];
// console.log(days[day]);

// let date = new Date(2021, 9, 10); // установим 5 ноября 2025 года
// let day  = date.getDay();
// let days = ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'];

// console.log(days[day]);


//=================================== Работа с getTime ============================================

// Выведите на экран timestamp, соответствующий дате 1 января 2025 года.
// let date = new Date(2025, 1, 1, 23, 59, 59);
// console.log(date.getTime());

// Выведите на экран количество дней, прошедшее между 1 марта 1988 года и 10 января 2000 года.
// let date1 = new Date(2000, 1, 10, 23, 59, 59);
// let date2 = new Date(1988, 3, 1, 23, 59, 59);
// let diff = date1.getTime() - date2.getTime();
// console.log(diff / (1000 * 60 * 60 * 24)); 

// Выведите на экран количество месяцев, прошедшее между вашим рождением и текущим моментом времени.
// let now = new Date();
// let birthday = new Date(1989, 12, 15);
// let diff = now.getTime() - birthday.getTime();
// console.log(diff / (1000 * 60 * 60 * 24 * 30));


//============================ Разница между объектами с датой в JavaScript =========================

// Выведите на экран количество миллисекунд, прошедшее между 1 сентября 2000 года и 15 февраля 2010 года.
// let date1 = new Date(2010, 2, 15);
// let date2 = new Date(2000, 9, 1);
// diff = date1 - date2;
// console.log(diff);  

// Модифицируйте предыдущую задачу так, чтобы на экран выводилась разница в днях.
// let date1 = new Date(2010, 2, 15);
// let date2 = new Date(2000, 9, 1);
// diff = date1 - date2;
// console.log(diff / (1000 * 60 * 60 * 24));

// Модифицируйте предыдущую задачу так, чтобы на экран выводилась разница в месяцах.
// let date1 = new Date(2010, 2, 15);
// let date2 = new Date(2000, 9, 1);
// diff = date1 - date2;
// console.log(diff / (1000 * 60 * 60 * 24 * 30));

// Модифицируйте предыдущую задачу так, чтобы на экран выводилась разница в годах.
// let date1 = new Date(2010, 2, 15);
// let date2 = new Date(2000, 9, 1);
// diff = date1 - date2;
// console.log(diff / (1000 * 60 * 60 * 24 * 365));


//=============================== Автоматическая корректировка дат в JavaScript =========================

// // let date = new Date(2018, 1, 31);
// // console.log(date); // какая дата будет?

// let date = new Date(2018, 12, 33);
// console.log(date); // какая дата будет?

// let date = new Date(2018, 33, 33);
// console.log(date); // какая дата будет?

// let date = new Date(2018, 0, 0);
// console.log(date); //

// Определите, в какую дату JavaScript преобразует следующий момент времени:

// let date = new Date(2018, -12, -33);
// console.log(date); // какая дата будет?

// let date = new Date(2018, 0, 1, 23, 0, 0);
// console.log(date); // какая дата будет?

// let date = new Date(2018, 0, 1, 24, 0, 0); // указываем 24-тый час
// console.log(date); 


//======================== Нахождение последнего дня месяца в JavaScript ==============================

// Оформите этот способ решения проблемы в виде функции, которая параметрами будет принимать месяц и год и возвращать номер последнего дня этого месяца.

// function getLastDay(month, year) {
//     let date = new Date(year, month, 0);
//     return date.getDate();
// }
// console.log(getLastDay(6, 2021));

// Определите, какой день недели будет в последнем дне пятого месяца 2025 года.
// function getLastDayWeak(month, year) {
//     let day = getLastDay(month, year);
//     return getDayOfWeak(day, month - 1, year);
// }
// console.log(getLastDayWeak(12, 2021));

// function getLastDay(month, year) {
//     let date = new Date(year, month, 0,);
//     return date.getDate();
// }
// // console.log(getLastDay(9, 2021));

// function getDayOfWeak(day, month, year) {
//     let date = new Date(year, month, day);
//     let day1 = date.getDay();
//     let days = ["вс", "пн", "вт", "ср", "чт", "пт", "сб"];
//     return days[day1];
// }
// // console.log(getDayOfWeak(30, 8, 2021));

// // Сделайте функцию isLeap, которая параметром будет принимать год и возвращать true, если этого год високосный, и false - если нет.
// function isLeap(year) {
//     let date = new Date(year, 2, 0);
//     return date.getDate() == 29;
// }
// console.log(isLeap(2021));


//=========================== Проверка корректности даты в JavaScript ==================================

// Сделайте функцию checkDate, которая будет выполнять описанную проверку. Пусть функция возвращает true, если дата корректна и false, если нет. Пример работы этой функции для 31 января и 32 января:
// function checkDate(year, month, day) {
//     let date = new Date(year, month, day);
//     return date.getFullYear() == year && date.getMonth() == month && date.getDate() == day;
// }
// // console.log(checkDate(2025, 0, 31)); // выведет true
// console.log(checkDate(2025, 0, 32)); // выведет false


//========================= Получение моментов времени в JavaScript ====================================

// Определите, какой день недели будет 31 декабря текущего года.
// let now = new Date();
// let date = new Date(now.getFullYear(), 11, 31);
// console.log(date.getDay());

// Определите, какой день недели будет 1 числа текущего месяца.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), 1);
// let day = date.getDay();
// let days = ["вс", "пн", "вт", "ср", "чт", "пт", "сб"];
// console.log(days[day]);

// Определите, какой день недели будет 31 декабря следующего года.
// let now = new Date();
// let date = new Date(now.getFullYear() + 1, 11, 31);
// let day = date.getDay();
// let days = ["вс", "пн", "вт", "ср", "чт", "пт", "сб"];
// console.log(days[day]);

// Определите, какой день недели будет через год в такую же дату, как сегодня.
// let now = new Date();
// let date = new Date(now.getFullYear() + 1, now.getMonth(), now.getDate());
// let day = date.getDay();
// let days = ["вс", "пн", "вт", "ср", "чт", "пт", "сб"];
// console.log(days[day]);

// Определите, какой день недели был год назад в такую же дату, как сегодня.
// let now = new Date();
// let date = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());
// let day = date.getDay();
// let days = ["вс", "пн", "вт", "ср", "чт", "пт", "сб"];
// console.log(days[day]);

// Определите, какой день недели был месяц назад в такой же день месяца, как сегодня.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
// let day = date.getDay();
// let days = ["вс", "пн", "вт", "ср", "чт", "пт", "сб"];
// console.log(days[day]);

// Определите, сколько дней между 1 января и 10 сентября текущего года.
// let date1 = new Date(2021, 0, 1);
// let date2 = new Date(2021, 8, 10);
// console.log((date2 - date1) / (1000 * 60 * 60 * 24));

// Определите, сколько дней между 20 числом текущего месяца и 10 числом следующего.
// let now = new Date();
// let date1 = new Date(now.getFullYear(), now.getMonth(), 20);
// let date2 = new Date(now.getFullYear(), now.getMonth() + 1, 10);
// console.log((date2 - date1) / (1000 * 60 * 60 * 24));

// Определите, сколько часов прошло между вчерашним полднем и текущим моментом времени.
// let now = new Date();
// let date1 = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 12);
// let date2 = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1, 12);
// console.log((date1 - date2) / (1000 * 60 * 60));


// Определите, сколько часов прошло между началом дня и текущим моментом времени.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate());
// console.log((now - date) / (1000 * 60 * 60));

// Определите, сколько часов осталось до конца дня.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);
// console.log((date - now) / (1000 * 60 * 60));

// Рассмотрите промежуток от 2000 года до текущего года. Определите, сколько раз 1 января в этом промежутке попадало на выходной день, то есть на субботу или на воскресенье.
// let now = new Date();
// let sum = 0;
// for (let year = 2000; year <= now.getFullYear(); year++) {
// 	let date = new Date(year, 0, 1);
// 	if (date.getDay() == 0 || date.getDay() == 6) {
// 		sum += 1;
// 	}
// }
// console.log(sum);


//===================== Практика на получение моментов времени в JavaScript =============================

// Определите, сколько секунд прошло с начала дня до настоящего момента времени.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate());
// console.log((now - date) / 1000);

// Определите, сколько секунд секунд осталось до конца дня.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);
// console.log((date - now) / 1000);

// Определите, сколько дней осталось до нового года.
// let now = new Date();
// let date1 = new Date(2022, 0, 1);
// console.log((date1 - now) / (1000 * 60 * 60 * 24));

// Определите, сколько пятниц 13-е в текущем году.
// let now = new Date();
// let year = now.getFullYear();
// let sum = 0;
// for (let month = 0; month <= 11; month++) {
//     let date = new Date(year, month, 13);
//     if (date.getDay() == 5) {
//         sum += 1;
//     }
// }
// console.log(sum);

// Определите, какой год был 3 месяца назад
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth() - 3);
// console.log(date.getFullYear());

// Определите, какой день недели будет в последнем дне текущего месяца.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), 30);
// console.log(date.getDay());

// Напишите код, который будет определять, високосный ли текущий год.
// let now = new Date();
// let date = new Date(now.getFullYear() - 1, 2, 0);
// if (date.getDate() == 29) {
//     console.log('высокосный год');
// } else {
//     console.log('не высокосный год');
// }

// Напишите код, который будет находить предыдущий високосный год.
// let now = new Date();
// let sum = 0
// // while (year == 0) {
// //     if (date.getDate() == 29) {
// //         console.log(year + ' - высокосный год');
// //         break;
// //     } else {
// //         year--;
// //     }
// // }
// for (let year = now.getFullYear(); year >= 2000; year--) {
//     if (now.getDate() == 29) {
//         console.log(year + ' - высокосный год');
//     } else {
//         sum += 1;
//         console.log(sum);
//     }
// } неполучилось(((


//=========================== Строковое сравнение дат на JavaScript =======================================

// Напишите код, который сравнит две приведенные ниже даты и выведет сообщение о том, какая из них больше:
// let date1 = '2020-11-31';
// let date2 = '2020-12-01';
// if (date1 > date2) {
//     console.log(date1 + ' больше ' + date2);
// } else {
//     console.log(date2 + ' больше ' + date1);
// }

// Напишите код, который сравнит две приведенные ниже даты и выведет сообщение о том, какая из них больше:
// let date1 = '09-21';
// let date2 = '09-23';
// if (date1 > date2) {
//     console.log(date1 + ' больше ' + date2);
// } else {
//     console.log(date2 + ' больше ' + date1);
// }

// Дана дата, содержащая месяц и день. Определите знак Зодиака, на которую приходится эта дата.
// let date = '08.12';
// if (date >= '03.21' && date <= '04.19') {
//     console.log('Это Овен');
// }
// if (date >= '04.20' && date <= '05.20') {
//     console.log('Это Телец');
// }
// if (date >= '05.21' && date <= '06.21') {
//     console.log('Это Близнецы');
// }
// if (date >= '06.22' && date <= '07.22') {
//     console.log('Это Рак');
// }
// if (date >= '07.23' && date <= '08.22') {
//     console.log('Это Лев');
// }
// if (date >= '08.23' && date <= '09.22') {
//     console.log('Это Дева');
// }
// if (date >= '09.23' && date <= '10.23') {
//     console.log('Это Весы');
// }
// if (date >= '10.24' && date <= '11.22') {
//     console.log('Это Скорпион');
// }
// if (date >= '11.23' && date <= '11.22') {
//     console.log('Это Скорпион');
// }
// if (date >= '10.24' && date <= '12.21') {
//     console.log('Это Стрелец');
// }
// if (date >= '12.22' && date <= '01.20') {
//     console.log('Это Козерог');
// }
// if (date >= '01.21' && date <= '02.18') {
//     console.log('Это Водолей');
// }
// if (date >= '02.19' && date <= '03.20') {
//     console.log('Это Скорпион');
// }


//============================ Сравнение объектов с датами в JavaScript ================================

// Получите объект с датой, содержащий текущий момент времени. Получите объект с датой, содержащий полдень текущего дня. Сравните два этих объекта и определите, был ли уже полдень или нет.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 12, 0, 0);
// if (now > date) {
//     console.log('полдень уже был');
// } else {
//     console.log('полдень еще не наступил');
// }

// Получите объект с датой, содержащий текущий момент времени. Получите объект с датой, содержащий 15 число текущего месяца. Сравните два этих объекта и определите, прошла ли уже половина месяца или нет.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), 15);
// if (now > date) {
//     console.log('половина месяца уже прошла');
// } else {
//     console.log('половина месяца еще не прошла');
// }


//========================= Количество времени до ближайшей даты на JavaScript ===========================

// Используя приведенный мною код, окончательно решите задачу.
// let now  = new Date();
// let date = new Date(now.getFullYear(), 2, 8); // текущий год
// let diff = Math.floor((date - now) / (1000 * 60 * 60 * 24));
// if (diff > 0) {
// 	console.log(diff + ' дн. осталось до 8 марта');
// } else if (diff == 0) {
// 	console.log('сегодня 8 марта');
// } else {
// 	date = new Date(now.getFullYear() + 1, 2, 8);
//     diff = Math.floor((date - now) / (1000 * 60 * 60 * 24));
//     console.log(diff + ' дн. осталось до 8 марта');
// }

// Пусть ваш День Рождения - первое марта. Определите, сколько дней осталось до вашего ближайшего дня рождения.
// let now = new Date();
// let date = new Date(now.getFullYear(), 11, 15);
// let diff = Math.floor((date - now) / (1000 * 60 * 60 * 24));
// if (diff > 0) {
// 	console.log(diff + ' д. осталось до дня рождения');
// } else if (diff == 0) {
// 	console.log('сегодня 8 марта');
// } else {
// 	date = new Date(now.getFullYear() + 1, 11, 15);
//     diff = Math.floor((date - now) / (1000 * 60 * 60 * 24));
//     console.log(diff + ' д. осталось до дня рождения');
// }

// Пусть теперь День Рождения может быть произвольным и содержится в переменных month и day. Определите, сколько дней осталось до заданного этой датой праздника. Учтите при решении, что есть счастливчики, которые родились 29 февраля. Не забудьте их учесть в вашем решении.

// function getDaysBeforeBirthday(day, month) {
//     let now = new Date();
//     let date = new Date(now.getFullYear(), month - 1, day);
//     let diff = Math.floor((date - now) / (1000 * 60 * 60 * 24));
//     if (diff > 0) {
//     console.log(diff + ' д. осталось до дня рождения');
//     } else if (diff == 0) {
//     console.log('сегодня 8 марта');
//     } else {
//     date = new Date(now.getFullYear() + 1, month - 1, day);
//     diff = Math.floor((date - now) / (1000 * 60 * 60 * 24));
//     console.log(diff + ' д. осталось до дня рождения');
//     }
// }
// getDaysBeforeBirthday(29, 2);



//================================ Основы работы с DOM в JavaScript =======================================

//============================== Получение DOM элемента в JavaScript ====================================
// Даны 3 абзаца:
// <p id="elem1">1</p>
// <p id="elem2">2</p>
// <p id="elem3">3</p>
// Запишите ссылку на каждый из абзацев в отдельную переменную и выведите содержимое каждой из этих переменных в консоль.
// let p1 = document.querySelector('#elem1');
// let p2 = document.querySelector('#elem2');
// let p3 = document.querySelector('#elem3');
// console.log(p1);
// console.log(p2);
// console.log(p3);

// let button = document.querySelector('#button');
// console.log(button);


//=================== <!-- Получение DOM элемента в JavaScript --> =====================

// let p1 = document.querySelector('#elem1');
// let p2 = document.querySelector('#elem2');
// let p3 = document.querySelector('#elem3');
// console.log(p1);
// console.log(p2);
// console.log(p3);

// Получите ссылку на первый абзац из дива с id, равным block.
// let elem = document.querySelector('.elem');
// console.log(elem);

// Получите ссылку на первый абзац из дива с классом block.
// let elem = document.querySelector('.elem');
// console.log(elem);

// Получите ссылку на первый абзац с классом www.
// let elem = document.querySelector('.www');
// console.log(elem);

// Сделайте так, чтобы по клику на первую кнопку на экран выводилось число 1, по клику на вторую - число 2, а по клику на третью - число 3.
// let button1 = document.querySelector('#button1');
// let button2 = document.querySelector('#button2');
// let button3 = document.querySelector('#button3');

// button1.addEventListener('click', function() {
//     alert(1);
// });
// button2.addEventListener('click', function() {
//     alert(2);
// });
// button3.addEventListener('click', function() {
//     alert(3);
// });


//============================ Другие типы событий в JavaScript =============================

// Дана кнопка. По двойному клику по ней выведите на экран какое-нибудь сообщение.
// let btn = document.querySelector('#elem');
// btn.addEventListener('dblclick', function() {
//     alert('ура!!!');
// });

// Дана кнопка. По наведению на нее выведите на экран какое-нибудь сообщение.
// let btn = document.querySelector('#btn');
// btn.addEventListener('mouseover', function() {
//     alert('оппа!!!');
// });

// Дана кнопка. По уходу курсора с нее выведите на экран какое-нибудь сообщение.
// let btn = document.querySelector('#btn');
// btn.addEventListener('mouseout', function() {
//     alert('круть!!!');
// });


//===================== Именованные обработчики событий в JavaScript ======================
// Сделайте так, чтобы по клику на первую кнопку выполнилась функция func1, а по клику на вторую - функция func2.
// let button1 = document.querySelector('#button1');
// let button2 = document.querySelector('#button2');
// button1.addEventListener('click', func1);
// button2.addEventListener('click', func2);
// function func1() {
//     alert(1);
// }

// function func2() {
//     alert(2);
// }


//=================== Привязывание одного обработчика ко многим элементам =========================
// Привяжите эту функцию ко всем 5-ти абзацам.
// let elem1 = document.querySelector('#elem1');
// let elem2 = document.querySelector('#elem2');
// let elem3 = document.querySelector('#elem3');
// let elem4 = document.querySelector('#elem4');
// let elem5 = document.querySelector('#elem5');

// elem1.addEventListener('mouseover', func);
// elem2.addEventListener('mouseover', func);
// elem3.addEventListener('mouseover', func);
// elem4.addEventListener('mouseover', func);
// elem5.addEventListener('mouseover', func);

// function func() {
//     alert('message');
// }


//=============== Несколько обработчиков одного события в JavaScript ===========================
// let elem = document.querySelector('#elem');
// elem.addEventListener('click', func1);
// elem.addEventListener('click', func2);
// elem.addEventListener('click', func3);
// function func1() {
//     alert('1');
// }

// function func2() {
//     alert('2');
// }

// function func3() {
//     alert('3');
// }

// Дана кнопка. Привяжите к ней три анонимных обработчика двойного клика по ней. Пусть первый обработчик выводит число 1, второй обработчик - число 2, а третий - число 3.
// let btn = document.querySelector('#btn');
// btn.addEventListener('dblclick', function() {
//     alert(1);
// });
// btn.addEventListener('dblclick', function() {
//     alert(2);
// });
// btn.addEventListener('dblclick', function() {
//     alert(3);
// });


//============================= Работа с текстом тега на JavaScript ===============================
// Даны два абзаца, содержащие своим текстом какие-то числа, и кнопка. По нажатию на кнопку выведите на экран сумму хранящихся чисел.
// let p1 = document.querySelector('#p1');
// let p2 = document.querySelector('#p2');
// let btn = document.querySelector('#btn');

// btn.addEventListener('click', function() {
//     alert(Number(p1.innerHTML) + Number(p2.innerHTML));
// });

// Даны два абзаца и две кнопки. Пусть нажатие на первую кнопку выводит текст первого абзаца, а нажатие на вторую кнопку - текст второго абзаца.
// let p1 = document.querySelector('#p1');
// let p2 = document.querySelector('#p2');
// let btn1 = document.querySelector('#btn1');
// let btn2 = document.querySelector('#btn2');

// btn1.addEventListener('click', function() {
//     alert(p1.innerHTML);
// });
// btn2.addEventListener('click', function() {
//     alert(p2.innerHTML);
// });


// Дан абзац и две кнопки. По нажатию на первую кнопку запишите в абзац слово 'привет', а по нажатию на вторую кнопку - слово 'пока'.
// let p = document.querySelector('#p');
// let btn1 = document.querySelector('#btn1');
// let btn2 = document.querySelector('#btn2');

// btn1.addEventListener('click', function() {
//     p.innerHTML = 'привет';
// });
// btn2.addEventListener('click', function() {
//     p.innerHTML = 'пока';
// });

// Даны 3 абзаца с текстом. По нажатию на первый абзац запишите в его текст число 1, по нажатию на второй абзац запишите в его текст число 2, а по нажатию на третий - запишите в его текст число 3.
// let p1 = document.querySelector('#p1');
// let p2 = document.querySelector('#p2');
// let p3 = document.querySelector('#p3');
// p1.addEventListener('click', function() {
//     p1.innerHTML = 1;
// });
// p2.addEventListener('click', function() {
//     p2.innerHTML = 2;
// });
// p3.addEventListener('click', function() {
//     p3.innerHTML = 3;
// });

// Дан абзац и кнопка. В абзаце записано какое-то число. По нажатию на кнопку возведите значение абзаца в квадрат и запишите его обратно.
// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     p.innerHTML = Number(p.innerHTML) ** 2;
// });

// Дан абзац с числом и кнопка. По нажатию на кнопку прибавьте к значению абзаца единицу и запишите полученное число обратно.
// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     p.innerHTML = Number(p.innerHTML) + 1;
// });

// Дан абзац с текстом и кнопка. По нажатию на кнопку запишите в конец текста абзаца восклицательный знак.
// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     p.innerHTML = p.innerHTML + '!';
// });

// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     p.innerHTML = '!' + p.innerHTML;
// });

// Дан абзац и кнопка. По нажатию на кнопку запишите в абзац текст '<i>hello</i>'.
// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     p.innerHTML = '<i>hello</i>';
// });

// Дан абзац с текстом и кнопка. По нажатию на кнопку прочитайте текст абзаца, оберните этот текст в теги <b> и запишите новый текст обратно в абзац.
// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     p.innerHTML = '<b>' + p.innerHTML + '</b>';
// });


//==================== Работа с атрибутами тегов через свойства элементов =========================
// Дан следующий инпут:
// <input id="elem" type="email">
// Дана также кнопка. По нажатию на кнопку выведите на экран содержимое атрибута type указанного выше инпута.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     alert(elem.type);
// });

// Дан следующий инпут:
// <input id="elem" type="email">
// Дана также кнопка. По нажатию на кнопку запишите в атрибут type значение submit.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     elem.type = 'submit';
// });

// Пусть у вас есть ссылка в виде тега a, кнопка и абзац. По нажатию на кнопку выведите в абзац содержимое атрибута href ссылки.
// let a = document.querySelector('#a');
// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     p.innerHTML = a.href;
// });

// Пусть у вас есть ссылка и кнопка. По нажатию на кнопку добавьте в конец текста ссылки содержимое ее атрибута href в круглых скобках.
// let a = document.querySelector('#a');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     a.innerHTML = a.innerHTML + '(' + a.href + ')'; 
// });

// Пусть у вас есть картинка. Разместите ее на странице в помощью тега img. Пусть даны также кнопка и абзац. Сделайте так, чтобы по клику на кнопку в абзац записался путь к картинки из ее атрибута src.
// let img = document.querySelector('#img');
// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     p.innerHTML = img.src;
// });

// Дана картинка в теге img и кнопка. По нажатию на кнопку в атрибут width запишите значение 300.
// let img = document.querySelector('#img');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     img.width = 300;
// });

// Дана картинка в теге img и кнопка. Пусть в атрибуте width задана некоторая ширина. Сделайте кнопку, по нажатию на которую ширина картинки будет увеличиваться в 2 раза.
// let img = document.querySelector('#img');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     img.width = img.width * 2;
// });

// Пусть у вас есть две картинки. Сделайте на странице тег img и две кнопки. По нажатию на первую кнопку запишите в атрибут src путь к первой картинке, а по нажатию на вторую - путь ко второй картинке.
// let img = document.querySelector('#img');
// let btn1 = document.querySelector('#btn1');
// let btn2 = document.querySelector('#btn2');
// btn1.addEventListener('click', function() {
//     img.src = 'https://static4.depositphotos.com/1000423/454/i/600/depositphotos_4548401-stock-photo-symbol-of-yin-and-yang.jpg';
// });
// btn2.addEventListener('click', function() {
//     img.src = 'https://st.depositphotos.com/1288351/3081/i/600/depositphotos_30815063-stock-photo-paint-smears.jpg';
// });


//============================= Работа с текстовыми полями в JavaScript ===============================
// Сделайте кнопку, нажатие на которую будет выводить текущий текст инпута. После захода на страницу нажмите на кнопку, чтобы увидеть текущий текст инпута, затем поредактируйте текст в инпуте и еще раз нажмите на кнопку. Убедитесь в том, что выведется новый текст инпута.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     alert(elem.value);
// });

// Дан инпут и кнопка. По нажатию на кнопку запишите в инпут какой-нибудь текст.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     elem.value = 'какой-нибудь текст';
// });

// Дан инпут, абзац и кнопка. По нажатию на кнопку запишите в абзац текст из инпута.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// let p = document.querySelector('#p');
// btn.addEventListener('click', function() {
//     p.innerHTML = elem.value;
// });

// Даны два инпута и кнопка. В первый инпут пользователем вводится число. По нажатию на кнопку запишите во второй инпут квадрат введенного числа.
// let elem1 = document.querySelector('#elem1');
// let elem2 = document.querySelector('#elem2');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     elem2.value = Number(elem1.value) ** 2;
// });

// Даны два инпута и кнопка. По нажатию на кнопку запишите в первый инпут значение второго инпута, а во второй инпут - значение первого. Ваш код должен работать универсально, для любых значений инпутов.
// let elem1 = document.querySelector('#elem1');
// let elem2 = document.querySelector('#elem2');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     let elem3 = elem1.value;
//     elem1.value = elem2.value;
//     elem2.value = elem3;
// });

// Даны 5 инпутов, абзац и кнопка. В инпут вводятся числа. По нажатию на кнопку запишите среднее арифметическое введенных чисел в абзац.
// let elem1 = document.querySelector('#elem1');
// let elem2 = document.querySelector('#elem2');
// let elem3 = document.querySelector('#elem3');
// let elem4 = document.querySelector('#elem4');
// let elem5 = document.querySelector('#elem5');
// let btn = document.querySelector('#btn');
// let p = document.querySelector('#p');
// btn.addEventListener('click', function() {
//     p.innerHTML = (Number(elem1.value) + Number(elem2.value) + Number(elem3.value) + Number(elem4.value) + Number(elem5.value)) / 5;
// });

// ============================ Фокус текстовых полей в JavaScript ================================
// Дан инпут. По получению фокуса запишите в него число 1, а по потери фокуса - число 2.
// let elem = document.querySelector('#elem');
// elem.addEventListener('focus', function() {
//     elem.value = 1;
// });
// elem.addEventListener('blur', function() {
//     elem.value = 2;
// });

// Дан инпут. Пусть в него вводится число. По потери фокуса выведите на экран квадрат этого числа.
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     elem.value = Number(elem.value) ** 2;
// });

// Дан инпут, в котором изначально есть какой-то текст. По получению фокуса инпутом очистите содержимое этого инпута.
// let elem = document.querySelector('#elem');
// elem.addEventListener('focus', function() {
//     elem.value = '';
// });


// ========================== Исключения при работе с атрибутами в JavaScript =========================
// Дан див:
// <div id="elem" class="content no-gap"></div>
// Дана также кнопка. По нажатию на кнопку прочитайте и выведите на экран значение атрибута class нашего дива.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     alert(elem.className);
// });

// Дан див:
// <div id="elem"></div>
// Дана также кнопка. По нажатию на кнопку запишите в атрибут class нашего дива какой-нибудь класс.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     elem.className = 'this class';
// });

// Дан див с несколькими CSS классами, записанными через пробел:
// <div id="elem" class="aaa bbb ccc"></div>
// Дана также кнопка. По нажатию на кнопку получите массив CSS классов нашего дива.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     let str = elem.className;
//     let arr = str.split(' ');
//     console.log(arr);
// });


//======================= Цепочки методов и свойств в JavaScript ==================================
// Дан следующий код:
// <img id="image" src="avatar.png">
// let image = document.querySelector('#image');
// console.log(image.src);
// Переделайте приведенный выше код так, чтобы вместо введения переменной image использовалась цепочка.
// console.log(document.querySelector('#image').src);

// <img id="image" src="avatar.png" width="300" height="500">
// console.log(document.querySelector('#image').src);
// console.log(document.querySelector('#image').width);
// console.log(document.querySelector('#image').height);
// Укажите на недостатки данного кода. Исправьте их.
// let elem = document.querySelector('#elem');
// console.log(elem.src);
// console.log(elem.width);
// console.log(elem.height);

// Дан инпут. По получению фокуса этим инпутом запишите в него число 1, а по потери фокуса - число 2. Для обращения у инпуту внутри функции-обработчика используйте объект this.
// let elem = document.querySelector('#elem');
// elem.addEventListener('focus', function() {
//     this.value = 1;
// });
// elem.addEventListener('blur', function() {
//     this.value = 2;
// });

// Дана кнопка, значением которой служит число 1. Сделайте так, чтобы по клику на эту кнопку ее значение каждый раз увеличивалось на единицу.
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     this.innerHTML = Number(this.innerHTML) + 1;
// });

// Даны 5 абзацев с какими-то текстами. По клику на любой абзац запишите в конец его текста восклицательный знак.
// let p1 = document.querySelector('#p1');
// let p2 = document.querySelector('#p2');
// let p3 = document.querySelector('#p3');
// let p4 = document.querySelector('#p4');
// let p5 = document.querySelector('#p5');

// p1.addEventListener('click', func);
// p2.addEventListener('click', func);
// p3.addEventListener('click', func);
// p4.addEventListener('click', func);
// p5.addEventListener('click', func);

// function func() {
//     this.innerHTML = this.innerHTML + '!';
// }

// Даны 3 инпута, в которых записаны какие-то числа. По потери фокуса в любом из инпутов возведите стоящее в нем число в квадрат.
// let elem1 = document.querySelector('#elem1');
// let elem2 = document.querySelector('#elem2');
// let elem3 = document.querySelector('#elem3');

// elem1.addEventListener('blur', func);
// elem2.addEventListener('blur', func);
// elem3.addEventListener('blur', func);

// function func() {
//     this.value = Number(this.value) ** 2;
// }


//============================= Получение группы элементов ====================================
// Даны абзацы и кнопка. По нажатию на кнопку найдите все абзацы, переберите из циклом и установите текст каждого абзаца в значение 'text'.
// let elems = document.querySelectorAll('.par');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     for (let elem of elems) {
//         elem.innerHTML = 'текст';
//     }
// });

// Даны абзацы с текстом и кнопка. По нажатию на кнопку запишите в конец текста каждого абзаца его порядковый номер.
// let elems = document.querySelectorAll('.par');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     for (let i = 0; i < elems.length; i++) {
//         elems[i].innerHTML += i + 1; 
//     }
// });

// Даны инпуты с числами, абзац и кнопка. По нажатию на кнопку найдите сумму чисел из инпутов и запишите эту сумму в текст абзаца.
// let elems = document.querySelectorAll('.digits');
// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     let sum = 0;
//     for (let elem of elems) {
//         sum += Number(elem.value);
//     }
//     p.innerHTML = sum;
// });

// Дана следующая функция:
// function func() {
//     this.value = Number(this.value) + 1;
// }
// Даны также инпуты. Сделайте так, чтобы по потери фокуса в любом из наших инпутов выполнялась приведенная выше функция.
// let elems = document.querySelectorAll('.class');
// for (let elem of elems) {
//     elem.addEventListener('blur', func);
// }

// function func() {
//     this.value = Number(this.value) + 1;
// }

// Даны абзацы с числами. Сделайте так, чтобы по клику на любой абзац его число в нем возводилось в квадрат.
// let elems = document.querySelectorAll('.class');
// for (let elem of elems) {
//     elem.addEventListener('click', func);
// }

// function func() {
//     this.innerHTML = Number(this.innerHTML) ** 2;
// }

// Дан следующий код:
// <div>1</div>
// <div>2</div>
// <div>3</div>
// <div>4</div>
// <div>5</div>
// let divs = document.querySelectorAll('div');
// for (let div of divs) {
//     div.addEventListener('click', func);
// }

// function func() {
//     this.innerHTML++;
// }
// Сделайте функцию-обработчик анонимной.
// let divs = document.querySelectorAll('div');
// for (let div of divs) {
//     div.addEventListener('click', function() {
//         this.innerHTML++;
//     });
// }


//====================== Отвязывание событий через removeEventListener ================================
// Дана ссылка. По нажатию на эту ссылку добавьте в конец ее текста содержимое ее атрибута href в круглых скобках. Сделайте так, чтобы это добавление происходило лишь по первому нажатию.
// let link = document.querySelector('#link');
// link.addEventListener('click', func);

// function func() {
//     link.innerHTML = link.innerHTML + '(' + link.href + ')';
//     this.removeEventListener('click', func);
// }

// Дана кнопка, значением которой служит число 1. Сделайте так, чтобы по клику на эту кнопку ее значение каждый раз увеличивалось на единицу. После того, как значение кнопки достигнет 10 - отвяжите обработчик события, чтобы кнопка больше не реагировала на нажатие.
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', func);

// function func() {
//     if (btn.innerHTML < 10) {
//         btn.innerHTML = Number(btn.innerHTML) + 1;
//     } else {
//         this.removeEventListener('click', func);
//     }
// }


//========================== Отвязывание обработчиков событий в цикле ===============================
// Даны абзацы. По нажатию на любой из абзацев добавьте ему в конец восклицательный знак. Сделайте так, чтобы это добавление происходило лишь по первому нажатию.
// let elems = document.querySelectorAll('p');
// for (let elem of elems) {
//     elem.addEventListener('click', func);
// }

// function func() {
//     this.innerHTML += '!';
//     this.removeEventListener('click', func);
// }


//============================= Отвязывание анонимных функций в JavaScript ===========================
// Пусть мы хотим отвязать эту функцию от абзаца после клика по этому абзацу. Нас, однако, ждет проблема: у функции нет имени, а значит мы не сможем обратится к ней по этому имени, чтобы отвязать ее.
// Для решения проблему нужно дать имя функции, сделав из нее именованное функциональное выражение.

// let elems = document.querySelectorAll('p');

// for (let elem of elems) {
//     elem.addEventListener('click', function func() {
//         alert(this.innerHTML);
//         this.removeEventListener('click', func); // отвязываем функцию
//     });
// }    



//=========================== Работа с атрибутами через методы в JavaScript ===========================
// <input id="elem" value="text">
// Получите значение его атрибута value.   
// let elem = document.querySelector('#elem');
// let value = elem.getAttribute('value');
// console.log(value);

// <input id="elem" class="www zzz">
// Получите значение его атрибута class.
// let elem = document.querySelector('#elem');
// let clas = elem.getAttribute('class');  
// console.log(clas);

// <input id="elem">
// Установите его атрибут value в значение 'text'.
// let elem = document.querySelector('#elem');
// elem.setAttribute('value', 'text');

// <input id="elem">
// Установите ему атрибут class в значение 'valid'.

// let elem = document.querySelector('#elem');
// elem.setAttribute('class', 'valid');

// <input id="elem" value="text">
// Удалите у него атрибут value.
// let elem = document.querySelector('#elem');
// elem.removeAttribute('value');

// <input id="elem" value="text">
// Проверьте наличие у него атрибута value.
// let elem = document.querySelector('#elem');
// console.log(elem.hasAttribute('value'));


//============================== Разница между способами получения атрибутов ===========================
// Дан инпут с каким-то начальным значением. Дана также кнопка. По нажатию на кнопку определите, было ли изменено пользователем начальное значение инпута.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     if (elem.value == elem.getAttribute('value')) {
//         alert('значение не изменилось');
//     } else {
//         alert('значение поменялось');
//     }
// });

// Дан инпут с каким-то начальным значением. Пусть пользователь меняет это значение. Сделайте рядом с инпутом кнопку, по нажатию на которую value инпута вернется в изначальное значение.
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     if (elem.value != elem.getAttribute('value')) {
//        elem.value = elem.getAttribute('value');
//     }
// });


//========================== Манипулирование CSS классами в JavaScript ================================
// Дан элемент:
// <p id="elem" class="www ggg zzz"></p>
// Узнайте количество его классов.
// let elem = document.querySelector('#elem');
// let classNames = elem.classList;
// console.log(classNames.length);

// <p id="elem" class="www ggg zzz"></p>
// Переберите в цикле его классы.
// let elem = document.querySelector('#elem');
// let classNames = elem.classList;
// for (let className of classNames) {
//     console.log(className);
// }

// Дан элемент:
// <p id="elem" class="www ggg zzz"></p>
// Добавьте ему класс xxx.
// let elem = document.querySelector('#elem');
// elem.classList.add('xxx');

// Удалите у него класс www и класс zzz.
// let elem = document.querySelector('#elem');
// elem.classList.remove('zzz', 'www');

// Проверьте наличие у него класса ggg.
// let elem = document.querySelector('#elem');
// console.log(elem.classList.contains('ggg'));

// Дан элемент. Добавьте ему класс www, если его нет и удалите - если есть.
// let elem = document.querySelector('#elem');
// elem.classList.toggle('www');


//================= Стилизация элементов через атрибут style в JavaScript ==========================
// Дан див и кнопка. По клику на кнопку добавьте диву ширину, высоту и границу.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     elem.style.width = '120px';
//     elem.style.height = '120px';
//     elem.style.border = 'solid';
// });

// Дан див с текстом и кнопка. По клику на кнопку установите диву размер шрифта в 20px, а также верхнюю границу и фон.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     elem.style.fontSize = '20px';
//     elem.style.borderTop = 'solid';
//     elem.style.backgroundColor = 'blue';
// });


//====================== Стилизация с помощью CSS классов на JavaScript ============================

// Дан абзац. Даны кнопки 'перечеркнуть', 'сделать жирным', 'сделать красным'. Пусть по нажатию на каждую кнопку заданное действие происходит с абзацем (становится красным, например).
// let elem = document.querySelector('#elem');
// let btn1 = document.querySelector('#btn1');
// let btn2 = document.querySelector('#btn2');
// let btn3 = document.querySelector('#btn3');

// btn1.addEventListener('click', function() {
//     elem.classList.toggle('cross-out');
// });
// btn2.addEventListener('click', function() {
//     elem.classList.toggle('bold');
// });
// btn3.addEventListener('click', function() {
//     elem.classList.toggle('colored');
// });

// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     elem.classList.toggle('active');
// });


//============================= Нахождение элементов по родственным связям =================================
// Найдите первого потомка этого элемента и сделайте его текст красного цвета.
// let elem = document.querySelector('#elem');
// let child = elem.firstElementChild.classList.toggle('colored');

// Найдите последнего потомка этого элемента и сделайте его текст красного цвета.
// let elem = document.querySelector('#elem');
// let child = elem.lastElementChild.classList.toggle('colored');

// Найдите всех потомков этого элемента и добавьте им в конец текст '!'.
// let elem = document.querySelector('#elem');
// let children = elem.children;
// for (let child of children) {
//     child.innerHTML += '!';
// }

// Найдите его родителя и задайте ему красную границу.
// let elem = document.querySelector('#elem');
// let parent = elem.parentElement.classList.toggle('brd')

// Найдите его родителя его родителя и задайте ему красную границу.
// let elem = document.querySelector('#elem');
// let parent = elem.parentElement.parentElement.classList.toggle('brd');

// Найдите ближайшего родителя этого элемента, являющегося тегом div.
// let elem = document.querySelector('#elem');
// let parent = elem.closest('div');
// console.log(parent.id);

// let elem = document.querySelector('#child');
// let parent = elem.closest('.www');
// console.log(parent.id);


// Найдите его соседа сверху и добавьте ему в конец текст '!'.
// let elem = document.querySelector('#elem');
// elem.previousElementSibling.innerHTML = elem.previousElementSibling.innerHTML + '!';

// Найдите его соседа снизу и добавьте ему в конец текст '!'.
// let elem = document.querySelector('#elem');
// elem.nextElementSibling.innerHTML += '!';

// Найдите его соседа снизу его соседа снизу (следующий элемент за соседним) и добавьте ему в конец текст '!'.
// let elem = document.querySelector('#elem');
// let neighbor = elem.nextElementSibling;
// neighbor.nextElementSibling.innerHTML += '!';

// Поменяйте местами текст его соседа сверху и текст его соседа снизу.
// let elem = document.querySelector('#elem');
// let neighborUp = elem.previousElementSibling;
// let neighborDown = elem.nextElementSibling;
// let some = neighborUp.innerHTML;
// neighborUp.innerHTML = neighborDown.innerHTML;
// neighborDown.innerHTML = some;


//========================= Другие полезные методы для поиска элементов =================================
// Получите этот элемент с помощью метода getElementById и установите ему какой-нибудь текст.
// let elem = document.getElementById('elem');
// elem.innerHTML = 'what about lorem???'

// Получите все теги li по имени тега и сделайте их текст красного цвета.
// let elems= document.getElementsByTagName('li');
// for (let elem of elems) {
//     elem.classList.toggle('colored');
// }

// Получите эти элементы по имени класса и сделайте их текст красного цвета.
// let elems = document.getElementsByClassName('www');
// for (let elem of elems) {
//     elem.classList.toggle('colored');
// }


//========================= Поиск элементов внутри другого элемента ===================================
// Найдите внутри родителя элементы с классом www и запишите их в переменную elems1. Затем найдите внутри родителя элементы с классом ggg и запишите их в переменную elems2.
// let parent = document.querySelector('#parent');
// let elems1 = parent.querySelectorAll('.www');
// let elems2 = parent.querySelectorAll('.ggg');


//============================= Пользовательские атрибуты в JavaScript =================================
// Сделайте так, чтобы по клику на див в конец его текста добавилось содержимое его атрибута data-text.
// let elem = document.querySelector('#elem');
// elem.addEventListener('click', function() {
//     elem.innerHTML += elem.dataset.text;
// });



// // Сделайте так, чтобы по клику на любой из дивов ему в конец записывался его порядковый номер.
// let elems = document.getElementsByTagName('div');
// for (let elem of elems) {
//     elem.addEventListener('click', function() {
//         this.innerHTML += this.dataset.num;
//     });
// }

// Дана кнопка. Сделайте так, чтобы эта кнопка считала количество кликов по ней, записывая их в какой-нибудь пользовательский атрибут. Пусть по двойному клику на эту кнопку на экран выводится, сколько кликов по этой кнопке было сделано.
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     btn.dataset.click = Number(btn.dataset.click) + 1;
// });
// btn.addEventListener('dblclick', function() {
//     alert(btn.dataset.click);
// });

// В этом инпуте в атрибуте data-length содержится количество символов, которое нужно ввести в инпут. Сделайте так, чтобы по потери фокуса, если количество введенных символов не совпадает с заданным, выводилось сообщение об этом.
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     if (elem.value.length != elem.dataset.length) {
//         alert('должно быть ' + elem.dataset.length + ' символов');
//     }
// });

// В этом инпуте атрибуты data-min и data-max содержат диапазон. Сделайте так, чтобы по потери фокуса, если количество введенных символов не попадает в этот диапазон, выводилось сообщение об этом.
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     if (elem.value.length < elem.dataset.min || elem.value.length > elem.dataset.max) {
//         alert('количество символов должно быть в диапозоне от ' + elem.dataset.min + ' до ' + elem.dataset.max);
//     }
// });

// Сделайте так, чтобы по клику на див в конец его текста добавлялась стоимость покупки, равная цене, умноженной на количество.
// let elem = document.querySelector('#elem');
// elem.addEventListener('click', function() {
//     elem.innerHTML = elem.innerHTML + ' ' + Number(elem.dataset.productPrice) * Number(elem.dataset.productAmount);
// });

// Даны абзацы. Переберите их циклом и каждому абзацу в атрибут data-num запишите порядковый номер этого абзаца. Используйте метод setAttribute.
// let elems = document.getElementsByTagName('p');
// for (let i = 0; i < elems.length; i++) {
//     elems[i].dataset.num = i ;
// }


//================================ Работа с узлами в JavaScript =======================================
// Переберите циклом все узлы этого дива и выведите их в консоль.
// let elem = document.querySelector('#elem');
// for (let node of elem.childNodes) {
//     console.log(node);
// }

// Переберите циклом все узлы этого дива и выведите в консоль их названия.
// let elem = document.querySelector('#elem');
// for (let node of elem.childNodes) {
//     console.log(node.nodeName);
// }

// Переберите циклом все узлы этого дива и выведите в консоль только узлы-элементы и текстовые узлы.
// let elem = document.querySelector('#elem');
// for (let node of elem.childNodes) {
//     if (node.nodeType == 1 || node.nodeType == 3) {
//         console.log(node);
//     }
// }

// Переберите циклом все узлы этого дива и выведите в консоль тексты всех узлов.
// let elem = document.querySelector('#elem');
// for (let node of elem.childNodes) {
//     console.log(node.textContent);
// }

// Переберите циклом все узлы этого дива и выведите в консоль тексты всех комментариев и текстовых узлов.
// let elem = document.querySelector('#elem');
// for (let node of elem.childNodes) {
//     if (node.data) {
//         console.log(node.data);
//     }
// }

// Переберите циклом все узлы этого дива и выведите в консоль тексты текстовых узлов и элементов.
// let elem = document.querySelector('#elem');
// for (let node of elem.childNodes) {
//     if (node.nodeType == 1 || node.nodeType == 3) {
//         console.log(node.textContent);
//     }
// }

// Переберите циклом все узлы этого дива и каждому узлу в конец запишите его тип.
// let elem = document.querySelector('#elem');
// for (let node of elem.childNodes) {
//     if (node.nodeType == 1) {
//         console.log(node + ' элемент');
//     }
//     if (node.nodeType == 3) {
//         console.log(node + ' текстовый');
//     }
//     if (node.nodeType == 8) {
//         console.log(node + ' комментарий');
//     }
// }


//============================= Отработка изученного материала на работу с DOM ===============================
// Дан инпут и абзац. По потери фокуса в инпуте запишите значение инпута в конец текста абзаца.
// let elem = document.querySelector('#elem');
// let p = document.querySelector('#p');
// elem.addEventListener('blur', function() {
//     p.innerHTML += elem.value;
// });

// Дано несколько инпутов, абзац и кнопка. По нажатию на кнопку получите числа, стоящие в этих инпутах и запишите их сумму в абзац.
// let put = document.querySelectorAll('.put');
// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');

// btn.addEventListener('click', function() {
//     let sum = 0;
//     for (let elem of put) {
//         sum += Number(elem.value);
//     }
//     p.innerHTML = sum;
// });

// Дан инпут. В него вводится число. По потери фокуса найдите сумму цифр этого числа.
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     let arr = elem.value.split('');
//     let sum = 0;
//     for (let el of arr) {
//         sum += Number(el);
//     }
//     console.log(sum);
// });

// Дан инпут. В него вводятся числа через запятую. По потери фокуса найдите среднее арифметическое этих чисел (сумма делить на количество).
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     let arr = elem.value.split(',');
//     let sum = 0;
//     for (let el of arr) {
//         sum += Number(el);
//     }
//     console.log(sum / arr.length);
// });

// Даны 4 инпута. В первый инпут вводится ФИО через пробел. По потери фокуса запишите фамилию, имя и отчество в остальные 3 инпута.
// let elem1 = document.querySelector('#elem1');
// let elem2 = document.querySelector('#elem2');
// let elem3 = document.querySelector('#elem3');
// let elem4 = document.querySelector('#elem4');

// elem1.addEventListener('blur', function() {
//     let arr = elem1.value.split(' ');
//     elem2.value = arr[0];
//     elem3.value = arr[1];
//     elem4.value = arr[2];
// });

// // Дан инпут. В него вводится ФИО через пробел. ФИО вводится с маленькой буквы. Сделайте так, чтобы по потери фокуса инпутом, введенные фамилия, имя и отчество автоматически стали записанными с большой буквы (в этом же инпуте).
// let elem = document.querySelector('#elem');

// elem.addEventListener('blur', function() {
//     let arr = elem.value.split(' ');
//     let result = '';
//     let fullResult = '';
//     for (let el of arr) {
//         result = el.slice(0, 1).toUpperCase() + el.slice(1);
//         fullResult = fullResult + result + ' ';
//     }
//     elem.value = fullResult;
// });

// Дан инпут. В него вводится текст. По потери фокуса узнайте количество слов в этом тексте.
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     let arr = elem.value.split(' ');
//     console.log(arr.length);
// });

// Дан инпут. В него вводится дата в формате 31.12.2016. По потери фокуса в этом же инпуте поставьте эту дату в формате 2016-12-31.
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     let arr = elem.value.split('.').reverse().join('-');
//     elem.value = arr;
// });

// Дан инпут. В него вводится слово. По нажатию на кнопку проверьте то, что это слово читается с начала и с конца одинаково (например, мадам).
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     let arr = elem.value.split('');
//     console.log(elem.value == arr.reverse().join(''));
// });

// Дан инпут. В него вводится число. Проверьте по потери фокуса, что это число содержит внутри себя цифру 3.
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     if (elem.value.indexOf(3) != -1) {
//         console.log(true);
//     } else {
//         console.log(false);
//     }
// });

// Даны несколько абзацев и кнопка. По нажатию на кнопку запишите в конец каждого абзаца его порядковый номер.
// let elems = document.getElementsByTagName('p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     for (let i = 1; i < elems.length; i++) {
//         elems[i].innerHTML += i;
//     }
// });

// Даны ссылки. Добавьте в конец каждой ссылки ее href в круглых скобках.
// let elems = document.getElementsByTagName('a');
// for (let elem of elems) {
//     elem.innerHTML += '(' + elem.href + ')';
// }

// Даны ссылки. Если ссылка начинается с http://, то добавьте ей в конец стрелку → (делается так: &rarr;).
let elems = document.getElementsByTagName('a');
for (let elem of elems) {
    if (elem.href.startsWith('https://')) {
        elem.innerHTML += '&rarr;';
    }
}