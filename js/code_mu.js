'use strict';

// let a = 10;
// alert(a);

// a = 20;
// alert(a); 

// let a = 1 + 2 + 3;
// alert(a);

// let a = 2,
//     b = 10;
// alert(a**b);

// let str1 = 'java',
//     str2 = 'script';
// alert(str1 + str2);

// let str1 = 'hello',
//     str2 = 'world';
// alert(str1 + ' ' + str2);

// let name = 'Egor';
// alert('привет, ' + name);

// let age = 31;
// alert('мне ' + age + ' год');

// alert('abc d'.length);

// let str = `a,
// b
// c`;
// alert(str);


// let a;
// alert(a);

// let a = null;
// alert(a);

// let a = true;
// alert(a);

// let b = false;
// alert(b);

// let str1 = 'abc',
//     str2 = 'def';
// alert(str1 * str2);

// alert(10 / 0);
// alert(-10 / 0);

// // Найдите количество секунд в сутках.
// let a = 60 * 60 * 24;
// alert('количество секунд в сутках = ' + a + ' сек');

// // Найдите количество секунд в 30 сутках.
// let a = 60 * 60 * 24 * 30;
// alert('количество секунд в месяце = ' + a + ' сек');

// // Найдите количество секунд в году.
// let a = 60 * 60 * 24 * 365;
// alert('количество секунд в году =' + a + ' сек');

// // Найдите количество минут в сутках.
// let a = 60 * 24;
// alert('количество минут в сутках = ' + a + ' мин');

// // Найдите количество минут в году.
// let a = 60 * 24 * 365;
// alert('количество минут в году = ' + a + ' мин');

// let a = '10',
//     b = '20';
// alert(Number(a) + Number(b));

// let a = +'2';
// let b = +'3';
// alert(a + b); 

// Дана переменная со значением 5px и переменная со значением 6px. Найдите сумму пикселей из значений этих переменных и выведите ее на экран.
// let a  = parseFloat('5.5px'),
//     b = parseFloat('6.25px');
// console.log(a + b + 'px');

// let a = 22,
//     b = 55;
// console.log(String(a) + String(b));

// // Дана переменная с числом. Найдите количество цифр в этом числе.
// let a = 98765423;
// console.log(String(a).length);

// // Даны две переменные с числами. Найдите количество цифр в одном и во втором числе, результаты сложите и выведите на экран.
// let a = 5673,
//     b = 988735243;
// console.log(String(a).length + String(b).length);

// console.log(String(true));

// console.log( String(true) + Number(true) );

// let test = Boolean('abc');
// console.log(test);

// let test = Boolean('');
// console.log(test);

// let test = Boolean(true);
// console.log(test);

// let test = Boolean(false);
// console.log(false);

// let test = Boolean(1 / 0);
// console.log(test);

// Дана строка 'abcde'. Обращаясь к отдельным символам этой строки выведите на экран символ 'a', символ 'c', символ 'e'.

// let a = 'abcde';
// console.log(a[0]);
// console.log(a[2]);
// console.log(a[4]);

// Дана переменная со строкой 'abcde'. Обращаясь к отдельным символам этой строки запишите в новую переменную символы этой строки в обратном порядке, то есть 'edcba'.

// let str = 'abcde';
// let str1 = str[4] + str[3] + str[2] + str[1] + str[0];
// console.log(str1);

// Дана переменная str со строкой 'abcde' и переменная num с номером символа. Выведите на экран символ, номер которого хранится в переменной num.

// let str = 'abcde',
//     num = 2;
// console.log(str[num]);

// // Дана строка. Выведите на экран ее последний символ.
// let str = 'gogsyan';
// console.log(str[str.length - 1]);

// // Дана строка. Выведите на экран ее предпоследний символ.
// let str = 'gogsyan';
// console.log(str[str.length - 2]);

// Дана строка '12345'. Найдите сумму цифр этой строки.

// let str = '12345';
// console.log(Number(str[0]) + Number(str[1]) + Number(str[2]) + Number(str[3]) + Number(str[4]));

// Дано число 12345. Найдите сумму цифр этого числа.
// let str = String(12345);
// console.log(Number(str[0]) + Number(str[1]) + Number(str[2]) + Number(str[3]) + Number(str[4]));

// // Дано число 12345. Найдите произведение цифр этого числа.
// let str = 12345;
// str = String(12345);
// console.log(str[0] * str[1] * str[2] * str[3] * str[4]);

// Дано число 12345. Переставьте цифры этого числа в обратном порядке.

// let str = 12345;
// str = String(12345);
// let str1 = str[4] + str[3] + str[2] + str[1] + str[0];
// console.log(str1);


//==================== Префиксы и постфиксы ===================

// Переделайте этот код так, чтобы в нем использовались описанные сокращенные операции:
// let num = 47;
// num += 7;
// num -= 18;
// num *= 10;
// num /= 15;
// console.log(num);

// let num1 = 3;
// let num2 = ++num1;
// console.log(num1);
// console.log(num2);

// let num1 = 3;
// let num2 = num1--;
// console.log(num1);
// console.log(num2);

// let num1 = 3;
// num1++;
// let num2 = num1--;
// console.log(num1++);
// console.log(--num2);


// ========================= Prompt ==========================

// let name = prompt('Ваше имя?');
// alert('Ваше имя: ' + name);

// Спросите возраст пользователя с помощью функции prompt. Выведите с помощью alert введенный пользователем возраст.
// alert('Ваш возраст: ' + prompt('Ваш возраст?'));

// let num1 = prompt('Введите первое число');
// let num2 = prompt('Введите второе число');
// alert(Number(num1) + Number(num2));

// С помощью функции prompt спросите у пользователя сторону квадрата. Выведите на экран площадь введенного квадрата.
// let side = prompt('Введите сторону квадрата');
// let S = side * side;
// alert('Площадь квадрата равна ' + S);

// С помощью двух функций prompt спросите у пользователя стороны прямоугольника. Выведите на экран периметр введенного прямоугольника.
// let a = prompt('Введите одну сторну прямоугольника');
// let b = prompt('Введите другую сторну прямоугольника');
// let P = 2 * (Number(a) + Number(b));
// alert('Периметр прямоуголника равен ' + P);



// ================================== Массивы в JS ================================

// Создайте массив с элементами 'a', 'b' и 'c'. Выведите его на экран с помощью функции alert, а также выведите его в консоль с помощью console.log.
// let arr = ['a', 'b', 'c'];
// console.log(arr);

// Создайте массив с элементами 'a', 'b', 'c'. Выведите на экран каждый из этих элементов.
// let arr = ['a', 'b', 'c'];
// console.log(arr[0]);
// console.log(arr[1]);
// console.log(arr[2]);

// Создайте массив с элементами массив с элементами 'a', 'b', 'c', 'd'. Выведите с его помощью на экран строку 'a+b+c+d'.
// let arr = ['a', 'b', 'c', 'd'];
// console.log((arr[0] + '+') + (arr[1] + '+') + (arr[2] + '+') + arr[3]);

// // Создайте массив с элементами 1, 2 и 3. Выведите на экран сумму этих элементов.
// let arr = [1, 2, 3];
// console.log(arr[0] + arr[1] + arr[2]);

// Создайте массив с элементами 2, 5, 3, 9. Умножьте первый элемент массива на второй, а третий элемент на четвертый. Результаты сложите, присвойте переменной result. Выведите на экран значение этой переменной.
// let arr = [2, 5, 3, 9];
// let result = arr[0] * arr[1] + arr[2] * arr[3];
// console.log(result);

// Создайте массив с произвольными элементами. Выведите на экран количество элементов в этом массиве.
// let arr = [23, 33, 12, 54, 2, 4, 90];
// console.log(arr.length);

// Создайте массив с произвольными элементами. Выведите на экран последний элемент этого массива.
// let arr = [2, 34, 43, 6, 10, 22, 111];
// console.log(arr[arr.length - 1]);

// Создайте массив с элементами 'a', 'b', 'c'. Запишите вместо первого элемента число 1, вместо второго - 2, вместо третьего - 3.
// let arr = ['a', 'b', 'c'];
// arr[0] = 1;
// arr[1] = -2;
// arr[2] = -3;
// console.log(arr);

// Создайте массив с числами. Прибавьте к каждому элементу массива число 3. Выведите на экран измененный массив.
// let arr = [23, 5, 6, 78,];
// arr[0] += 3;
// arr[1] += 3;
// arr[2] += 3;
// arr[3] += 3;
// console.log(arr);

// Создайте массив с элементами 1, 2 и 3. С помощью оператора ++ увеличьте каждый элемент массива на единицу.
// let arr = [1, 2, 3];
// arr[0]++;
// ++arr[1];
// arr[2]++;
// console.log(arr);

// С помощью описанного приема создайте массив с элементами 1, 2 и 3.
// let arr = [];
// arr[0] = 1;
// arr[1] = 2;
// arr[2] = 3;
// console.log(arr);

// Пусть дан такой массив: let arr = [1, 2, 3]; Добавьте ему в конец элементы 4 и 5.
// let arr = [1, 2, 3];
// arr[3] = 4;
// arr[4] = 5;
// console.log(arr);


// ==================================  ОБЪЕКТЫ  =====================================

// let obj = {1: 'a', 2: 'b', 3: 'c'};
// console.log(obj);

// Создайте объект с ключами a, b и c и значениями 1, 2 и 3. Найдите сумму его элементов.
// let obj = {a: 1, b: 2, c: 3};
// console.log(obj['a'] + obj['b'] + obj['c']);

// Создайте объект с ключами 1a, 2b и с-с и значениями 1, 2 и 3. Найдите сумму его элементов.
// let obj = {'1a': 1, '2b': 2, 'c-c': 3};
// console.log(obj['1a'] + obj['2b'] + obj['c-c']);

// Найдите сумму его элементов. Обращайтесь к элементам с помощью изученного синтаксиса.
// let obj = {key1: 1, key2: 2, key3: 3};
// console.log(obj.key1 + obj.key2 + obj.key3);

// Создайте объект user с ключами name (имя), surname (фамилия), patronymic (отчество) и какими-то произвольными значениями. Выведите на экран фамилию, имя и отчество через пробел.
// let user = {name: 'Tom', surname: 'Taylor', patronymic: 'John'};
// console.log(user.name + ' ' + user.surname + ' ' + user.patronymic);

// Создайте объект date (дата) с ключами year (год), month (месяц) и day (день) и значениями, соответствующими текущему дню. Выведите созданную дату на экран в формате 'год-месяц-день'.

// let date = {year: 2021, month: 7, day: 11};
// console.log(date.year + '-' + date.month + '-' + date.day);

// Создайте объект с ключами a, b и c и элементами 1, 2 и 3.
// let obj = {};
// obj.a = 1;
// obj.b = 2;
// obj.c = 3;
// console.log(obj);

// Дана также переменная key со значением 2. Выведите на экран элемент, ключ которого хранится в переменной key.

// let arr = ['a', 'b', 'c'];
// let key = 2;
// console.log(arr[key]);

// Дана также переменная key1 со значением 1 и переменная key2 со значением 2. Найдите сумму элементов, ключи которых хранятся в наших переменных.

// let arr = [1, 2, 3, 4, 5];
// let key1 = 1,
//     key2 = 2;
// console.log(arr[key1] + arr[key2]);


// Дана переменная key, в которой хранится один из ключей нашего объекта. Выведите с помощью переменной key соответствующий элемент объекта.
// let obj = {'a': 1, 'b': 2, 'c': 3};
// let key = 'a';
// console.log(obj[key]);


// ================  Типизация массивов и объектов в JavaScript  =========================
// let arr = [1, 2, 3];
// console.log( typeof arr[0] );

// console.log( Array.isArray([1, 2, 3]) );

// ======================  Передача объектов по ссылке в JavaScript ================

// let arr1 = [1, 2, 3];
// let arr2 = arr1;

// arr1[0] = 'a';
// arr2[1] = 'b';

// console.log(arr1);

// let arr1 = [1, 2, 3];
// let arr2 = arr1;

// arr1[0] = 'a';
// arr2[0] = 'b';

// console.log(arr2);


// ===========================  Конструкция if-else в JavaScript ===================

// let test = 22;
// if (test > 10) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// let test = 22;
// if (test < 10) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// let test = 22;
// if (test >= 10) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// let test = 22;
// if (test <= 10) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// Если переменная test равна 10, то выведите на экран слово 'верно', иначе выведите слово 'неверно'.
// let test = 3;
// if (test == 10) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// let test = 3;
// if (test != 10) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// Даны переменные test1 и test2. Проверьте, что значение какой из этих переменных больше и выведите соответствующее сообщение на экран.

// let test1 = 3,
//     test2 = 45;
// if (test1 < test2) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }


// =======================  Сложные условия в if-else в JavaScript  ====================

// Если переменная num больше нуля и меньше 5, то выведите на экран слово 'верно', иначе выведите слово 'неверно'.

// let num = 3;
// if (num > 0 && num < 5) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// Если переменная num больше или равна 10 и меньше или равна 20, то выведите на экран слово 'верно', иначе выведите слово 'неверно'.
// let num = 32;
// if (num >= 10 && num <= 20) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// Если переменная num1 равна или меньше 1, а переменная num2 больше или равна 3, то выведите на экран слово 'верно', иначе выведите слово 'неверно'.

// let num1 = 1,
//     num2 = 3;
// if (num1 <= 1 && num2 >= 3) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// let num1 = -5;
// let num2 = 15;

// if (num1 >= 0 || num2 >= 0) {
// 	console.log('верно');
// } else {
// 	console.log('неверно');
// }

// let num = 3;
		
// if (num > 5 || num > 0 && num < 3) {
// 	console.log('верно');
// } else {
// 	console.log('неверно');
// }

// let num1 = -22,
//     num2 = 11;

// if ( !(num1 >= 0 || num2 <= 10) ) {
// 	console.log('верно');
// } else {
// 	console.log('неверно');
// }

// Если переменная test равна true, то выведите на экран слово 'верно', иначе выведите слово 'неверно'.

// let test = true;
// if (test === true) {
//     console.log('верно');
// } else {
//     console.log('неверно');
// }

// let test;		
// if (test == true) {
// 	console.log('верно');
// } else {
// 	console.log('неверно');
// }

// let test = 3 * 'a';
		
// if (test == true) {
// 	console.log('верно');
// } else {
// 	console.log('неверно');
// }

// Перепишите следующий код с использованием сокращенного сравнения:
// let test = true;
// if (test) {
// 	console.log('верно');
// } else {
// 	console.log('неверно');
// }

// let test = true;

// if (!test) {
// 	console.log('верно');
// } else {
// 	console.log('неверно');
// }

// let test = 3;

// if (test) {
// 	console.log('верно');
// } else {
// 	console.log('неверно');
// }

// let test = -1;

// if (test) {
// 	alert('верно');
// } else {
// 	alert('неверно');
// }

// Если переменная test равна 10, то пусть на экран выведется слово 'верно'. В противном случае пусть ничего не произойдет.

// let test = 10;
// if (test == 10) {
//     console.log('верно');
// }

// В переменной day лежит какое-то число из интервала от 1 до 31. Определите в какую декаду месяца попадает это число (в первую, вторую или третью).

// let day = 22;
// if (day <= 10) {
//     console.log('1-я декада месяца');
// }
// if (day >=11 && day <= 20) {
//     console.log('2-я декада месяца');
// }
// if (day >= 21 && day <= 31) {
//     console.log('3-я декада месяца');
// }

// Решите предыдущую задачу на декады месяца через конструкцию else if.

// let day = 22;
// if (day >= 1 && day <= 10) {
//     console.log('1-я декада месяца');
// } else if (day >=11 && day <= 20) {
//     console.log('2-я декада месяца');
// } else if (day >= 21 && day <= 31) {
//     console.log('3-я декада месяца');
// }

// let day = 0;
// if (day >= 1 && day <= 10) {
//     console.log('1-я декада месяца');
// } else if (day >=11 && day <= 20) {
//     console.log('2-я декада месяца');
// } else if (day >= 21 && day <= 31) {
//     console.log('3-я декада месяца');
// } else {
//     console.log('неверное значение day');
// }

// Пусть в переменной num хранится число. Если это число меньше 10 или больше 99, то выведите на экран сообщение об этом. Если же число попадает в указанный диапазон, то найдите сумму цифр этого числа. Если полученная сумма меньше или равна 9, то выведите на экран сообщение о том, что сумма цифр однозначна, в противном случае выведите сообщение о том, что сумма цифр двузначна.

// let num = 44;
// num = String(num);
// if (Number(num) < 10 || Number(num) > 99) {
//     console.log('число меньше 10 или больше 99');
// } else {
//     if ((Number(num[0]) + Number(num[1])) <= 9) {
//         console.log('сумма цифр однозначна');
//     } else {
//         console.log('сумма цифр двузначна');
//     }
// }

// Автор приведенного ниже кода хотел выполнить проверку возраста на достижение 18 лет.
// Код, однако, не работает. Исправьте ошибку автора кода.
// Вот проблемный код:

// let age = 17;
// if (age >= 18) {
// 	let adult = true;
// } else {
// 	let adult = false;
// }
// console.log(adult);

// let age = 17;
// let adult;
// if (age >= 18) {
// 	adult = true;
// } else {
// 	adult = false;
// }
// console.log(adult);

// let age = 17;
// let result;

// if (age >= 18) {
// 	if (age <= 23) {
// 		result = 'от 18 до 23';
// 	} else {
// 		result = 'больше 23';
// 	}
// } else {
// 	result = 'меньше 18';
// }

// console.log(result);

// Решите аналогичную задачу, только определите в какую треть часа попадает указанное количество минут.

// let min = 33;
// if (min >= 0 && min <= 20) {
//     console.log('1-я треть');
// }
// if (min >= 21 && min <= 40) {
//     console.log('2-я треть');
// }
// if (min >= 41 && min <= 59) {
//     console.log('3-я треть');
// }

// В переменной arr содержится некоторый массив с числами. Напишите условие, которое проверит, что в массиве 3 элемента. Если это так, выведите на экран сумму элементов массива.
// let arr = [12, 33, 4];
// if (arr.length == 3) {
//     console.log(arr[0] + arr[1] + arr[2]);
// }

// // Дано целое число. Напишите условие, которое проверит, равна ли последняя цифра этого числа нулю.
// let num = 121;
// num = String(num);
// if (num[num.length - 1] == 0) {
//     console.log('!');
// }

// Пусть в переменной num хранится число. Определите, четное число или нет. Число будет четным, если последний символ равен 0, 2, 4, 6 или 8, и нечетным в противном случае.
// let num = 2;
// num = String(num);
// if (num[num.length - 1] == 0 || num[num.length - 1] == 2 || num[num.length - 1] == 4 || num[num.length - 1] == 6 || num[num.length - 1] == 8) {
//     console.log(num + ' - четное число');
// } else {
//     console.log(num + ' - нечетное число')
// }


// Как известно, четные числа делятся на 2 без остатка, а нечетные - с остатком. Пусть у вас дано число. С помощью оператора % и конструкции if проверьте четное это число или нет.
// let a = 31;
// let rest = a % 2;
// if (rest == 0) {
//     console.log(a + ' - четное число');
// } else {
//     console.log(a + ' - нечетное число');
// }

// Дано число. Проверьте, что оно делится на 3.
// let a = 9;
// let rest = a % 3;     
// if (rest == 0) {
//     console.log(a + ' - делится на 3');
// } else {
//     console.log(a + ' - не делится на 3');
// }

// В переменной month лежит какое-то число из интервала от 1 до 12. Определите в какую пору года попадает этот месяц (зима, лето, весна, осень).
// let month = 11;
// if (month == 12 || month == 1 || month == 2) {
//     console.log('Зима');
// } else if (month == 3 || month == 4 || month == 5) {
//     console.log('Весна');
// } else if (month == 6 || month == 7 || month == 8) {
//     console.log('Лето'); 
// } else if (month == 9 || month == 10 || month == 11) {
//     console.log('Осень');
// } else {
//     console.log('Ошибка!!! Число должно быть от 1 до 12');
// }

// Дана строка, состоящая из символов, например, 'abcde'. Проверьте, что первым символом этой строки является буква 'a'. Если это так - выведите 'да', в противном случае выведите 'нет'.
// let str = 'bcde';
// if (str[0] == 'a') {
//     console.log('да');
// } else {
//     console.log('нет');
// }

// Дано число, например, 12345. Проверьте, что первым символом этого числа является цифра 1, 2 или 3. Если это так - выведите 'да', в противном случае выведите 'нет'.
// let num = 12345;
// let first = String(num)[0];
// if (first == 1 || first == 2 || first == 3) {
//     console.log('да');
// } else {
//     console.log('нет');
// }

// Дано трехзначное число. Найдите сумму цифр этого числа.
// let num = 123;
// num = String(num);
// console.log;

// Дано число из 6-ти цифр. Проверьте, что сумма первых трех цифр равняется сумме вторых трех цифр. Если это так - выведите 'да', в противном случае выведите 'нет'.

// let num = 123123;
// num = String(num);
// if ((Number(num[0]) + Number(num[1]) + Number(num[2])) == (Number(num[3]) + Number(num[4]) + Number(num[5]))) {
//     console.log('да');
// } else {
//     console.log('нет');
// }


// =====================  Конструкция switch-case в JavaScript  ============================

// Переменная num может принимать значения 1, 2, 3 или 4. Если она имеет значение 1, то выведите на экран текст 'зима', если значение 2 - 'весна' и так далее. Если в переменной будет какое-то другое значение - выведите на экран сообщение об ошибке. Решите задачу через switch-case.

// let num = 2;
// switch (num) {
//     case 1:
//         console.log('зима');
//     break;
//     case 2:
//         console.log('весна');
//     break;
//     case 3:
//         console.log('лето');
//     break;
//     case 4:
//         console.log('осень');
//     break;
//     default:
//         console.log('не верное значение!');
//     break;
// }


// ===========================  Тернарный оператор в JavaScript  ===========================

// Пусть дана переменная num, которая может быть либо отрицательной, либо положительной. Запишите в переменную result число 1, если переменная num больше или равна нулю, и число -1, если переменная num меньше нуля.

// let num = 11;
// let result = num >= 0 ? 1: -1;
// console.log(result);



// ====================== Логические операции в JavaScript  ==============================

// Используя оператор ==, узнайте, равны ли значения этих переменных или нет.
// let a = 2 * (3 - 1);
// let b = 6 - 2;
// console.log(a == b);

// Используя оператор >, узнайте, больше ли переменная a, чем b.
// let a = 5 * (7 - 4);
// let b = 1 + 2 + 7;
// console.log(a > b);

// Используя операцию оператор !=, узнайте, разные ли значения этих переменных или нет.
// let a = 2 ** 4;
// let b = 4 ** 2;
// console.log(a != b);


// ===========================  Функция confirm в JavaScript  =============================

// Спросите у пользователя, есть ли ему уже 18 лет. Если есть - выведите на экран алерт с текстом для взрослых, а если нет, выведите сообщение о том, что доступ пользователю запрещен.
// let adult = confirm('Вам есть 18 лет?');
// if (adult) {
//     alert('Текст для взрослых');
// } else {
//     alert('Доступ запрещен!');
// }


// ===============================  Цикл while в JavaScript  ===============================

// Выведите в консоль числа от 1 до 100.
// let i = 1;
// while (i <= 100) {
//     console.log(i);
//     i++;
// }

// Выведите в консоль числа 11 до 33.
// let i = 11;
// while (i <= 33) {
//     console.log(i);
//     i++;
// }

// Выведите в консоль четные числа в промежутке от 0 до 100.
// let i = 2;
// while (i <= 100) {
//     console.log(i);
//     i += 2;
// }

// Выведите в консоль нечетные числа в промежутке от 1 до 99.
// let i = 1;
// while (i <= 99) {
//     console.log(i);
//     i += 2;
// }

// Выведите в консоль числа от 30 до 0.
// let i = 30;
// while (i >= 0) {
//     console.log(i);
//     i--;
// }


// =================================  Цикл for в JavaScript  =============================

// // С помощью цикла for выведите в консоль числа от 1 до 100.
// for (let i = 1; i <= 100; i++) {
//     console.log(i);
// }

// // С помощью цикла for выведите в консоль числа от 11 до 33.
// for (let i = 11; i <= 33; i++) {
//     console.log(i);
// }

// // С помощью цикла for выведите в консоль четные числа в промежутке от 0 до 100.
// for (let i = 2; i <= 100; i += 2) {
//     console.log(i);
// }

// // С помощью цикла for выведите в консоль нечетные числа в промежутке от 1 до 99.
// for (let i = 1; i <= 99; i += 2) {
//     console.log(i);
// }

// // С помощью цикла for выведите в консоль числа от 100 до 0.
// for (let i = 100; i >= 0; i--) {
//     console.log(i);
// }


// ========================== Накопление результата в цикле JavaScript ===================

// Найдите произведение целых чисел от 1 до 20.
// let result = 1;
// for (i = 1; i <= 20; i++) {
//     result = result * i;
// }
// console.log(result);

// Найдите сумму четных чисел от 2 до 100.
// let result = 0;
// for (i = 2; i <= 100; i += 2) {
//     result += i;
// }
// console.log(result);

// Найдите сумму нечетных чисел от 1 до 99.
// let result = 0;
// for (let i = 1; i <= 99; i += 2) {
//     result += i;
// }
// console.log(result);


// =============================  Цикл for для массивов в JavaScript  ======================

// Дан массив с элементами 'a', 'b', 'c', 'd', 'e'. С помощью цикла for выведите все эти элементы на экран.
// let arr = ['a', 'b', 'c', 'd', 'e'];
// for (let i = 0; i < arr.length; i++) {
//     console.log(arr[i]);
// }

// Дан массив с элементами 1, 2, 3, 4, 5. С помощью цикла for и оператора if выведите в консоль нечетные элементы массива.
// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i] % 2 != 0) {
//         console.log(arr[i]);
//     }
// }

// Дан массив с элементами 1, 2, 3, 4, 5. С помощью цикла for найдите произведение элементов этого массива.
// let result = 1;
// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length; i++) {
//     result *= arr[i];
// }
// console.log(result);

// Дан массив с элементами 1, 2, 3, 4, 5. С помощью цикла for найдите сумму квадратов элементов этого массива.

// let result = 0;
// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length; i++) {
//     result += arr[i] ** 2;
// }
// console.log(result);

// Дан массив с элементами 2, 5, 9, 15, 1, 4. С помощью цикла for и оператора if выведите в консоль те элементы массива, которые больше 3-х, но меньше 10.
// let arr = [2, 5, 9, 15, 1, 4];
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i] > 3 && arr[i] < 10) {
//         console.log(arr[i]);
//     }
// }

// Дан массив с числами. Числа могут быть положительными и отрицательными. Найдите сумму положительных элементов массива.

// let arr = [-1, -3, 45, 23, 0, -34, 66];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i] > 0) {
//         result += arr[i];
//     }
// }
// console.log(result);

// Дан массив arr. Найдите среднее арифметическое его элементов (сумма делить на количество). Проверьте задачу на массиве с элементами 1, 2, 3, 4, 5.

// let arr = [1, 2, 3, 4, 5];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
//     result += arr[i];
// }
// console.log(result / arr.length);

// Дан массив числами, например: [10, 20, 30, 50, 235, 3000]. Выведите на экран только те числа из массива, которые начинаются на цифру 1, 2 или 5.
// let arr = [10, 20, 30, 50, 235, 3000];
// for (let i = 0; i < arr.length; i++) {
//     let first = String(arr[i])[0];
//     if (first == 1 || first == 2 || first == 5) {
//         console.log(arr[i]);
//     }
// }

// Дан массив с числами. Выведите элементы этого массива в обратном порядке.
// let arr = [34, 78, 909, 455, 1];
// console.log(arr[4]);
// console.log(arr[3]);
// console.log(arr[2]);
// console.log(arr[1]);
// console.log(arr[0]);

// Дан массив с числами. С помощью цикла выведите на экран все элементы, значение которых совпадает с их порядковым номером в массиве.
// let arr = [1, 2, 3, 67, 5];
// for (let i = 0; i < arr.length; i++) {
//     if (i + 1 == arr[i]) {
//         console.log(arr[i]);
//     }
// }

// Дан массив с числами. С помощью цикла for и функции document.write выведите каждый элемент массива с новой строки. Используйте для этого тег br.

// let arr = [1, 2, 3, 4, 5, 6];
// for (let i = 0; i < arr.length; i++) {
//     document.write(arr[i] + '<br>');
// }

// Дан массив с числами. С помощью цикла for и функции document.write выведите каждый элемент массива в отдельном абзаце.
// let arr = [1, 2, 3, 4, 5, 6];
// for (let i = 0; i < arr.length; i++) {
//     document.write('<p>' + arr[i] + '</p>');
// }

// Составьте массив дней недели. С помощью цикла for выведите все дни недели, а выходные дни выведите жирным.
// let week = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
// for (let i = 0; i < week.length; i++) {
//     if (week[i] == 'сб' || week[i] == 'вс') {
//         document.write('<b>' + week[i] +'</b>' + ' ');
//     } else {
//         document.write(week[i] + ' ');
//     }
// }

// Составьте массив дней недели. С помощью цикла for выведите все дни недели, а текущий день выведите курсивом. Номер текущего дня должен храниться в переменной day.
// let week = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
// let day = 4;
// for (let i = 0; i < week.length; i++) {
//     if (day == i + 1) {
//         document.write('<i>' + week[i] + '</i>' + ' ');
//     } else {
//         document.write(week[i] + ' ');
//     }
// }


// ====================  Перебор массива циклом for-of в JavaScript  =====================

// Дан массив с элементами 'a', 'b', 'c', 'd', 'e'. С помощью цикла for-of выведите все эти элементы на экран.
// let arr = ['a', 'b', 'c', 'd', 'e'];
// for (let elem of arr) {
//     console.log(elem);
// }

// Дан массив с элементами 1, 2, 3, 4, 5. С помощью цикла for-of найдите сумму элементов этого массива.
// let arr = [1, 2, 3, 4, 5];
// let result = 0;
// for (let elem of arr) {
//     result += elem;
// }
// console.log(result);

// Пусть у вас есть массив с названиями месяцев. С помощью цикла выведите на экран все месяцы из массива. Определите, каким циклом удобнее будет решить эту задачу: циклом for-of или обычным for со счетчиком.
// let month = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль'];
// for (let elem of month) {
//     console.log(elem);
// }

// Пусть у вас есть массив с названиями месяцев. Пусть в переменной month хранится номер текущего месяца, например, 10. С помощью цикла выведите все месяцы, а текущий месяц выведите курсивом. Определите, каким циклом удобнее будет решить эту задачу: циклом for-of или обычным for со счетчиком.

// let year = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь','декабрь'];
// let month = 10;
// for (let i = 0; i < year.length; i++) {
//     if (month == i + 1) {
//         document.write('<i>' + year[i] + '</i>' + ' ');
//     } else {
//         document.write(year[i] + ' ');
//     }
// }

// ================= Перебор объекта циклом for-in в JavaScript ==========================

// С помощью цикла for-in найдите сумму элементов этого объекта.
// let obj = {a: 1, b: 2, c: 3, d: 4, e: 5};
// let result = 0;
// for (let key in obj) {
//     result += obj[key];
// }
// console.log(result);


// ======================== Инструкция break в JavaScript =============================

// Дан массив с числами. Запустите цикл, который будет по очереди выводить элементы этого массива в консоль до тех пор, пока не встретится элемент со значением 0. После этого цикл должен завершить свою работу.

// let arr = [23, 34, 5, 6, 1, 0, 56, 77];
// for (let elem of arr) {
//     if (elem != 0) {
//         console.log(elem);
//     } else {
//         console.log(elem);
//         break;
//     }
// }

// Дан массив с числами. Найдите сумму элементов, расположенных от начала массива до первого отрицательного числа.
// let arr = [10, 44, 55, -23, 5, 7];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i] > 0) {
//         result += arr[i];
//     } else {
//         break;
//     }
// }
// console.log(result);

// Дан массив с числами. Найдите позицию первого числа 3 в этом массиве (считаем, что это число обязательно есть в массиве).

// let arr = [1, 2, 44, 4, 5, 423, 456, 3, 1, -213];
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i] == 3) {
//         console.log(i + 1 + ' - позиция числа 3 в этом массиве');
//         break;
//     }
// }

// Определите, сколько целых чисел, начиная с числа 1, нужно сложить, чтобы сумма получилась больше 100.
// let result = 1;
// for (let i = 0; i < 100; i++) {
//     if (result <= 100) {
//         result += i;
//     } else {
//         console.log(i - 1);
//         break;
//     }
// }


// ========================  Инструкция continue в JavaScript  ===========================

// let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];

// for (let elem of arr) {
// 	let result;
	
// 	if (elem % 2 == 0) {
// 		result = elem * elem;
// 	} else if (elem % 3 == 0) {
// 		result = elem * elem * elem;
// 	} else {
// 		continue; // перейдем на новую итерацию цикла
// 	}
	
// 	console.log(result); // выполнится, если делится на 2 или 3
// }


// ================================  Работа с флагами в JavaScript  ======================

// Проверьте, что в этом массиве есть элемент 'c'. Если есть - выведите 'да', а если нет - выведите 'нет'.
// let arr = ['a', 'b', 'v', 'd', 'e'];
// let flag = false;
// for (let elem of arr) {
//     if (elem == 'c') {
//         flag = true;
//         break;
//     }
// }
// if (flag === true) {
//     console.log('да');
// } else {
//     console.log('нет');
// }


// ====================== Нахождение простых чисел на JavaScript ========================

// Давайте напишем код, который будет проверять число на то, простое оно или нет. Простое число - это число, которое не делится ни на одно другое число (кроме как на 1 и на само себя - на это делятся все числа).
// let num = 43;
// let flag = true;
// for (let i = 2; i < num; i++) {
//     if (num % i == 0) {
//         flag = false;
//         break;
//     }
// }
// if (flag === true) {
//     console.log('простое');
// } else {
//     console.log('нет');
// }


// =================  Циклы без заданного количества итераций в JavaScript  ==============

// Дано число num с неким начальным значением. Умножайте его на 3 столько раз, пока результат умножения не станет больше 1000. Какое число получится? Посчитайте количество итераций, необходимых для этого.
// let num = 2;
// while (num < 1000) {
//     num *= 3;
// }
// console.log(num);


// for (var num = 2, i = 0; num < 1000; num *= 3, i++);
// console.log(num, i);


// ===================  Формирование строк через циклы в JavaScript  ======================

// С помощью цикла сформируйте строку, заполненную 5-тью нулями.
// let str = '';
// for (let i = 0; i < 5; i++) {
//     str += '0';
// }
// console.log(str);

// С помощью цикла сформируйте строку 123456789 и запишите ее в переменную str. Выведите значение этой переменной на экран.
// let str = '';
// for (let i = 1; i <= 9; i++) {
//     str += i;
// }
// console.log(str);

// С помощью цикла сформируйте строку 987654321 и запишите ее в переменную str. Выведите значение этой переменной на экран.
// let str = '';
// for (let i = 9; i >= 1; i--) {
//     str += i;
// }
// console.log(str);

// С помощью цикла сформируйте строку -1-2-3-4-5-6-7-8-9- и запишите ее в переменную str. Выведите значение этой переменной на экран.
// let str = '';
// for (let i = -1; i >= -9; i--) {
//     str = str + i;
// }
// console.log(str + '-');


// ===================  Цикл for и типы данных JavaScript  ===========================

// Переберите циклом числа от 10 до 1000 и выведите на экран те числа, сумма двух первых цифр которых равна 5.
// for (let i = 10; i <= 1000; i++) {
//     let str = String(i);
//     if (Number(str[0]) + Number(str[1]) == 5) {
//         console.log(i);
//     }
// }

// for (let i = 1; i <= 100; i++) {
// 	let str = String(i); // преобразуем число в строку
	
// 	if (str[0] == 1 || str[0] == 2) {
// 		console.log(i);
// 	}
// }


// ==============================  Типизация и сумма  =====================================

// let result = '';

// for (let i = 1; i <= 9; i++) {
// 	result += i;
// }

// console.log(result);

// Переберите циклом числа от 1 до 30 и сложите их как строки.
// let result = '';
// for (let i = 1; i <= 30; i++) {
//     result += i;
// }
// console.log(result);


// ========================  Вложенные циклы в JavaScript  ==============================

// С помощью двух вложенных циклов выведите на экран следующую строку: 111222333444555666777888999

// for (let i = 1; i <= 9; i++) {
//     // i = 1
//     for(let j = 1; j <= 3; j++) {
//         document.write(i);
//     }
// }

// С помощью двух вложенных циклов выведите на экран следующую строку: 11 12 13 21 22 23 31 32 33

// let str = '';
// for (let i = 1; i <= 3; i++) {
//     for (let j = 1; j <= 3; j++) {
//         str += String(i) + String(j) + ' ';
//     }
// }
// console.log(str);


// ===================  Заполнение массивов через цикл в JavaScript  ==================

// let arr = [];

// for (let i = 0; i <= 4; i++) {
// 	arr[i] = i + 1;
// }

// console.log(arr);

// С помощью цикла заполните массив числами от 1 до 100.

// let arr = [];
// for (i = 0; i <= 99; i++) {
//     arr[i] = i + 1;
// }
// console.log(arr);


// ==================== Заполнение значениями не по порядку ============================

// let arr = [];
// for (i = 1, j = 0; i <= 99; i += 2, j++) {
//     arr[j] = i;
// }
// console.log(arr);


// ========================  Изменение массива в цикле JavaScript ========================

// Дан массив с числами. Переберите этот массив циклом и возведите каждый элемент этого массива в квадрат.
// let arr = [1, 2, 3, 4, 5, 6, 7];
// for (let i = 0; i < arr.length; i++) {
//     arr[i] **= 2;
// }
// console.log(arr);

// Дан массив с числами. Переберите этот массив циклом и отнимите от каждого элемента единицу.
// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length; i++) {
//     arr[i]--;
// }
// console.log(arr);

// Дан массив с числами. Переберите этот массив циклом и прибавьте к каждому элементу 10.
// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length; i++) {
//     arr[i] += 10;
// }
// console.log(arr);


// ===================== Заполнение массива методом push в JavaScript ===================

// Объявите пустой массив, а затем заполните его числами от 1 до 10. Используйте для этого метод push.
// let arr = [];
// arr.push(1);
// arr.push(2);
// arr.push(3);
// arr.push(4);
// arr.push(5);
// arr.push(6);
// arr.push(7);
// arr.push(8);
// arr.push(9);
// arr.push(10);
// console.log(arr);

// Используя цикл и метод push заполните массив числами от 1 до 10.
// let arr = [];
// for (let i = 1; i <= 10; i++) {
//     arr.push(i);
// }
// console.log(arr);

// Используя цикл и метод push заполните массив 10-ю буквами x.
// let arr = [];
// for (let i = 0; i < 10; i++) {
//     arr.push('x');
// }
// console.log(arr);


// Дан массив с числами. Переберите его циклом и запишите в новый массив только положительные из чисел.

// let arr = [0, -7, 2, 3, 5, -30, 99];
// let result = [];
// for (let elem of arr) {
//     if (elem > 0) {
//         result.push(elem);
//     }
// }
// console.log(result);

// Дан следующий массив: let arr = ['a', 'b', 'c', 'd', 'e'] Описанным способом сделайте из него массив: let arr = ['e', 'd', 'c', 'b', 'a']
// let arr = ['a', 'b', 'c', 'd', 'e'];
// let result = [];
// for (i = arr.length -1; i >= 0; i--) {
//     result.push(arr[i]);
// }   
// console.log(result);

// let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
// let result = [];
// for (let elem of arr) {
// 	if (elem % 2 != 0) {
// 		result.push(elem);
// 	}
// }

// console.log(result);


// ========================  Заполнение объектов через цикл в JavaScript  =================

// Объявите пустой объект, а затем заполните его названиями дней недели в качестве ключей, и порядковыми номерами дней недели в качестве значений.
// let obj = {};
// obj['пн'] = 1;
// obj['вт'] = 2;
// obj['ср'] = 3;
// obj['чт'] = 4;
// obj['пт'] = 5;
// obj['сб'] = 6;
// obj['вс'] = 7;
// console.log(obj);

// Даны два массива: первый с названиями дней недели, а второй - с их порядковыми номерами:
// let arr1 = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
// let arr2 = [1, 2, 3, 4, 5, 6, 7];
// С помощью цикла создайте объект, ключами которого будут названия дней, а значениями - их номера.
// let arr1 = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
// let arr2 = [1, 2, 3, 4, 5, 6, 7];
// let obj = {};
// for (let i = 0; i < 7; i++) {
//     obj[arr1[i]] = arr2[i];
// }
// console.log(obj);

// Модифицируйте предыдущую задачу так, чтобы ключами стали номера дней, а значениями - их названия.
// let arr1 = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
// let arr2 = [1, 2, 3, 4, 5, 6, 7];
// let obj = {};
// for (let i = 0; i < 7; i++) {
//     obj[arr2[i]] = arr1[i];
// }
// console.log(obj);

// Дан объект:
// let obj = {'a': 12, 'b': 21, 'c': 13, 'd': 23, 'e': 17};
// Запишите в новый объект те элементы, значения которых расположены в промежутке от 10 до 20.
// let obj = {'a': 12, 'b': 21, 'c': 13, 'd': 23, 'e': 17};
// let result = {};
// for (let key in obj) {
//     if (obj[key] >= 10 && obj[key] <= 20) {
//         result[key] = obj[key];
//     }
// }
// console.log(result);

// Дан объект:
// let obj = {1: 'пн', 2: 'вт', 3: 'ср', 4: 'чт', 5: 'пт', 6: 'сб', 7: 'вс'};
// Запишите в новый объект дни недели, номера которых являются нечетными числами.
// let obj = {1: 'пн', 2: 'вт', 3: 'ср', 4: 'чт', 5: 'пт', 6: 'сб', 7: 'вс'};
// let result = {};
// for (let key in obj) {
//     if (key % 2 != 0) {
//         result[key] = obj[key];
//     }
// }
// console.log(result);

// Дан объект:
// let obj = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5};
// Переберите этот объект циклом и возведите каждый элемент этого объекта в квадрат.
// let obj = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5};
// for (let key in obj) {
//     obj[key] **= 2;
// }
// console.log(obj);

// Самостоятельно, не подсматривая в мой код, выполните переворот какого-нибудь объекта.

// let obj = {1: 'пн', 2: 'вт', 3: 'ср', 4: 'чт', 5: 'пт', 6: 'сб', 7: 'вс'};
// let result = {};
// for (let key in obj) {
//     result[obj[key]] = Number(key);
// }
// console.log(result);


//================= Практика на циклы с массивами и объектами JavaScript =================

// Дан следующий объект с работниками и их зарплатами:
// let obj = {
// 	employee1: 100,
// 	employee2: 200,
// 	employee3: 300,
// 	employee4: 400,
// 	employee5: 500,
// 	employee6: 600,
// 	employee7: 700
// };
// Увеличьте зарплату каждого работника на 10%.

// let obj = {
//     	employee1: 100,
//     	employee2: 200,
//     	employee3: 300,
//     	employee4: 400,
//     	employee5: 500,
//     	employee6: 600,
//     	employee7: 700
// };
// for (key in obj) {
//     obj[key] += obj[key] * 0.1;
// }
// console.log(obj);

// Модифицируйте предыдущую задачу так, чтобы зарплата увеличивалась только тем работникам, у которых она меньше или равна 400.
// let obj = {
//     	employee1: 100,
//     	employee2: 200,
//     	employee3: 300,
//     	employee4: 400,
//     	employee5: 500,
//     	employee6: 600,
//     	employee7: 700
// };
// for (key in obj) {
//     if (obj[key] <= 400) {
//         obj[key] += obj[key] * 0.1;
//     }
// }
// console.log(obj);

// Даны следующие массивы:
// let arr1 = [1, 2, 3, 4, 5];
// let arr2 = [6, 7, 8, 9, 10];
// С помощью этих массивов создайте новый объект, сделав его ключами элементы первого массива, а значениями - элементы второго.
// let arr1 = [1, 2, 3, 4, 5];
// let arr2 = [6, 7, 8, 9, 10];
// let result = {};
// for (let i = 0; i < arr1.length; i++) {
//     result[arr1[i]] = arr2[i]; 
// }
// console.log(result);

// Дан следующий объект:
// let obj = {1: 6, 2: 7, 3: 8, 4: 9, 5: 10};
// Найдите сумму ключей этого объекта и поделите ее на сумму значений.
// let obj = {1: 6, 2: 7, 3: 8, 4: 9, 5: 10};
// let summK = 0;
// let summEl = 0;
// for (let key in obj) {
//     summK += Number(key);
//     summEl += obj[key];
// }
// console.log(summK);
// console.log(summEl);
// console.log(summK / summEl);

// Дан следующий объект:
// let obj = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5};
// Запишите ключи этого объекта в один массив, а значения - в другой.
// let obj = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5};
// let arr1 = [];
// let arr2 = [];
// for (let key in obj) {
//     arr1.push(key);
//     arr2.push(obj[key]);
// }
// console.log(arr1);
// console.log(arr2);

// Запишите в новый массив элементы, значение которых начинается с цифры 1 или цифры 2.
// let obj = {
// 	1: 125,
// 	2: 225,
// 	3: 128,
// 	4: 356,
// 	5: 145,
// 	6: 281,
// 	7: 452,
// };
// let arr = []; 
// for (key in obj) {
//     let str = String(obj[key]);
//     if (str[0] == 1 || str[0] == 2) {
//         arr.push(obj[key]);
//     }
// }
// console.log(arr);

// Дан следующий массив:
// let arr = ['a', 'b', 'c', 'd', 'e'];
// Создайте из этого массива следующий объект:
// let arr = {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e'};

// let arr = ['a', 'b', 'c', 'd', 'e', 'p', 't'];
// let obj = {};
// for (let i = 0; i < arr.length; i++) {
//     obj[i + 1] = arr[i];
// }
// console.log(obj);

// Дан следующий массив:
// let arr = ['a', 'b', 'c', 'd', 'e'];
// создайте из этого массива следующий объект:
// let arr = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5};

// let arr = ['a', 'b', 'c', 'd', 'e'];
// let obj = {};
// for (let i = 0; i < arr.length; i++) {
//     obj[arr[i]] = i + 1;
// }
// console.log(obj);

// ==================== Подсчет количества элементов в массиве JavaScript ================

// Дан следующий массив:
// let arr = [1, 2, 3, 2, 4, 3, 5, 6, 3, 2, 3];
// Подсчитайте количество цифр 3 в этом массиве.
// let arr = [1, 2, 3, 2, 4, 3, 5, 6, 3, 2, 3];
// let counter = 0;
// for (let elem of arr) {
//     if (elem == 3) {
//         counter++;
//     }
// }
// console.log(counter);

// Модифицируйте предыдущую задачу так, чтобы в одном цикле одновременно подсчитывалось и количество троек, и количество двоек.
// let arr = [1, 2, 3, 2, 4, 3, 5, 6, 3, 2, 3];
// let counter = 0;
// let counter1 = 0
// for (let elem of arr) {
//     if (elem == 3) {
//         counter++;
//     } else if (elem == 2) {
//         counter1++
//     }
// }
// console.log(counter, counter1);

// Пусть у нас опять дан наш массив:
// let arr = ['a', 'b', 'c', 'a', 'a', 'b'];
// Давайте подсчитаем сколько каких элементов есть в этом массиве и представим результат в виде объекта вот такого объекта:
// {a: 3, b: 2, c: 1}
// let arr = ['a', 'b', 'c', 'a', 'a', 'b'];
// let obj = {};
// for (let elem of arr) {
//     if (obj[elem] === undefined) {
//         obj[elem] = 1;
//     } else {
//         obj[elem]++;
//     }
// }
// console.log(obj);


//================= Получение соседей элементов в массиве JavaScript =====================

// Дан массив с числами. Переберите его циклом и в каждой итерации цикла выведите следующий элемент массива.
// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length - 1; i++) {
//     console.log(arr[i + 1]);
// }

// let arr = [1, 2, 3, 4, 5];

// for (let i = 1; i < arr.length; i++) {
// 	console.log(arr[i - 1] + arr[i]);
// }

// let arr = [1, 2, 3, 4, 5];

// for (let i = 0; i < arr.length; i++) {
// 	console.log(arr[i + 1]);
// }

// Модифицируйте предыдущую задачу так, чтобы в каждой итерации цикла выводилась сумма текущего и следующего элемента массива.
// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length - 1; i++) {
//     console.log(arr[i] + arr[i + 1]);
// }

// Дан массив с числами. Переберите его циклом и в каждой итерации цикла выведите два предыдущих элемента массива.
// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i - 2] != undefined) {
//         console.log(arr[i - 2], arr[i - 1]);
//     }
// }

// Модифицируйте предыдущую задачу так, чтобы в каждой итерации цикла выводилась сумма двух предыдущих элементов и текущего элемента массива.

// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i - 2] != undefined) {
//         console.log(arr[i - 2] + arr[i - 1] + arr[i]);
//     }
// }

// Дан массив с числами. Переберите его циклом и в каждой итерации цикла выведите сумму предыдущего, текущего и следующего элементов массива.
// let arr = [1, 2, 3, 4, 5];
// for (let i = 0; i < arr.length; i++) {
//     if ((arr[i - 1] != undefined) && (arr[i + 1] != undefined)) {
//         console.log(arr[i] + arr[i - 1] + arr[i + 1] );
//     }
// }


//====================== Получение чисел Фибоначчи в JavaScript ===========================

// Разберите мое решение описанной задачи, а затем самостоятельно, не подсматривая в мой код, решите эту задачу.

// let one = 0;
// let two = 1;
// for (i = 1; i <= 10; i++) {
//     let current = one + two;
//     one = two;
//     two = current;
//     console.log(current);
// } 

// Решите задачу на нахождение ряда чисел, каждое из которых равно сумме трех предыдущих, а первые три числа равны 0, 1 и 2.

// let one = 0,
//     two = 1,
//     three = 2;
// for (let i = 1;  i <= 10; i++) {
//     let current = one + two + three;
//     one = two;
//     two = three;
//     three = current;
// console.log(current);
// }

//=========================== Вывод пирамидок на JavaScript ===============================

// Выведите на экран следующую пирамидку:
// xx
// xxxx
// xxxxxx
// xxxxxxxx
// xxxxxxxxxx

// let str = '';
// for (let i = 0; i < 5; i++) {
//     str = str + 'xx';
//     document.write(str + '<br>');
// }

// Выведите на экран следующую пирамидку:
// 1
// 333
// 55555
// 7777777
// 999999999

// for (let i = 1; i <= 9; i++) {
//     if (i % 2 != 0) {
//         for(let j = 1; j <= i; j++) {
//             document.write(i)
//         }
//     document.write('<br>');
//     }
// }

// Выведите на экран следующую пирамидку:
// xxxxxxxxxx
// xxxxxxxx
// xxxxxx
// xxxx
// xx

// for (let i = 5; i >= 1; i--) {
//     let str = '';
//     for (let j = 0; j < i; j++) {
//         str = str + 'xx';
//     }
//     document.write(str + '<br>');
// }

// Выведите на экран следующую пирамидку:
// 999999999
// 88888888
// 7777777
// 666666
// 55555
// 4444
// 333
// 22
// 1

// for (let i = 9; i >= 1; i--) {
//     for (let j = 0; j < i; j++) {
//         document.write(i);
//     }
//     document.write('<br>')
// }


//================ Заполнение массивов с накоплением строки в JavaScript ==================

// С помощью цикла сформируйте следующий массив:
// ['xx', 'xxxx', 'xxxxxx', 'xxxxxxxx', 'xxxxxxxxxx']
// let arr = [];
// let str = '';
// for (i = 0; i < 5; i++) {
//     str = str + 'xx';
//     arr.push(str);
// }
// console.log(arr);

// С помощью цикла сформируйте следующий массив:
// ['11111', '22222', '33333', '44444', '55555']
// let arr = [];
// for (let i = 1; i <= 5; i++) {
//     let str = '';
//     for (let j = 0; j < 5; j++) {
//         str = str + i;
//     }
//     arr.push(str);
// }
// console.log(arr);

//=========================== Отработка циклов JavaScript ===============================

// Выведите с помощью цикла столбец чисел от 1 до 100.
// for (i = 1; i <= 100; i++) {
//     console.log(i);
// }

// Выведите с помощью цикла столбец чисел от 100 до 1.
// for (i = 100; i >= 1; i--) {
//     console.log(i);
// }

// Выведите с помощью цикла столбец четных чисел от 1 до 100.
// for (i = 1; i <= 100; i++) {
//     if (i % 2 == 0) {
//         console.log(i);
//     }
// }

// Заполните массив 10-ю иксами с помощью цикла.
// let arr = [];
// for (i = 0; i < 10; i++) {
//     arr.push('x');
// }
// console.log(arr);

// Заполните массив числами от 1 до 10 с помощью цикла.
// let arr = [];
// for (i = 0; i < 10; i++) {
//     arr.push(i + 1);
// }
// console.log(arr);

// Дан массив с числами. С помощью цикла выведите только те элементы массива, которые больше нуля и меньше 10-ти.
// let arr = [2, 34, 412, 0, 1, 3, 7];
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i] > 0 && arr[i] < 10) {
//         console.log(arr[i]);
//     }
// }

// Дан массив с числами. С помощью цикла проверьте, что в нем есть элемент со значением 5.
// let arr = [11, 34, 5, 22, 10];
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i] == 5) {
//         console.log('Yes');
//         break;
//     }
// }

// Дан массив с числами. С помощью цикла найдите сумму элементов этого массива.
// let arr = [11, 34, 5, 22, 10];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
//     result += arr[i];
// }
// console.log(result);

// Дан массив с числами. С помощью цикла найдите сумму квадратов элементов этого массива.
// let arr = [11, 34, 5, 22, 10];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
//     result += arr[i] ** 2;
// }
// console.log(result);

// Дан массив с числами. Найдите среднее арифметическое его элементов (сумма элементов, делить на количество).
// let arr = [11, 34, 5, 0, 10];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
//     result += arr[i] / arr.length;  
// }
// console.log(result);

// Напишите скрипт, который будет находить факториал числа. Факториал (обозначается !) - это произведение (умножение) всех целых чисел, меньше данного, и его самого. Например, 4! = 1*2*3*4.

// let num = 4;
// let result = 1;
// for (let i = 1; i <= num; i++) {
//     result *= i;
// }
// console.log('факториал ' + num + ' = ' + result);


//====================== Многомерные массивы в JavaScript ================================

// Выведите с его помощью элементы с текстом 'l', 'e', 'g' и 'a'.
// let arr = [
// 	['a', 'b', 'c'],
// 	['d', 'e', 'f'],
// 	['g', 'h', 'i'],
// 	['j', 'k', 'l'],
// ];
// console.log(arr[3][2], arr[1][1], arr[2][0], arr[0][0]);

// Найдите сумму всех его элементов.
// let arr = [[1, 2], [3, 4], [5, 6]];
// let result = arr[0][0] + arr[0][1] + arr[1][0] + arr[1][1] + arr[2][0] + arr[2][1];
// console.log(result);

// Найдите сумму всех элементов приведенного массива.
// let arr = [[[1, 2],[3, 4],],[[5, 6],[7, 8],],];
// let result = arr[0][0][0] + arr[0][0][1] + arr[0][1][0] + arr[0][1][1] + arr[1][0][0] + arr[1][0][1] + arr[1][1][0] + arr[1][1][1];
// console.log(result);


//==================== Перебор многомерных массивов в JavaScript ==========================

// С помощью вложенных циклов найдите сумму элементов этого массива.
// let arr = [[1, 2, 3], [4, 5], [6]];
// let result = 0;
// for (let subArr of arr) {
// 	for (let elem of subArr) {
// 		result += elem;
// 	}
// }
// console.log(result);

// С помощью вложенных циклов найдите сумму элементов этого массива.
// let arr = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]];
// let result = 0;
// for (let subArr of arr) {
// 	for (let subSubArr of subArr) {
// 		for (let elem of subSubArr) {
// 			result += elem;
// 		}
// 	}
// }
// console.log(result);

// Решите предыдущие две задачи через цикл for.
// let arr = [[1, 2, 3], [4, 5], [6]];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
// 	for (let j = 0; j < arr[i].length; j++) {
// 		result += arr[i][j];
// 	}
// }
// console.log(result);

// let arr = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
// 	for (let j = 0; j < arr[i].length; j++) {
// 		for (let k = 0; k < arr[i][j].length; k++) {
// 			result += arr[i][j][k];
// 		}
// 	}
// }
// console.log(result);

//==================== Заполнение многомерных массивов JavaScript ========================

// Сформируйте с помощью двух вложенных циклов следующий массив:
// [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]

// let arr = [];
// for (let i = 0; i < 3; i++) {
// 	arr[i] = [];
// 	for (let j = 0; j < 5; j++) {
// 		arr[i].push(j + 1);
// 	}
// }
// console.log(arr);

// Сформируйте с помощью двух вложенных циклов следующий массив:
// [['x', 'x', 'x', 'x'], ['x', 'x', 'x', 'x'], ['x', 'x', 'x', 'x']]
// let arr = [];
// for (let i = 0; i < 3; i++) {
// 	arr[i] = [];
// 	for (let j = 0; j < 4; j++) {
// 		arr[i][j] = 'x';
// 	}
// }
// console.log(arr);

// Сформируйте с помощью трех вложенных циклов следующий массив:
// [
// 	[
// 		[1, 2, 3, 4, 5],
// 		[1, 2, 3, 4, 5],
// 	],
// 	[
// 		[1, 2, 3, 4, 5],
// 		[1, 2, 3, 4, 5],
// 	],
// 	[
// 		[1, 2, 3, 4, 5],
// 		[1, 2, 3, 4, 5],
// 	],
// ]

// let arr = [];
// for (let i = 0; i < 3; i++) {
// 	arr[i] = [];
// 	for (let j = 0; j < 2; j++) {
// 		arr[i][j]= [];
// 		for (let k = 0; k < 5; k++) {
// 			arr[i][j].push(k + 1);
// 		}
// 	}
// }
// console.log(arr);

// let arr = [];

// for (let i = 0; i < 3; i++) {
// 	arr[i] = [];
	
// 	for (let j = 1; j <= 5; j++) {
// 		arr[i].push(j);
// 	}
// }

// console.log(arr);

// Сформируйте с помощью двух вложенных циклов следующий массив:
// [[1, 2], [3, 4], [5, 6], [7, 8]]
// let arr = [];
// for (let i = 0, k = 1; i < 4; i++) {
// 	arr[i] = [];
// 	for (let j = 0; j < 2; j++, k++) {
// 		arr[i][j] = k;
// 	}
// }
// console.log(arr);

// Сформируйте с помощью двух вложенных циклов следующий массив:
// [[2, 4, 6], [8, 10, 12], [14, 16, 18], [20, 22, 24]]
// let arr = [];
// for (i = 0, k = 1; i < 4; i++) {
// 	arr[i] = [];
// 	for (j = 0; j < 3; j++, ++k) {
// 		arr[i][j] = k * 2;
// 	}
// }
// console.log(arr);

// Сформируйте с помощью трех вложенных циклов следующий трехмерный массив:
// [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]

// let arr = [];
// for (let i = 0, k = 1; i < 2; i++) {
// 	arr[i] = [];
// 	for (let j = 0; j < 2; j++) {
// 		arr[i][j] = [];
// 		for (let s = 0; s < 2; s++, k++){
// 			arr[i][j].push(k);
// 		}
// 	}
// }
// console.log(arr);

// Автор следующего кода хотел сделать массив [[1, 2, 3], [4, 5, 6], [7, 8, 9]]:
// let arr = [];
// for (let i = 0; i < 3; i++) {
// 	arr[i] = [];
// 	for (let j = 0; j < 3; j++) {
// 		arr[i][j] = k;
// 		k++;
// 	}
// }
// console.log(arr);
// Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
// let arr = [];
// for (let i = 0, k = 1; i < 3; i++) {
// 	arr[i] = [];
// 	for (let j = 0; j < 3; j++) {
// 		arr[i][j] = k;
// 		k++;
// 	}
// }
// console.log(arr);


//========================= Многомерные объекты в JavaScript ==============================

// Найдите сумму элементов приведенного объекта.
// let obj = {
// 	key1: {
// 		key1: 1,
// 		key2: 2,
// 		key3: 3,
// 	},
// 	key2: {
// 		key1: 4,
// 		key2: 5,
// 		key3: 6,
// 	},
// 	key3: {
// 		key1: 7,
// 		key2: 8,
// 		key3: 9,
// 	},
// }
// let result = 0;
// for (let key in obj) {
// 	let subObj = obj[key];
// 	for (let elem in subObj) {
// 		result += subObj[elem];
// 	}
// }
// console.log(result);

// Выведите на экран элемент 'b2' и элемент 'c1'.
// let obj = {
// 	1: {
// 		1: 'a1',
// 		2: 'a2',
// 		3: 'a3',
// 	},
// 	2: {
// 		1: 'b1',
// 		2: 'b2',
// 		3: 'b3',
// 	},
// 	3: {
// 		1: 'c1',
// 		2: 'c2',
// 		3: 'c3',
// 	},
// }
// for (let key in obj) {
// 	let subObj = obj[key];
// 	for (subKey in subObj) {
// 		if (subObj[subKey] == 'b2' || subObj[subKey] == 'c1') {
// 			console.log(subObj[subKey]);
// 		}
// 	}
// }

// Найдите сумму всех элементов-чисел.
// let obj = {
// 	key1: {
// 		a: 1, b: 2, c: {
// 			d: 3,
// 			e: 4,
// 		}, f: 5,
// 	},
// 	key2: {
// 		g: 6, h: 7,
// 	},
// }
// ?????

//===================== Перебор многомерных объектов в JavaScript ========================

// Используя циклы, найдите сумму элементов этого объекта.
// let obj = {
// 	1: {
// 		1: 11,
// 		2: 12,
// 		3: 13,
// 	},
// 	2: {
// 		1: 21,
// 		2: 22,
// 		3: 23,
// 	},
// 	3: {
// 		1: 24,
// 		2: 25,
// 		3: 26,
// 	}
// }
// let result = 0;
// for (let key in obj) {
// 	let subObj = obj[key];
// 	for (let subKey in subObj) {
// 		result += subObj[subKey];
// 	}
// }
// console.log(result);


//============== Ключи из переменных в многомерных структурах JavaScript =================

// let months = {
// 	'ru': [
// 		'январь',
// 		'февраль',
// 		'март',
// 		'апрель',
// 		'май',
// 		'июнь',
// 		'июль',
// 		'август',
// 		'сентябрь',
// 		'октябрь',
// 		'ноябрь',
// 		'декабрь',
// 	],
// 	'en': [
// 		'january',
// 		'february',
// 		'march',
// 		'april',
// 		'may',
// 		'june',
// 		'july',
// 		'august',
// 		'september',
// 		'october',
// 		'november',
// 		'december',
// 	],
// };
// let lang = 'ru'; 
// let month = 5;   
// console.log(months[lang][month]);

// Пусть даны также 3 переменные, содержащие год, месяц и день. Выведите дело, соответствующее значениям переменных.
// let affairs = {
// 	'2018': {
// 		11: {
// 			29: ['дело111', 'дело112', 'дело113'],
// 			30: ['дело121', 'дело122', 'дело123'],
// 		},
// 		12: {
// 			30: ['дело211', 'дело212', 'дело213'],
// 			31: ['дело221', 'дело222', 'дело223'],
// 		},
// 	},
// 	'2019': {
// 		12: {
// 			29: ['дело311', 'дело312', 'дело313'],
// 			30: ['дело321', 'дело322', 'дело323'],
// 			31: ['дело331', 'дело332', 'дело333'],
// 		}
// 	},
// }
// let year = '2019';
// let month = 12;
// let day = 30;
// console.log(affairs[year][month][day]);

//================= Многомерные массивы и объекты в JavaScript ==========================

// Выведите на экран сумму зарплат первого и второго работников.
// let employees = [
// 	{
// 		name: 'name1',
// 		salary: 300,
// 	},
// 	{
// 		name: 'name2',
// 		salary: 400,
// 	},
// 	{
// 		name: 'name3',
// 		salary: 500,
// 	},
// ];

// let result = employees[0]['salary'] + employees[1]['salary'];
// console.log(result);

// Выведите на экран элемент 'Вася' и элемент 'Лена'.
// let students = {
// 	'boys':  ['Коля', 'Вася', 'Петя'],
// 	'girls': ['Даша', 'Маша', 'Лена'],
// };
// console.log(students['boys'][1] + ' и ' + students['girls'][2]);


//=================== Перебор многомерных комбинаций в JavaScript =========================

// Выведите на экран данные каждого работника в формате имя - зарплата.
// let employees = [
// 	{
// 		name: 'name1',
// 		salary: 300,
// 	},
// 	{
// 		name: 'name2',
// 		salary: 400,
// 	},
// 	{
// 		name: 'name3',
// 		salary: 500,
// 	},
// ];
// for(let employee of employees) {
// 	document.write(employee.name + ' - ' + employee.salary + '<br>');
// }

// Выведите на экран сумму зарплат всех работников.
// let employees = [
// 	{
// 		name: 'name1',
// 		salary: 300,
// 	},
// 	{
// 		name: 'name2',
// 		salary: 400,
// 	},
// 	{
// 		name: 'name3',
// 		salary: 500,
// 	},
// ];
// let result = 0;
// for (let employee of employees) {
// 	result += employee.salary;
// }
// console.log(result);

// Выведите на экран сумму зарплат тех работников, возраст которых равен или более 30 лет.
// let employees = [
// 	{
// 		name: 'name1',
// 		salary: 300,
// 		age: 28,
// 	},
// 	{
// 		name: 'name2',
// 		salary: 400,
// 		age: 29,
// 	},
// 	{
// 		name: 'name3',
// 		salary: 500,
// 		age: 30,
// 	},
// 	{
// 		name: 'name4',
// 		salary: 600,
// 		age: 31,
// 	},
// 	{
// 		name: 'name5',
// 		salary: 700,
// 		age: 32,
// 	},
// ];
// let result = 0;
// for (let employee of employees) {
// 	if (employee.age >= 30) {
// 		result += employee.salary;
// 	}
// }
// console.log(result);

// Выведите на экран имена и зарплаты неуволенных работников.
// let employees = [
// 	{
// 		name: 'name1',
// 		salary: 300,
// 		dismissed: false,
// 	},
// 	{
// 		name: 'name2',
// 		salary: 400,
// 		dismissed: true,
// 	},
// 	{
// 		name: 'name3',
// 		salary: 500,
// 		dismissed: false,
// 	},
// 	{
// 		name: 'name4',
// 		salary: 600,
// 		dismissed: true,
// 	},
// 	{
// 		name: 'name5',
// 		salary: 700,
// 		dismissed: false,
// 	},
// ];
// for (let employee of employees) {
// 	if (employee.dismissed != true) {
// 		document.write(employee.name + ' : ' + employee.salary + '<br>');
// 	}
// }

// С помощью вложенных циклов выведите на экран все строки с данными.
// let data = {
// 	1: [
// 		'data11',
// 		'data12',
// 		'data13',
// 	],
// 	2: [
// 		'data21',
// 		'data22',
// 		'data23',
// 	],
// 	3: [
// 		'data31',
// 		'data32',
// 		'data33',
// 		'data34',
// 		'data35',
// 	],
// 	4: [
// 		'data41',
// 		'data42',
// 	],
// };

// for (let key in data) {
// 	for (let num of data[key]) {
// 		console.log(num);
// 	}
// }

// Количество объектов в массиве и количество элементов в объекте может быть произвольным.
// С помощью вложенных циклов выведите на экран все строки с данными.
// let data = [
// 	{
// 		1: 'data11',
// 		2: 'data12',
// 		3: 'data13',
// 		4: 'data14',
// 	},
// 	{
// 		1: 'data21',
// 		2: 'data22',
// 		3: 'data33',
// 	},
// 	{
// 		1: 'data31',
// 		2: 'data32',
// 	},
// ];
// for (let elem of data) {
// 	for (let key in elem) {
// 		console.log(elem[key]);
// 	}
// }

// С помощью вложенных циклов выведите на экран все строки с данными.
// let data = [
// 	{
// 		1: [
// 			'data111',
// 			'data112',
// 			'data113',
// 		],
// 		2: [
// 			'data121',
// 			'data122',
// 			'data123',
// 		],
// 	},
// 	{
// 		1: [
// 			'data211',
// 			'data212',
// 			'data213',
// 		],
// 		2: [
// 			'data221',
// 			'data222',
// 			'data223',
// 			'data224',
// 		],
// 		3: [
// 			'data231',
// 			'data232',
// 			'data233',
// 			'data234',
// 			'data235',
// 		],
// 	},
// 	{
// 		1: [
// 			'data411',
// 			'data412',
// 			'data413',
// 		],
// 		2: [
// 			'data421',
// 		],
// 	},
// ];
// for (let elem of data) {
// 	for (let key in elem) {
// 		for (let num of elem[key]) {
// 			console.log(num);
// 		}
// 	}
// }

 
//========================= Математические методы в JavaScript ===========================

// Возведите 2 в 10 степень.
// console.log(Math.pow(2, 10));
// console.log(2 ** 10);

// Найдите квадратный корень из 245.
// console.log(Math.sqrt(245));

// Дан массив с элементами 4, 2, 5, 19, 13, 0, 10. Найдите квадратный корень из суммы кубов его элементов. Для решения воспользуйтесь циклом for.
// let arr = [4, 2, 5, 19, 13, 0, 10];
// let result = 0;
// for (i = 0; i < arr.length; i++) {
// 	result += Math.pow(arr[i], 3);
// }
// console.log(Math.sqrt(result));

// Найдите квадратный корень из 379. Результат округлите до целых, до десятых, до сотых.
// console.log(Math.sqrt(379).toFixed());
// console.log(Math.sqrt(379).toFixed(1));
// console.log(Math.sqrt(379).toFixed(2));

// Найдите квадратный корень из 587. Округлите результат в большую и меньшую стороны, запишите результаты округления в объект с ключами 'floor' и 'ceil'.
// let obj = {};
// obj.ceil = Math.ceil(Math.sqrt(587));
// obj.floor = Math.floor(Math.sqrt(587));
// console.log(obj);

// Даны числа 4, -2, 5, 19, -130, 0, 10. Найдите минимальное и максимальное число.
// console.log(Math.max(4, -2, 5, 19, -130, 0, 10));
// console.log(Math.min(4, -2, 5, 19, -130, 0, 10));

// // Выведите на экран случайное целое число от 1 до 100.
// function getRandomInt(min, max) {
// 	return Math.floor(Math.random() * (max - min + 1)) + min;
// }
// console.log(getRandomInt(1, 100));

// // С помощью цикла заполните массив 10-ю случайными целыми числами.
// function getRandomInt(min, max) {
// 	return Math.floor(Math.random() * (max - min + 1)) + min;
// }
// let arr = [];
// for (i = 0; i < 10; i++) {
// 	arr[i] = getRandomInt(1, 1000);
// }
// console.log(arr);

// // Даны переменные a и b. Найдите найдите модуль разности a и b. Проверьте работу скрипта самостоятельно для различных a и b.
// let a = -32,
// 	b = -393;
// console.log(Math.abs(a - b));


//=========================== Строковые методы JavaScript ================================

// // Дана строка 'js'. Сделайте из нее строку 'JS'.
// let str = 'js';
// console.log(str.toUpperCase());

// // Дана строка 'JS'. Сделайте из нее строку 'js'.
// let str = 'JS';
// console.log(str.toLowerCase());

// Дана строка 'я учу javascript!'. Вырежьте из нее слово 'учу' и слово 'javascript' тремя разными способами (через substr, substring, slice).
// let str = 'я учу javascript!';
// let sub1 = str.substr(2, 3);
// let sub2 = str.substr(6, 10);
// console.log(sub1, sub2);

// let str = 'я учу javascript!';
// let sub1 = str.substring(2, 5);
// let sub2 = str.substring(6, 16);
// console.log(sub1, sub2);

// let str = 'я учу javascript!';
// let sub1 = str.slice(2, 5);
// let sub2 = str.slice(6, -1);
// console.log(sub1, sub2);

// Дана строка 'abcde'. Определите позицию буквы 'c' в этой строке.
// let str = 'abcde';
// console.log(str.indexOf('c'));

// Дана строка. Проверьте, есть ли в этой строке символ 'a'.
// let str = 'abcde';
// if (str.indexOf('a') != -1) {
// 	console.log('есть');
// } else {
// 	console.log('нет');
// }

// Дана строка. Проверьте, начинается ли эта строка с символа 'a'.
// let str = 'cabcde';
// if (str.indexOf('a') == 0) {
// 	console.log('начинается');
// } else {
// 	console.log('нет');


// Дана строка. Проверьте, заканчивается ли эта строка на символ 'a'.
// let str = 'abcdea';
// if(str.lastIndexOf('a') == str.length - 1) {
// 	console.log('да');
// } else {
// 	console.log('нет');
// }

// // Дана строка. Проверьте, начинается ли эта строка на http://.
// let str = 'http://abcde';
// if (str.slice(0, 7) == 'http://') {
// 	console.log('да');
// } else {
// 	console.log('нет');
// }

// Дана строка. Проверьте, заканчивается ли эта строка на .html.
// let str = 'a.html';
// let a = '.html'
// if (str.lastIndexOf(a) == str.length - a.length) {
// 	console.log('yes');
// } else {
// 	console.log('no');
// }

// Дана строка. Проверьте, начинается ли эта строка на http://
// let str = 'http://asderf';
// console.log(str.startsWith('http://'));

// Дана строка. Проверьте, заканчивается ли эта строка на .html.
// let str = 'dqdwqdqw.htl';
// console.log(str.endsWith('.html'));

// Дана строка '1-2-3-4-5'. С помощью метода split запишите каждое число этой строки в отдельный элемент массива.
// let str = '1-2-3-4-5';
// let arr = str.split('-');
// console.log(arr);

// Дана строка '12345'. С помощью метода split запишите каждый символ этой строки в отдельный элемент массива.
// let str = '12345';
// let arr = str.split('');
// console.log(arr);

// С помощью метода join слейте его в строку '1-2-3-4-5'.
// let arr = [1, 2, 3, 4, 5];
// let str = arr.join('-');
// console.log(str);


//======================== Методы для массивов в JavaScript =============================

// Дан массив [1, 2, 3]. Добавьте ему в конец элементы 4, 5, 6.
// let arr = [1, 2, 3];
// arr.push(4, 5, 6);
// console.log(arr);

// Дан массив [1, 2, 3]. Добавьте ему в начало элементы 4, 5, 6.
// let arr = [1, 2, 3];
// arr.unshift(4, 5, 6);
// console.log(arr);

// Дан массив ['js', 'css', 'jq']. Выведите на экран первый элемент.
// let arr = ['js', 'css', 'jq'];
// let elem = arr.shift();
// console.log(elem);

// Дан массив ['js', 'css', 'jq']. Выведите на экран последний элемент.
// let arr = ['js', 'css', 'jq'];
// let elem = arr.pop();
// console.log(elem);

// Дан массив [1, 2, 3, 4, 5]. С помощью метода slice запишите в новый элементы [1, 2, 3].
// let arr = [1, 2, 3, 4, 5];
// let newArr = arr.slice(0, 3);
// console.log(newArr);

// Дан массив [1, 2, 3, 4, 5]. С помощью метода slice запишите в новый элементы [4, 5].
// let arr = [1, 2, 3, 4, 5];
// let newArr = arr.slice(3);
// console.log(newArr);

// Дан массив [1, 2, 3, 4, 5]. С помощью метода splice преобразуйте массив в [1, 4, 5].
// let arr = [1, 2, 3, 4, 5];
// arr.splice(1, 2);
// console.log(arr);

// Дан массив [1, 2, 3, 4, 5]. С помощью метода splice запишите в новый массив элементы [2, 3, 4].
// let arr = [1, 2, 3, 4, 5];
// let sub = arr.splice(1, 3);
// console.log(sub);

// Дан массив [1, 2, 3, 4, 5]. С помощью метода splice сделайте из него массив [1, 2, 3, 'a', 'b', 'c', 4, 5].
// let arr = [1, 2, 3, 4, 5];
// arr.splice(3, 0, 'a', 'b', 'c');
// alert(arr);

// Дан массив [1, 2, 3, 4, 5]. С помощью метода splice сделайте из него массив [1, 'a', 'b', 2, 3, 4, 'c', 5, 'e'].
// let arr = [1, 2, 3, 4, 5];
// arr.splice(1, 0, 'a', 'b');
// arr.splice(6, 0, 'c');
// arr.splice(8, 0, 'd');
// console.log(arr);

// Дан массив с числами. Проверьте, есть ли в этом массиве число 3.
// let arr = [1, 2, 3, 4, 5];
// console.log(arr.indexOf(3));


//===================== Практика на использования изученных методов ========================

// Преобразуйте последнюю букву строки в верхний регистр.
// let str = 'london';
// let result = str.slice(0, 5) + str.slice(5).toUpperCase();
// console.log(result);

// Преобразуйте первые 2 буквы строки в верхний регистр.
// let str = 'london';
// let result = str.slice(0, 2).toUpperCase() + str.slice(2);
// console.log(result);

// Преобразуйте первую букву строки в нижний регистр.
// let str = 'London';
// let result = str.slice(0, 1).toLocaleLowerCase() + str.slice(1);
// console.log(result);

// Давайте напишем код, который преобразует первую букву каждого слова в верхний регистр.
// let str = 'word1 word2 word3';
// let words = str.split(' ');
// for (i = 0; i < words.length; i++) {
//     words[i] = words[i].slice(0, 1).toUpperCase() + words[i].slice(1);
// }
// let result = words.join(' ');
// console.log(result);

// Преобразуйте строку 'var_test_text' в 'VarTestText'.
// Написанный код должен работать для любых строк такого типа (то есть для строк, в которых слова разделены символов подчеркивания).
// let str = 'var_test_text';
// let arr = str.split('_')
// for (i = 0; i < arr.length; i++) {
//     arr[i] = arr[i].slice(0, 1).toUpperCase() + arr[i].slice(1);
// }
// let result = arr.join('');
// console.log(result);

// Модифицируйте предыдущую задачу так, чтобы первая буква новой строки была в нижнем регистре.
// let str = 'var_test_text';
// let arr = str.split('_')
// for (i = 0; i < arr.length; i++) {
//     arr[i] = arr[i].slice(0, 1)+ arr[i].slice(1);
// }
// let result = arr.join('');
// console.log(result);

// Дана строка со словами. Напишите скрипт, который переставит слова в строке в обратном порядке.
// let str = 'Один Два Три';
// let result = str.split(' ').reverse().join(' ');
// console.log(result);


//=============== Основы работы с пользовательскими функциями в JavaScript ================

// Сделайте функцию, выводящую на экран ваше имя.
// function func() {
//     alert('Egor');
// }
// func();

// Сделайте функцию, выводящую на экран сумму чисел от 1 до 100.
// let result = 0;
// function func() {
//     for (let i = 1; i <= 100; i++) {
//         result += i;
//     }
//     alert(result);   
// }
// func();


//====================== Параметры функций в JavaScript ==================================

// Сделайте функцию, которая параметром принимает число и выводит на экран куб этого числа.
// function func(num) {
//     alert(num ** 3);
// }
// func(10);
// func(25);
// func(33);

// Сделайте функцию, которая параметром принимает число и проверяет, положительное это число или отрицательное. В первом случае пусть функция выводит на экран текст '+++', а во втором '---'.
// function func(num) {
//     if (num > 0) {
//         alert('+++');
//     } else if (num < 0) {
//         alert('---');
//     } else {
//         alert(0);
//     }
// }
// func(90);
// func(-12);
// func(0);

// Сделайте функцию, которая параметрами принимает 3 числа и выводит на экран сумму этих чисел.
// function func(num1, num2, num3) {
//     alert(num1 + num2 + num3) 
// }
// func(12, 33, 55);

// Сделайте функцию func, которая параметром будет принимать 3 числа и выводить на экран их сумму.
// Пусть даны 3 переменные с числами:
// let param1 = 1;
// let param2 = 2;
// let param3 = 3;
// С помощью созданной вами функции выведите на экран сумму значений эти переменных.

// function func(num1, num2, num3) {
//         alert(num1 + num2 + num3) 
//     }
// let param1 = 1;
// let param2 = 2;
// let param3 = 3;
// func(param1, param2, param3);

// function func(name1 = 'Аноним', age1 = 'неизвестен') {
// 	alert('ваше имя: ' + name1 + ' возраст: ' + age1);
// }
// func('Вася');


//============================== Инструкция return в JavaScript ===========================

// Сделайте функцию, которая параметром принимает число, а возвращает куб этого числа. С помощью этой функции найдите куб числа 3 и запишите его в переменную result.
// function func(num) {
//     return num ** 3;
// }
// let result = func(3);
// alert(result);  

// Сделайте функцию, которая параметром принимает число, а возвращает квадратный корень из этого числа.
// С помощью этой функции найдите корень числа 3, затем найдите корень числа 4. Просуммируйте полученные результаты и выведите их на экран.

// function funk(num) {
//     return Math.sqrt(num);
// }
// let result = funk(3) + funk(4);
// alert(result);

// Пусть у вас есть функция, возвращающая квадратный корень из числа, и функция, округляющая дробь до трех знаков в дробной части:
// function sqrt(num) {
// 	return Math.sqrt(num);
// }
// function round(num) {
// 	return num.toFixed(3);
// }
// С помощью этих функций найдите квадратный корень из числа 2 и округлите его до трех знаков в дробной части.
// function sqrt(num) {
//     	return Math.sqrt(num);
//     }
// function round(num) {
//     return num.toFixed(3);
// }
// let result = round(sqrt(2));
// console.log(result);

// Пусть у вас есть функция, возвращающая квадратный корень из числа, и функция, возвращающая сумму трех чисел:
// function sqrt(num) {
// 	return Math.sqrt(num);
// }
// function sum(num1, num2, num3) {
// 	return num1 + num2 + num3;
// }
// С помощью этих функций найдите сумму корней чисел 2, 3 и 4 и запишите ее в переменную result.
// function sqrt(num) {
// 	return Math.sqrt(num);
// }
// function sum(num1, num2, num3) {
// 	return num1 + num2 + num3;
// }
// let result = sum(sqrt(2), sqrt(3), sqrt(4));
// console.log(result);

// Пусть у вас есть функция, округляющая дробь до трех знаков в дробной части:
// function round(num) {
// 	return num.toFixed(3);
// }
// С помощью этой функции модифицируйте предыдущую задачу так, чтобы в переменную result записывалась дробь, округленная до 3-х знаков в дробной части.
// function sqrt(num) {
// 	return Math.sqrt(num);
// }
// function sum(num1, num2, num3) {
// 	return num1 + num2 + num3;
// }
// function round(num) {
//     return num.toFixed(3);
// }
// let result = round(sum(sqrt(2), sqrt(3), sqrt(4)));
// console.log(result);

// Напишите функцию, которая параметром будет принимать число и делить его на 2 столько раз, пока результат не станет меньше 10. Пусть функция возвращает количество итераций, которое потребовалось для достижения результата.
// function moreThenTen(num) {
//     for (i = 1; i <= num; i++) {
//         num = num / 2
//         if (num < 10) {
//             return num = i;
//         }
//     }
// }
// console.log(moreThenTen(100));

// function moreThenTen(num) {
//     let i = 1;
//     while(true){
//         num /= 2;
//         if(num < 10){
//         return i;
//         }
//     i++;
//     }
// }
// console.log(moreThenTen(0));

// function func(num1, num2) {
// 	let result;	
// 	if (num1 > 0 && num2 > 0) {
// 		result = num1 * num2;
// 	} else {
// 		result = num1 - num2;
// 	}
// 	return result;
// }
// alert(func(3, 4));
// Перепишите ее в сокращенной форме согласно изученной теории.

// function func(num1, num2) {
//     if (num1 > 0 && num2 > 0) {
//         return num1 * num2;
//     } else {
//         return num1 - num2;
//     }
// }
// alert(func(3, 4));


//====================== Примеры на создание функций в JavaScript ==========================

// Напишите функцию, которая будет находить сумму квадратов элементов массива.
// function getSum(arr) {
//     let summ = 0;
//     for (let elem of arr) {
//         summ += elem ** 2;
//     }
//     return summ;
// }
// let arr1 = [1, 2, 3, 4, 5];
// console.log(getSum(arr1));

// Сделайте функцию getDigitsSum (digit - это цифра), которая параметром будет принимать целое число и возвращать сумму его цифр.
// function getDigitSum(num) {
//     num = String(num);
//     let arr = num.split('');
//     let sum = 0;
//     for (let i = 0; i < arr.length; i++) {
//         sum += Number(arr[i]);
//     }
//     return sum;
// }
// console.log(getDigitSum(987));

// Реализуйте функцию getDivisors, которая параметром будет принимать число и возвращать массив его делителей, то есть чисел, на которое делится наше число. К примеру, если мы передадим число 24 - мы должны получить массив [1, 2, 3, 4, 6, 8, 12, 24].
// function getDivisors(num) {
//     let arr = [];
//     for (let i = 1; i <= num; i++) {
//         if (num % i == 0) {
//             arr.push(i);
//         }
//     }
//     return arr;
// }
// console.log(getDivisors(100));

// Сделайте функцию reverseStr, которая параметром будет принимать строку и переворачивать ее символы в обратном порядке. Решите задачу без цикла, используя комбинацию стандартных функций JavaScript.
// function reverseStr(str) {
//     let arr = str.split('');
//     arr.reverse();
//     let newStr = arr.join('');
//     return newStr;
// }
// console.log(reverseStr('лига'));

// Сделайте функцию delElem, которая параметрами будет принимать значение и массив и удалять из массива все элементы с таким значением.
// function delElem(num, arr) {
//     for (let i = 0; i < arr.length; i++) {
//         if (arr[i] == num) {
//             arr.splice(i, 1);    
//         }
//     }
//     return arr;
// }
// console.log(delElem(2, [1, 2, 3, 4, 5]));

// Сделайте функцию, заполняющую массив целыми числами от 1 до заданного.
// function fillArray(num) {
//     let arr = [];
//     for (let i = 1; i <= num; i++) {
//         arr.push(i);
//     }
//     return arr;
// }
// console.log(fillArray(25));

// Сделайте функцию, заполняющую массив целыми числами от начального до конечного заданных чисел.
// let num1 = 1;
// let num2 = 10;
// let arr = [];
// for (let i = num1; i <= num2; i++) {
//     arr.push(i);
// }
// console.log(arr);

// function fillArray(num1, num2) {
//     let arr = [];
//     for (let i = num1; i <= num2; i++) {
//         arr.push(i);
//     }
//     return arr;
// }
// console.log(fillArray(1, 10));


//=============================== Флаги в функциях JavaScript ==============================

// Сделайте функцию, которая параметром будет принимать массив с числами, и проверять, что все элементы в этом массиве являются четными числами.
// function isEven (arr) {
//     for (let elem of arr) {
//         if (elem % 2 != 0) {
//             return false;
//         }
//     }
//     return true;
// }
// console.log(isEven([2, 5, 6, 8]));

// Сделайте функцию, которая параметром будет принимать число и проверять, что все цифры 
// function isUneven(num) {
//     num = String(num);
//     let arr = num.split('');
//     for (let elem of arr) {
//         if (Number(elem) % 2 == 0) {
//             return false;
//         }
//     }
//     return true;    
// }   
// console.log(isUneven(3157));

// Сделайте функцию, которая параметром будет принимать массив и проверять, есть ли в этом массиве два одинаковых элемента подряд.
// function noRepeatInArow(arr) {
//     for (let i = 0; i < arr.length; i++) {
//         if (arr[i] == arr[i + 1]) {
//             return false;
//         }
//     }
//     return true;
// }
// console.log(noRepeatInArow([1, 2, 3, , 4, 5]));


//=================== Логические операторы без if в функциях JavaScript ====================

// function func(a, b) {
// 	if (a == b) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// }
// Перепишите ее код в сокращенной форме согласно изученной теории.
// function func(a, b) {
// 	return a == b;
// }
// console.log(func(3, 2));

// function func(a, b) {
// 	if (a != b) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// }
// Перепишите ее код в сокращенной форме согласно изученной теории.
// function func(a, b) {
// 	return a != b;
// }
// console.log(func(2, 3));


//====================== Правильное использование функций JavaScript ========================

// Дана функция, проверяющая числа на простоту:
// function isPrime(num) {
// 	for (let i = 2; i < num; i++) {
// 		if (num % i == 0) {
// 			return false;
// 		}
// 	}
	
// 	return true;
// }
// С помощью приведенной функции найдите все простые числа в интервале от 1 до 100.

// let result = [];
// for (i = 1; i <= 100; i++) {
//     if (isPrime(i)) {
//         result.push(i);
//     }
// }
// console.log(result);

// function isPrime(num) {
// 	for (let i = 2; i < num; i++) {
// 		if (num % i == 0) {
// 			return false;
// 		}
// 	}	
// 	return true;
// }

// Дана функция getDigitsSum, которая параметром принимает целое число и возвращает сумму его цифр:
// function getDigitsSum(num) {
// 	let sum = 0;
// 	let digits = String(num).split('');
// 	for (let digit of digits) {
// 		sum += Number(digit);
// 	}	
// 	return sum;
// }
// С помощью приведенной функции getDigitsSum найдите все года от 1 до 2030, сумма цифр которых равна 13.

// let result = [];
// for (let i = 1; i <= 2030; i++) {
//     if (getDigitsSum(i) == 13) {
//         result.push(i);
//     }
// }
// alert(result);

// function getDigitsSum(num) {
//     let sum = 0;
//     let digits = String(num).split('');
//     for (let digit of digits) {
//         sum += Number(digit);
//     }	
//     return sum;
// }

// Пусть дан какой-то массив с числами, например, такой:
// [123, 456, 789]
// Давайте сделаем так, чтобы цифры в каждом элементе массива были в обратном порядке. То есть из нашего массива сделаем следующий:
// [321, 654, 987]
// Некий программист уже написал код, реализующий описанную задачу:
// let nums = [123, 456, 789];
// let result = [];
// for (let num of nums) {
// 	result.push(String(num).split('').reverse().join(''));
// }
// console.log(result); // выведет [321, 654, 987]
// Переделайте приведенный код так, чтобы переворот числа выполняла отдельная функция.
// let nums = [123, 456, 789];
// let result = [];
// for (let num of nums) {
// 	result.push(flipNumbers(num));
// }
// console.log(result); 

// function flipNumbers(number) {
//     let resultate = String(number).split('').reverse().join('');
//     return resultate;
// }

// Даны два числа. Необходимо проверить, равна ли сумма цифр первого числа сумме цифр второго числа.
// Некий программист уже написал решение задачи, вот оно:
// let num1 = 234;
// let num2 = 531;
// let digits1 = String(num1).split('');
// let digitsSum1 = 0;
// for (let digit1 of digits1) {
// 	digitsSum1 += Number(digit1);
// }
// let digits2 = String(num1).split('');
// let digitsSum2 = 0;
// for (let digit2 of digits2) {
// 	digitsSum2 += Number(digit2);
// }
// if (digitsSum1 == digitsSum2) {
// 	alert('суммы цифр совпадают');
// } else {
// 	alert('суммы цифр не совпадают');
// }
// В чем недостатки приведенного кода? Переделайте код так, чтобы он был более удачным.
// let num1 = 234;
// let num2 = 531;
// if (getDigitsSum(num1) == getDigitsSum(num2)) {
// 	console.log('суммы цифр совпадают');
// } else {
// 	console.log('суммы цифр не совпадают');
// }

// function getDigitsSum(num) {
//     let digits = String(num).split('');
//     let digitsSum = 0;
//     for (let digit of digits) {
//         digitsSum += Number(digit);
//     }
//     return digitsSum;
// }

// Дан массив с числами. Необходимо перебрать этот массив с числами и вывести в консоль нетривиальные делители этих чисел (то есть исключая число 1 и само число).
// Некий программист уже написал решение задачи:
// let nums = [12, 24, 35, 14];
// for (let num of nums) {
// 	console.log(num + ': ' + getDivisors(num).join(', '));
// }
// function getDivisors(num) {
// 	let result = [];
	
// 	for (let i = 2; i < num; i++) {
// 		if (num % i == 0) {
// 			result.push(num);
// 		}
// 	}
	
// 	return result;
// }
// Программист не тестировал отдельно работу функции getDivisors, а написал весь код сразу и затем запустил его. При запуске оказалось, что код работает как-то не так. Видимо, в функции getDivisors была допущена какая-то ошибка.
// айдите и исправьте ошибку. Потестируйте отдельно функцию getDivisors, чтобы убедиться, что она работает корректно после вашей правки. После того, как вы убедитесь в корректности работы функции - проверьте полный код решения задачи.

// let nums = [12, 24, 35, 14];
// for (let num of nums) {
// 	console.log(num + ': ' + getDivisors(num).join(', '));
// }

// function getDivisors(num) {
// 	let result = [];
// 	for (let i = 2; i < num; i++) {
// 		if (num % i == 0) {
// 			result.push(i);
// 		}
// 	}
// 	return result;
// }

 
//==================== Комбинация вспомогательных функций JavaScript =======================

// Дана функция getSum, находящая сумму элементов переданного массива:
// function getSum(arr) {
// 	let sum = 0;
// 	for (let elem of arr) {
// 		sum += Number(elem);
// 	}
// 	return sum;
// }
// Дана функция getDigits, возвращающая массив цифр числа:
// function getDigits(num) {
// 	return String(num).split('');
// }
// Используя комбинацию приведенных функций найдите сумму цифр числа 12345.
// console.log(getSum(getDigits(12345)));
// function getSum(arr) {
// 	let sum = 0;
// 	for (let elem of arr) {
// 		sum += Number(elem);
// 	}
// 	return sum;
// }
// function getDigits(num) {
// 	return String(num).split('');
// }

// Дано число. Нужно найти его делители (без 1 и самого числа), а затем найти среднее арифметическое (сумма делить на количество) делителей числа и вывести результат на экран.
// Некий программист уже написал решение задачи:
// console.log( getAvg(getDivisors(24)) );
// // Нахождение среднего арифметического:
// function getAvg(arr) {
// 	let sum = 0;
// 	for (let elem of arr) {
// 		sum = elem;
// 	}	
// 	return sum / arr.length;
// }
// // Нахождение массива делителей числа:
// function getDivisors(num) {
// 	let result = [];	
// 	for (let i = 2; i > num; i++) {
// 		if (num % i == 0) {
// 			result.push(i);
// 		}
// 	}
// }
// Программист не тестировал отдельно работу своих функций, а написал весь код сразу и затем запустил его. При запуске оказалось, что код работает неверно.
// Найдите и исправьте ошибки программиста. Потестируйте отдельно работу всех функций, чтобы убедиться, что они работают корректно после ваших правок. После того, как вы убедитесь в корректности работы функций - проверьте полный код решения задачи.

// console.log(getAvg(getDivisors(32)));
// function getAvg(arr) {
// 	let sum = 0;
// 	for (let elem of arr) {
// 		sum += elem;
// 	}	
// 	return sum / arr.length;
// }

// function getDivisors(num) {
// 	let result = [];	
// 	for (let i = 2; i < num; i++) {
// 		if (num % i == 0) {
// 			result.push(i);
// 		}
// 	}
//     return result;
// }


//============= Вспомогательные функции внутри других функций в JavaScript =================

// Пусть у нас дан массив с числами. Решим следующую задачу: запишем в новый массив только те элементы, сумма цифр в которых от 1 до 9.
// let arr = [123, 22, 88, 3]
// let result = [];
// function getDigits(num) {
//     let str = String(num);
//     return str.split('');
// }

// function getSum(arr) {
//     let sum = 0;
//     for (let elem of arr) {
//         sum += Number(elem);
//     }
//     return sum;
// }

// function inRange(num) {
//     let result = getSum(getDigits(num));
//     return result >= 1 && result <= 9;
// }

// for (let elem of arr) {
//     if (inRange(elem)) {
//         result.push(elem);
//     }
// }
// console.log(result);


//======================= Дружественные числа на JavaScript =============================

// function isFreindly(num1, num2) {
// 	let sum1 = getSum(getOwnDivisors(num1));
// 	let sum2 = getSum(getOwnDivisors(num2));
// 	if (sum1 == num2 && sum2 == num1) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// }

// function getOwnDivisors(num) {
// 	// тут будет какой-то код
// }

// function getSum(arr) {
// 	// тут будет какой-то код
// }
// Реализуйте функцию getOwnDivisors. Потестируйте ее работу.
// Реализуйте функцию getSum. Потестируйте ее работу.
// Проверьте работу функции isFreindly.

// function isFreindly(num1, num2) {
//     let sum1 = getSum(getOwnDivisors(num1));
//     let sum2 = getSum(getOwnDivisors(num2));
//     if (sum1 == num2 && sum2 == num1) {
//         return true;
//     } else {
//         return false;
//     }
// }

// function getOwnDivisors(num) {
//     let arr = [];
//     for (let i = 1; i < num; i++) {
//         if (num % i == 0) {
//             arr.push(i);
//         }
//     }
//     return arr;
// }

// function getSum(arr) {
//     let sum = 0;
//     for (elem of arr) {
//         sum += elem;
//     }
//     return sum;
// }
// console.log(isFreindly(222, 284));

// Сделайте функцию getFreindly, которая будет находить пары дружественных чисел в заданном промежутке и возвращать их в виде двухмерного массива вида [ [220, 284], [1184, 1210], [2620, 2924] ]. С помощью созданной функции найдите все пары дружественных чисел на промежутке от 1 до 9000.

// function getFreindly(startNum, endNum) {
//     let arr = [];
//     let result = [];
//     for (let i = startNum; i <= endNum; i++) {
//         if (friendlyNum(i)) {
//             arr[i] = [];    
//             arr[i][0] = i;
//             arr[i][1] = friendlyNum(i);
//         }
//     }    
//     for (let elem of arr) {
//         if (elem != undefined && ) {
//         result.push(elem);
//         }
//     }
//     return result;
// }

// function friendlyNum(num) {
//     let a = getSum(getOwnDivisors(num));
//     let b = getSum(getOwnDivisors(a));
//     if (b == num && a != num) {
//         return a;
//     } else {
//         return false;
//     }
// }

// function getOwnDivisors(num) {
//     let arr = [];
//     for (let i = 1; i < num; i++) {
//         if (num % i == 0) {
//             arr.push(i);
//         }
//     }
//     return arr;
// }

// function getSum(arr) {
//     let sum = 0;
//     for (elem of arr) {
//         sum += elem;
//     }
//     return sum;
// }
// console.log(getFreindly(1, 9000));

// Совершенное число - целое число, равное сумме всех своих собственных делителей (то есть всех положительных делителей, отличных от самого числа). Сделайте функцию getPerfect, которая будет находить совершенные числа в заданном диапазоне. Проверьте работу функции в промежутке от 1 до 1000.
// function getPerfect(numStart, numEnd){
//     let arr = [];
//     for (let i = numStart; i <= numEnd; i++){
//         if (getOwnDivisorsSum(i) == i) {
//             arr.push(i);
//         }
//     }
//     return arr;
// }
// console.log(getPerfect(1, 10000));

// function getOwnDivisorsSum(num) {
//     let arr = [];
//     let sum = 0;
//     for (let i = 1; i < num; i++) {
//         if (num % i == 0) {
//             arr.push(i);
//         }
//     }
//     for (let elem of arr) {
//         sum += elem;
//     }
//     return sum;
// }

// Сделайте функцию getSimpleDivisors, которая будет принимать параметром целое число и находить все делители этого числа, являющиеся простыми числами.

// function getDivisors(num) {
//     let arr = [];
//     for (let i = 1; i <= num; i++) {
//         if (num % i == 0) {
//             arr.push(i);
//         }
//     } 
//     return arr;
// }

// function getSimpleDivisors(num) {
//     let arr = getDivisors(num);
//     let result = [];
//     for (let elem of arr) {
//         let flag = true;
//         for (let i = 2; i < elem; i++) {
//             if (elem % i == 0) {
//                 flag = false;
//                 break;
//             }
//         }
//         if (flag) {
//             result.push(elem);
//         }
//     }
//     return result;
// }
// console.log(getSimpleDivisors(33));


// =========================== Пересечение массивов на JavaScript ==============================

// Давайте напишем функцию getInt, которая будет находить пересечение массивов и возвращать пересечение этих массивов.
// let result = [];
// function getInt(arr1, arr2){
//     for (elem of arr1) {
//         if (inArray(elem, arr2)) {
//             result.push(elem);
//         }
//     }
//     return result;
// }

// function inArray(elem, arr) {
//     return arr.indexOf(elem) != -1;
// }

// console.log(getInt([1, 2, 3], [2, 3, 4, 5]));


//========================== Разность массивов на JavaScript ==================================

// Пусть у нас даны два массива:
// let arr1 = [1, 2, 3];
// let arr2 = [2, 3, 4, 5];
// Можно заметить, что числа 1, 4 и 5 не присутствуют одновременно в обоих массивах. Такие элементы называются разностью массивов
// Давайте функцию getDiff, которая будет находить разность двух массивов.

// function getDiff(arr1, arr2) {
//     let diff1 = getFirstDiff(arr1, arr2);
//     let diff2 = getFirstDiff(arr2, arr1);
//     return [].concat(diff1, diff2);
// }

// function getFirstDiff(arr1, arr2) {
//     let result = [];
//     for (let elem of arr1) {
//         if (!inArray(elem, arr2)) {
//             result.push(elem);
//         }
//     }
//     return result;
// }

// function inArray(elem, arr) {
//     return arr.indexOf(elem) != -1;
// }
// console.log(getDiff([1, 2, 3], [2, 3, 4, 5]));


//=========================== Наибольший общий делитель на JavaScript ==========================

// Реализуйте функцию getGreatestCommonDivisor, которая параметрами будет принимать два числа и возвращать НОД этих двух чисел.
// При решении задачи старайтесь использовать вспомогательные функции, в том числе полученные нами ранее в теоретической части.
// Обязательно тестируйте каждую вспомогательную функцию перед использованием.
// function getGreatestCommonDivisor(num1, num2) {
//     let divisors1 = getDivisors(num1);
//     let divisors2 = getDivisors(num2);
//     let commondivisors = getInt(divisors1, divisors2);
//     let result = Math.max.apply(null, commondivisors);
//     return result;

// }
// function getDivisors(num) {
//     let arr = [];
//     for (let i = 1; i <= num; i++) {
//         if (num % i == 0) {
//             arr.push(i);
//         }
//     }
//     return arr;
// }

// function inArray(elem, arr) {
//     return arr.indexOf(elem) != -1;
// }

// function getInt(arr1, arr2) {
//     let arr = [];
//     for (let elem of arr1) {
//         if (inArray(elem, arr2)) {
//             arr.push(elem);
//         }
//     }
//     return arr;
// }
// console.log(getGreatestCommonDivisor(12, 18));

// Положительные целые числа, не имеющие общих делителей, кроме тривиальной единицы, называются взаимно простыми.
// Говоря другими словами, два числа можно назвать взаимно простыми, если их НОД равен единице.
// Напишите функцию, которая параметрами будет принимать два числа и проверять - взаимно простые они или нет.
// function getMutuallySimpleNumbers(num1, num2) {
//     let divisors1 = getDivisors(num1);
//     let divisors2 = getDivisors(num2);
//     let commondivisors = getInt(divisors1, divisors2);
//     let result = Math.max.apply(null, commondivisors);
//     return result == 1;
// }
// function getDivisors(num) {
//     let arr = [];
//     for (let i = 1; i <= num; i++) {
//         if (num % i == 0) {
//             arr.push(i);
//         }
//     }
//     return arr;
// }

// function inArray(elem, arr) {
//     return arr.indexOf(elem) != -1;
// }

// function getInt(arr1, arr2) {
//     let arr = [];
//     for (let elem of arr1) {
//         if (inArray(elem, arr2)) {
//             arr.push(elem);
//         }
//     }
//     return arr;
// }
// console.log(getMutuallySimpleNumbers(22, 17));


//=================== Случайный элемент из массива на JavaScript ==============================

// Самостоятельно, не подсматривая в мой код, реализуйте описанную функцию. При решении задачи код функции getRandomInt скопируйте из учебника.
// function getRandomInt(min, max) {
// 	return Math.floor(Math.random() * (max - min + 1)) + min;
// }

// let arr = [1, 2, 3, 4, 5];
// let key = getRandomInt(0, arr.length -1);
// console.log(key);

// function getRandomArrEl(arr) {
//     return arr[getRandomInt(0, arr.length -1)];
// }
// console.log(getRandomArrEl([1, 2, 3, 4, 5])); 

// Используя созданную функцию, найдите сумму трех случайных элементов из массива.
// function getRandomInt(min, max) {
// 	return Math.floor(Math.random() * (max - min + 1)) + min;
// }

// function getRandomArrElemsSum(arr, num) {
//     let result = arr[getRandomInt(0, arr.length -1)];
//     let sum = 0;
//     for (let i = 1; i < num; i++) {
//         sum += result;
//     }
//     return sum;
// }
// console.log(getRandomArrElemsSum([1, 2, 3, 4, 5], 3));


//========================== Перемешивание массива на JavaScript ===============================


// Реализуем функцию shuffle, параметром принимающую массив и перемешивающую его элементы в случайном порядке.
// Самостоятельно, не подсматривая в мой код, реализуйте описанную функцию. При решении задачи код функции getRandomInt скопируйте из учебника.
// function getRandomInt(min, max) {
// 	return Math.floor(Math.random() * (max - min + 1)) + min;
// }

// function shuffle(arr) {
//     let result = [];
//     while (arr.length > 0) {
//         let random = getRandomInt(0, arr.length - 1);
//         let elem = arr.splice(random, 1)[0];
//         result.push(elem);
//     }
//     return result;
// }
// console.log(shuffle([1, 2, 3, 4, 5]));

// Сделайте функцию range принимающую параметрами 2 целых числа - начало и конец диапазона, и возвращающую массив, заполненный целыми числами из этого диапазона.
// function getRandomInt(min, max) {
//     	return Math.floor(Math.random() * (max - min + 1)) + min;
// }

// function range(num1, num2) {
//     let arr = [];
//     while (arr.length < 10) {
//         let random = getRandomInt(num1, num2);
//         arr.push(random);
//     }
//     return arr;
// }
// console.log(range(1, 25));

// Сделайте функцию rangeRand, возвращающую массив, заполненный случайными целыми числами из заданного диапазона. При этом числа не должны повторяться. Для решения задачи используйте комбинацию функций range и shuffle.
// function getRandomInt(min, max) {
//     	return Math.floor(Math.random() * (max - min + 1)) + min;
// }

// function rangeRand(num1, num2) {
//     let arr = [];
//     while (arr.length < 10) {
//         let random = getRandomInt(num1, num2);
//         if (arr.indexOf(random) == -1) {
//             arr.push(random);
//         }
//     }
//     return arr;
// }
// console.log(rangeRand(1, 23));


//======================== Случайные элементы из массива на JavaScript =========================

// Давайте теперь реализуем функцию randoms, возвращающую заданное количество случайных элементов из массива.
// Пусть первым параметром функция принимает массив, а вторым - количество элементов, которое следует вернуть.
// function getRandomInt(min, max) {
//         return Math.floor(Math.random() * (max - min + 1)) + min;
// }

// function shuffle(arr) {
//     let result = [];
//     while (arr.length > 0) {
//         let random = getRandomInt(0, arr.length - 1);
//         let elem = arr.splice(random, 1)[0];
//         result.push(elem);
//     }
//     return result;
// }

// function first(arr, length) {
//     return arr.slice(0, length);
// }

// function randoms(arr, length) {
//     return first(shuffle(arr), length);
// }

// console.log(randoms([1,2,3,4,5], 3));


//============================== Счастливые билеты на JavaScript ================================

// Пусть нам нужно вывести на экран все возможные счастливые автобусные билеты. Билет называется счастливым, если сумма первых трех цифр билета равна сумме вторых трех цифр (будем рассматривать только билеты, в номере которых 6 цифр).
// function getLuckyTickets() {
//     let arr = [];
//     for (let i = 1001; i < 999999; i++) {
//         if (isLucky(i)) {
//             arr.push(i);
//         }
//     }
//     return arr;
// }

// function isLucky(num) {
//     let str = normolizeNum(num);
//     let sum1 = Number(str[0]) + Number(str[1]) + Number(str[2]);
//     let sum2 = Number(str[3]) + Number(str[4]) + Number(str[5]);
//     return sum1 == sum2; 
// }

// function normolizeNum(num) {
//     let str = String(num);
//     if (str.length == 5) {
//         str = '0' + str;
//     }
//     if (str.length == 4) {
//         str = '00' + str;
//     }
//     return str;
// }

// console.log(getLuckyTickets());


//====================== Счастливые билеты любой длины на JavaScript ============================

// function getLuckyTickets(digitsAmount) {
//     let result = [];
//     let first = getFirst(digitsAmount);
//     let last = getLast(digitsAmount);
//     for (let i = first; i < last; i++) {
//         let ticketNum = normalizeNum(i, digitsAmount)
//         if (isLucky(ticketNum)) {
//             result.push(ticketNum);
//         }
//     }
//     return result;
// }

// function getFirst(digitsAmount) {
//    let logic = digitsAmount / 2 - 1;
//    let num = '11';
//    let arr = num.split('');
//     for (let i = 0; i < logic; i++) {
//         arr.splice(1, 0, '0');
//     }
//     return Number(arr.join(''));
// }

// function getLast(digitsAmount) {
//     let result = '';
//     for (let i = 0; i < digitsAmount; i++) {
//         result += '9';
//     }
//     return Number(result);
// }

// function isLucky(num) {
//     let sum1 = 0;
//     let sum2 = 0;
// 	let result = num.length / 2;
//     for (let i = 0; i < result; i++) {
//         sum1 += Number(num[i]);  
//     }
//     for (let i = result; i < num.length; i++) {
//         sum2 += Number(num[i]);
//     }
//     return sum1 == sum2;
// }

// function normalizeNum(num, digitsAmount) {
// 	let str = String(num);
// 	return formStr('', digitsAmount - str.length) + str;
// }

// function formStr(data, digitsAmount) {
//     while (data.length < digitsAmount) {
//        data = '0' + data;
//     }
//     return data;
// }
// console.log(getLuckyTickets(10));


//==================== Область видимости переменных в функциях JavaScript =======================


// let num = 1;		
// function func() {
// 	alert(num);
// }
// num = 2;
// func();

// function func() {
// 	let num = 5;
// 	return num;
// }
// alert(num);

// function func() {
// 	let num = 5;
// 	return num;
// }

// alert(num);


//================== Область видимости и параметры функций JavaScript ==========================

// function func(localNum) {
// 	localNum = 2; // ничего не меняет снаружи
// }
// let num = 1;
// console.log(func(num));

// function func(localNum) {
// 	alert(localNum);
// }
// let num = 1;
// func(num);

// function func(localNum) {
// 	num = 2;
// }

// let num = 1;
// func(num);
// alert(num);

// function func() {
// 	num = 2;
// }

// let num = 1;
// func();
// alert(num);


//====================== Исходный код функции и ее результат в JavaScript ========================

// function func() {
// 	return '!';
// }

// alert(func); // не пишем круглые скобки


//======================== Функция как переменная в JavaScript =================================

// Сделайте функцию func, которая будет возвращать через return какую-либо строку.
// function func() {
//     return 'string';
// }
// alert(func());

// Запишите в переменную func число 123, тем самым затерев функцию из этой переменной. Выведите новое значение переменной func на экран.
// function func() {
//     return 'string'
// }
// func = 123;
// console.log(func);

// Сделайте функцию func1, которая будет возвращать через return число 3.
// function func1() {
//     return 3;
// }
// console.log(func1());

// Скопируйте исходный код функции func1, в переменную func2.
// function func1() {
//     return 3;
// }
// let func2 = func1;

// Выведите на экран сумму результатов работы функций func1 и func2.
// function func1() {
//     return 3;
// }
// let func2 = func1;
// console.log(func1() + func2());

// Сделайте безымянную функцию, которая будет возвращать через return число 1. Запишите эту функцию в переменную func1.
// let func1 = function() {
//     return 1;
// };

// Сделайте безымянную функцию, которая будет возвращать через return число 2. Запишите эту функцию в переменную func2.
// let func2 = function() {
//     return 2;
// };

// // Найдите сумму значений функций func1 и func2. Выведите эту сумму алертом на экран.
// let func1 = function() {
//     return 1;
// };
// let func2 = function() {
//     return 2;
// };
// alert(func1() + func2());

// следует придерживаться правила, общего для всех языков программирования: функции должны быть глаголами, а переменные - существительными.


//=============== Function expression и Function declaration в JavaScript ======================


//=================== Нюансы функциональных выражений в JavaScript =============================

// func();
// let test = function func() {
// 	alert('!');
// }

// func();
// alert(
// 	function func() {
// 		alert('!');
// 	}
// );

// func();
// +function func() {
// 	alert('!');
// }

// func();
// function func() {
// 	alert('!');
// }


//======================== Массив с анонимными функциями в JavaScript ============================
// let arr = [
// 	function() {alert('1')},
// 	function() {alert('2')},
// 	function() {alert('3')},
// ];

// alert(arr[0]);

// let arr = [
// 	function() {alert('1')},
// 	function() {alert('2')},
// 	function() {alert('3')},
// ];
// arr[0]();

// let arr = [
// 	function() {alert('1')},
// 	function() {alert('2')},
// 	function() {alert('3')},
// ];

// for (let func of arr) {
// 	func(); // вызываем наши функции в цикле
// }

// Сделайте массив arr с тремя функциями. Пусть первая возвращает через return число 1, вторая - число 2, третья - число 3.
// let arr = [
// 	function() {return 1},
// 	function() {return 2},
// 	function() {return 3},
// ];

// Используя созданный вами массив arr выведите на экран число 3, вызвав соответствующую функцию.
// let arr = [
// 	function() {return 1},
// 	function() {return 2},
// 	function() {return 3},
// ];
// alert(arr[2]());

// Используя созданный вами массив arr найдите сумму результатов функций (без цикла).
// let arr = [
// 	function() {return 1},
// 	function() {return 2},
// 	function() {return 3},
// ];
// let sum = arr[0]() + arr[1]() + arr[2]();
// alert(sum);

// Переберите созданный вами массив arr циклом и выведите результаты работы всех функций на экран.
// let arr = [
// 	function() {return 1},
// 	function() {return 2},
// 	function() {return 3},
// ];
// for (let elem of arr) {
// 	alert(elem());
// }


//======================== Объект с анонимными функциями в JavaScript ============================

// Сделайте объект с тремя функциями. Пусть первая возвращает через return число 1, вторая - число 2, третья - число 3. С помощью созданных функций выведите на экран сумму возвращаемых чисел.
// let obj = {
// 	func1 : function() {return 1},
// 	func2 : function() {return 2},
// 	func3 : function() {return 3}
// }
// alert(obj.func1() + obj.func2() + obj.func3());

// Переберите созданный объект циклом и выведите результаты работы функций на экран.
// let obj = {
// 	func1 : function() {return 1},
// 	func2 : function() {return 2},
// 	func3 : function() {return 3}
// }
// for (let elem in obj) {
// 	alert(obj[elem]());
// }

// Сделайте объект с тремя функциями, каждая из которых будет принимать параметром массив с числами. Сделайте так, чтобы первая функция возвращала сумму элементов массива, вторая функция - сумму квадратов, а третья - сумму кубов.
// let obj = {
// 	func1: function(arr) {
// 		let sum = 0;
// 		for (let elem of arr) {
// 			sum += elem;
// 		}
// 		return sum;
// 	},
	
// 	func2: function(arr) {
// 		let sumSquares = 0;
// 		for (let elem of arr) {
// 			sumSquares += elem ** 2;
// 		}
// 		return sumSquares;
// 	},

// 	func3: function(arr) {
// 		let sumCubes = 0;
// 		for (let elem of arr) {
// 			sumCubes += elem ** 3;
// 		}
// 		return sumCubes;
// 	}
// }
// for (let elem in obj) {
// 	alert(obj[elem]([1, 2, 3, 4, 5]));
// }

//======================= Передача функций параметрами в JavaScript ==============================

// Сделайте функцию test, параметрами принимающую 3 функции. Передайте в нее первым параметром функцию, возвращающую 1, вторым - функцию, возвращающую 2, третьим - функцию, возвращающую 3. Выведите на экран сумму результатов функций.
// test(
// 	function() {return 1;}, 
// 	function() {return 2;}, 
// 	function() {return 3;}
// );
// function test(func1, func2, func3) {
// 	console.log(func1() + func2() + func3());
// }	

// Сделайте функцию test, параметрами принимающую 3 функции и возвращающую сумму результатов переданных функций.
// function test(func1, func2, func3) {
// 	return alert(func1() + func2() + func3());
// }

// Сделайте 3 функции, объявив их как Function Declaration и дав им имена func1, func2 и func3. Пусть первая функция возвращает 1, вторая - 2, а третья - 3. Передайте эти функции параметром в функцию test из предыдущей задачи.
// function func1() {return 1;}
// function func2() {return 2;}
// function func3() {return 3;}

// test(func1, func2, func3);

// function test(func1, func2, func3) {
// 	return alert(func1() + func2() + func3());
// }

// Модифицируйте предыдущую задачу так, чтобы функции были объявлены как Function Expression с теми же именами.
// let func1 = function() {return 1;}
// let func2 = function() {return 2;}
// let func3 = function() {return 3;}

// test(func1, func2, func3);

// function test(func1, func2, func3) {
// 	console.log(func1() + func2() + func3());
// }

// Скопируйте код моей функции test. Вызовите эту функцию, передав ей параметром анонимную функцию, которая параметром будет принимать число и возвращать его куб.
// test(function(num) {
// 	return num ** 3;
// });

// function test(func) {
// 	alert(func(3));
// }

// Переделайте ваш код так, чтобы передаваемая функция была не анонимной, а была определена как Function Declaration с именем func.
// test(function func(num) {
// 	return num ** 3;
// });

// function test(func) {
// 	alert(func(3));
// }

// Переделайте передаваемую функцию на Function Expression с тем же именем func.
// let func = function(num) {
// 	return num ** 3;
// }
// test(func);

// function test(func) {
// 	alert(func(3));
// }

// Пусть передаваемая функция теперь принимает два параметра и возвращает их сумму. При вызове передаваемая функции внутри test передайте в передаваемую функцию число 2 и число 3. Выведите алертом результат.
// test(function func(num1, num2) {
// 	return num1 + num2;
// });

// function test(func) {
// 	alert(func(2, 3));
// }

// Пусть функция test первым параметром принимает число, а вторым и третьим параметрами - функции, также параметром принимающие числа.
// Пусть функция test возвращает сумму результатов переданных функций:
// function test(num, func1, func2) {
// 	return func1(num) + func2(num);
// }
// Вызовите функцию test, первым параметром передав число 3, вторым параметром функцию, возводящую число в квадрат, а третьим - функцию, возводящую число в куб. Выведите результат работы на экран.
// function test(num, func1, func2) {
// 	return alert(func1(num) + func2(num));
// }
// test(3, func1, func2);

// function func1(num) {
// 	return num * num;
// }
// function func2(num) {
// 	return num * num * num;
// }

// Давайте сделаем функцию, которая параметром будет принимать массив, а вторым параметром - функцию. Переданная функция должна будет применится к каждому элементу массива:
// function test(arr, func) {
// 	for (let i = 0; i < arr.length; i++) {
// 		arr[i] = func(arr[i]);
// 	}
// 	return arr;
// }



// let result = test([1, 2, 3, 4, 5], function func(num) {
// 	return num * num;
// });
// console.log(result);

// Вызовите созданную вами функцию test, передав ей параметром массив с числами. Сделайте так, чтобы функция вернула массив с кубами этих чисел.
// function test(arr, func) {
// 	for (let i = 0; i < arr.length; i++) {
// 		arr[i] = func(arr[i]);
// 	}
// 	return arr;
// }



// let result = test([1, 2, 3, 4, 5], function func(num) {
// 	return num * num * num;
// });
// console.log(result);



//============================== Функция в функции в JavaScript =================================
// Сделайте функцию func, которая параметрами будет принимать два числа, а возвращать сумму квадрата первого числа с кубом второго числа.
// Сделайте для этого вспомогательную функцию square, возводящую число в квадрат, и вспомогательную функцию cube, возводящую число в куб.
// function func(num1, num2) {
// 	function square(num) {
// 		return num * num;
// 	}
// 	function cube(num) {
// 		return num * num * num;
// 	}
// 	return square(num1) + cube(num2);
// }
// alert(func(5, 10));


//=============== Функция в функции и область видимости переменных в JavaScript ==================

// function test() {
// 	let num = 1;
// 	function func() {
// 		alert(num);
// 	}
// 	func();
// }
// test();

// function test() {
// 	let num;	
// 	function func() {
// 		alert(num);
// 	}	
// 	num = 1
// 	func();	
// 	num = 2
// 	func();
// }
// test();

// function test(num1, num2) {
// 	function func() {
// 		alert(num1 + num2);
// 	}	
// 	num1 = 2;
// 	func();
// }
// test(1, 2);

// function test(num) {
// 	function func(localNum) {
// 		localNum = 2;
// 	}
// 	func(num);
// 	alert(localNum);
// }
// test(1);

// function test(num) {
// 	function func(num) {
// 		num = 2;
// 	}	
// 	func(num);
// 	alert(num);
// }
// test(1);

// function test(num) {
// 	function func(num) {
// 		alert(num);
// 	}
// 	func(num);
// 	num = 2;
// }
// test(1);

//======================= Функция, возвращающая функцию в JavaScript ==============================

// Сделайте функцию func1, которая будучи вызвана вот так: func1()(), вернет число 1. Сделайте аналогичную функцию func2, возвращающую число 2. Найдите сумму результатов этих функций.
// function func1() {
// 	return function() {
// 		return 1;
// 	}
// }
// function func2() {
// 	return function() {
// 		return 2;
// 	}
// }
// alert(func1()() + func2()());

// Сделайте функцию func, которая будучи вызвана вот так: func()()()()(), вернет '!'.
// function func() {
// 	return function() {
// 		return function() {
// 			return function() {
// 				return function() {
// 					return '!';
// 				};
// 			};
// 		};
// 	};
// }
// alert(func()()()()());

// Сделайте функцию func, которая будучи вызвана вот так: func(2)(3)(4), вернет сумму переданных в параметры чисел.
// function func(num1) {
// 	return function(num2) {
// 		return function(num3) {
// 			return num1 + num2+ num3;
// 		};
// 	};
// } 
// alert(func(1)(2)(3));

// Сделайте функцию func, которая будучи вызвана вот так: func(2)(3)(4)(5)(), вернет массив переданных в параметры чисел.
// function func(num1) {
// 	let arr = [];
// 	return function(num2) {
// 		return function(num3){
// 			return function(num4) {
// 				return function() {
// 					return arr = [num1, num2, num3, num4];
// 				};  
// 			};
// 		};
// 	};
// } 
// console.log(func(2)(3)(4)(5)());


//========================= Лексическое окружение функций в JavaScript ===========================

// function test() {
// 	let num1 = 1;
// 	let num2 = 2;
// 	return function() {
// 		return num1 + num2;
// 	}
// }
// let func = test();
// alert(func());

// function test() {
// 	let num1 = 1;
// 	let num2 = 2;
// 	return function() {
// 		return num1 + num2;
// 	}
// }
// alert(test()());

// function test() {
// 	let num = 1;	
// 	return function() {
// 		return num;
// 	}
// }
// let num = 2;
// let func = test();
// alert(func());


//============================== Замыкания в JavaScript =======================================

// Самостоятельно, не подсматривая в мой код, реализуйте счетчик вызова функции, работающий на замыканиях.
// function func() {
// 	let num = 1;
// 	return function() {
// 		alert(num);
// 		num++;
// 	};
// }
// let result = func();
// result();
// result();
// result();
// result();
// result();
// result();

// Пусть функция в замыкании хранит число 10. Сделайте так, чтобы каждый вызов функции уменьшал это число на 1 и выводил на экран уменьшенное число.
// function test() {
// 	let num = 10;
// 	return function() {
// 		console.log(num);
// 		num--;
// 	};
// }
// let result = test();
// result();
// result();
// result();
// result();

// Модифицируйте предыдущую задачу так, чтобы отсчет доходил до 0, а затем каждый последующий вызов функции выводил на экран сообщение о том, что отсчет окончен.
// function test() {
// 	let num = 10;
// 	return function() {
// 		if (num >= 0) {
// 			console.log(num);
// 			num--;
// 		} else {
// 			console.log('отсчет окончен');
// 		}
// 	};
// }
// let result = test();
// result();
// result();
// result();
// result();
// result();
// result();
// result();
// result();
// result();
// result();
// result();
// result();
// result();

// let counter = 0;	
// function test() {
// 	return function() {
// 		alert(counter);
// 		counter++;
// 	};
// };
// let func = test;
// let func1 = func();
// let func2 = func();
// func1();
// func2();
// func1();
// func2();

// function test() {
// 	let counter = 0;	
// 	return function() {
// 		return function() {
// 			alert(counter);
// 			counter++;
// 		};
// 	};
// };
// let func = test()();
// let func1 = func;
// let func2 = func;
// func1();
// func2();
// func1();
// func2();

// function test() {
// 	let counter = 0;
// 	return function() {
// 		return function() {
// 			alert(counter);
// 			counter++;
// 		};
// 	};
// };
// let func = test();
// let func1 = func();
// let func2 = func();
// func1();
// func2();
// func1();
// func2();


//============================= Вызов функции на месте в JavaScript ===============================

// let result = function() {
// 	return '!';
// };		
// alert(result());

// let result = function() {return 1;}() + function() {return 2;}();
// alert(result);

// let result = (function() {
// 	return '!';
// });
// alert(result);

// let result = (function() {
// 	return '!';
// });
// alert(result());

// (function(num1, num2) {
// 	alert(num1 + num2);
// })(1, 2);

// Допишите следующий код так, чтобы его запуск алертом выводил '!':
// (function() {
// 	// какой-то код
// })()()();
// (function() {
// 	return function() {
//         return function() {
//             alert('!');
//         };
//     };
// })()()();

// Допишите следующий код так, чтобы его запуск выводил сумму переданных параметрами чисел:
// (function() {
// 	// какой-то код
// })(1)(2);
// (function(num1) {
// 	return function(num2) {
//         alert(num1 + num2);
//     };
// })(1)(2);

// Допишите следующий код так, чтобы его запуск выводил сумму переданных параметрами чисел:
// (function() {
// 	// какой-то код
// })(1)(2)(3);
// (function(num1) {
//     return function(num2) {
//         return function(num3) {
//             alert(num1 + num2 + num3);
//         }
//     };
// })(1)(2)(3);

//========================= Замыкания и вызов функции на месте в JavaScript =======================

// Не подсматривая в мой код, самостоятельно реализуйте такой же счетчик.
// let func = (function() {
//     let num = 1;
//     return function() {
//         alert(num);
//         num++;
//     };
// })();
// func();
// func();
// func();
// func();
// func();
// func();

// Модифицируйте работу счетчика так, чтобы он считал до 5, а потом отсчет начинался сначала.
// let func = (function() {
//     let num = 1;
//     return function() {
//         if (num <= 5) {
//             alert(num);
//             num++;
//         } else {
//             num = 1;
//         }
//     };
// })();
// func();
// func();
// func();
// func();
// func();
// func();
// func();
// func();
// func();
// func();


//========================= Понятие функции-коллбэка в JavaScript ================================

// Дан массив со строками. С помощью созданной нами функции each переверните символы каждой строки в обратном порядке.
// let result = each(['abc', 'def', 'gjk'], function(str) {
//     return str.split('').reverse().join('');
// });
// console.log(result);

// function each(arr, callback) {
// 	let result = [];
	
// 	for (let elem of arr) {
// 		result.push( callback(elem) );
// 	}
	
// 	return result;
// }

// Дан массив со строками. С помощью созданной нами функции each сделайте заглавным первый символ каждой строки.

// let result = each(['abc', 'def', 'gjk'], function(str) {
//     return str.slice(0, 1).toUpperCase() + str.slice(1);
// });
// console.log(result);

// function each(arr, callback) {
// 	let result = [];
	
// 	for (let elem of arr) {
// 		result.push( callback(elem) );
// 	}
	
// 	return result;
// }

// Дан массив с числами. С помощью созданной нами функции each найдите произведение каждого элемента массива на его порядковый номер.
// let result = each([0, 40, 33, 2, 50], function(elem, index) {
//     return elem * index;
// });
// console.log(result);

// function each(arr, callback) {
// 	let result = [];
// 	let i = 1;
// 	for (let elem of arr) {
// 		result.push( callback(elem, i++) );
// 	}
	
// 	return result;
// }

// Дан массив с числами. С помощью созданной нами функции filter оставьте в этом массиве только положительные числа.
// let result = filter([-1, 2, -3, 4, -5], function(elem) {
// 	if (elem > 0) {
// 		return true;
// 	} else {
//         return false;
//     }
// });
// console.log(result);

// function filter(arr, callback) {
//     let result = [];
//     for (let elem of arr) {
//         if (callback(elem)){
//             result.push(elem);
//         }
//     }
//     return result;
// }

// Дан массив со строками. С помощью созданной нами функции filter оставьте в этом массиве только строки, длина которых от 1 до 3 символов.
// let result = filter(['still', 'fly', 'reebok', 'a', 'by'], function(elem) {
//     if (elem.length >= 1 && elem.length <= 3) {
//         return true;
//     } else {
//         return false;
//     }
// });
// console.log(result);

// function filter(arr, callback) {
//     let result = [];
//     for (let elem of arr) {
//         if (callback(elem)){
//             result.push(elem);
//         }
//     }
//     return result;
// }

// Реализуйте функцию every, которая будет возвращать true, если для всех элементов массива функция-коллбэк вернула true, и будет возвращать false в противном случае.
// Пример работы такой функции (проверим, что в массиве только положительные числа):
// let result = every([1, 22, 13, 4, 50], function(elem) {
// 	if (elem > 0) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// });
// console.log(result); // выведет true

// function every(arr, callback) {
//     let result = [];
//     for (let elem of arr) {
//         if (callback(elem)) {
//             result.push(elem);
//         }
//     }
//     if (arr.length == result.length) {
//         return true;
//     } else {
//         return false;
//     }   
// }

// Реализуйте функцию some, которая будет возвращать true, если для хотя бы для одного элемента массива функция-коллбэк вернула true, и будет возвращать false в противном случае.
// Пример работы такой функции (проверим, что в массиве есть хотя бы одно отрицательное число):
// let result = some([1, 2, -3, 4, 5], function(elem) {
// 	if (elem < 0) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// });

// function some(arr, callback) {
//     let result = [];
//     for (let elem of arr) {
//         if (callback(elem)) {
//             result.push(elem);
//         }
//     }
//     if (result.length > 0) {
//         return true;
//     } else {
//         return false;
//     }   
// }
// console.log(result); // выведет false

// Реализуйте функцию alternate, которая первым параметром будет принимать массив, а вторым и третьим - коллбэки.
// Функция должна по очереди применять коллбэки к элементам массива. То есть: для первого элемента - первый коллбэк, для второго элемента - второй коллбэк, для третьего - опять первый коллбэк и так далее пока элементы массива не закончатся.
// Пример работы такой функции ():
// let result = alternate(
// 	['a', 'b', 'c', 'd', 'e'],
// 	function(elem) {
// 		return elem + '!';
// 	},
// 	function(elem) {
// 		return elem + '?';
// 	},
// );

// function alternate(arr, callback1, callback2) {
//     let result = [];
//     for (let i = 0; i < arr.length; i++) {
//         if ((i + 1) % 2 != 0 ) {
//             result.push(callback1(arr[i]));
//         } else {
//             result.push(callback2(arr[i]));
//         }
//     }
//     return result;
// }

// console.log(result); // выведет ['a!', 'b?', 'c!', 'd?', 'e!']


//============================= Стрелочные функции в JavaScript ==================================

// // Дана следующая функция с коллбэком:
// // let result = every([1, 2, 3, 4, 5], function(elem) {
// // 	if (elem > 0) {
// // 		return true;
// // 	} else {
// // 		return false;
// // 	}
// // });
// // Упростите коллбэк через стрелочную функцию.
// let result = every([1, 2, 3, 4, 5], elem => elem > 0);

// Дана следующая функция с коллбэком:
// let result = every([1, 2, 3, 4, 5], function(elem, index) {
// 	if (elem * index > 10) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// });
// Упростите коллбэк через стрелочную функцию.
// let result = every([1, 2, 3, 4, 5], (elem, index) => elem * index > 10);

// Дана следующая функция с коллбэком:
// let arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
// let result = each(arr, function(elem, index) {
// 	if (elem * index > 10) {
// 		return true;
// 	} else {
// 		return false;
// 	}
// });
// Упростите коллбэк через стрелочную функцию.
// let result = each(arr, (elem, index) => elem * index > 10);

// let result = alternate(['a', 'b', 'c', 'd', 'e'], elem => elem + '!', elem => elem + '?');

// function alternate(arr, callback1, callback2) {
//     let result = [];
//     for (let i = 0; i < arr.length; i++) {
//         if ((i + 1) % 2 != 0 ) {
//             result.push(callback1(arr[i]));
//         } else {
//             result.push(callback2(arr[i]));
//         }
//     }
//     return result;
// }

// console.log(result); // выведет ['a!', 'b?', 'c!', 'd?', 'e!']


//=============================== Работа с рекурсией в JavaScript =================================

// function func(arr) {
// 	console.log(arr.shift(), arr);
	
// 	if (arr.length != 0) {
// 		func(arr);
// 	}
// }

// func([1, 2, 3]);

// Сделайте функцию, которая с помощью рекурсии выведет первые 10 чисел Фибоначчи. Числа Фибоначчи строятся следующим образом: каждое новое число равно сумме двух предыдущих. Первые два числа Фибоначчи - это 1 и 2. Следующее число будет равно 1 + 2 = 3, следующее число будет равно 2 + 3 = 5 и так далее.
// function func(prevPrevNum, prevNum){
// 	// тут код с рекурсией, который вы должны написать
// }
// func(1, 2); // вызываем функцию с первыми двумя числами

// function func(prevPrevNum, prevNum){
// 	let current = prevPrevNum + prevNum;
// 	console.log(current);
// 	if (current <= 200) {
// 		func(prevNum, current);
// 	}
// }
// func(1, 2);

// Модифицируйте предыдущую задачу так, чтобы функция не выводила числа, а возвращала массив первых 10 чисел Фибоначчи:
// console.log(func(1, 2)); // выведет массив чисел

// function func(prevPrevNum, prevNum){
// 	let current = prevPrevNum + prevNum;
// 	let arr = [];
// 	arr.push(current);
// 	if (current <= 200) {
// 		func(prevNum, current);
		
// 	}
// 	console.log
// }
// func(1, 2);

//==================== Редуцирование числа =======================
// Давайте проверим делится ли какое-нибудь число на 9.
// Самостоятельно, не подсматривая в код, решите описанную задачу.
// function reduceNum(num) {
// 	if (getDigitsSum(num) <= 9) {
// 		return getDigitsSum(num);
// 	} else {
// 		return reduceNum(getDigitsSum(num));
// 	}
// }

// function getDigitsSum(num) {
// 	return getSum(getDigits(num));
// }

// function getSum(arr) {
// 	let sum = 0;
// 	for (elem of arr) {
// 		sum += Number(elem);
// 	}
// 	return sum;
// }

// function getDigits(num) {
// 	return String(num).split('');
// }
// console.log(reduceNum(2187));


//=========================== Рекурсия и многомерные структуры в JavaScript =========================

// Дан многомерный объект произвольного уровня вложенности, например, такой:
// {a: 1, b: {c: 2, d: 3, e: 4}, f: {g: 5, j: 6, k: {l: 7, m: {n: 8, o: 9}}}}
// С помощью рекурсии выведите все примитивные элементы этого объекта на экран.

// function func(obj) {
// 	for (let key in obj) {
// 		if (typeof obj[key] == 'object') {
// 			func(obj[key]);
// 		} else {
// 			console.log(obj[key]);
// 		}
// 	}
// }
// func({a: 1, b: {c: 2, d: 3, e: 4}, f: {g: 5, j: 6, k: {l: 7, m: {n: 8, o: 9}}}});

// дан многомерный объект произвольного уровня вложенности, например, такой:
// {a: 1, b: {c: 2, d: 3, e: 4}, f: {g: 5, j: 6, k: {l: 7, m: {n: 8, o: 9}}}}
// С помощью рекурсии найдите сумму элементов этого объекта.
// function func(obj) {
// 	let sum = 0;
// 	for (let key in obj) {
// 		if (typeof obj[key] == 'object') {
// 			sum += func(obj[key]);
// 		} else {
// 			sum += obj[key];
// 		}
// 	}
// 	return sum;
// }
// console.log(func({a: 1, b: {c: 2, d: 3, e: 4}, f: {g: 5, j: 6, k: {l: 7, m: {n: 8, o: 9}}}}));

// Дан многомерный массив произвольного уровня вложенности, содержащий внутри себя строки, например, такой:
// ['a', ['b', 'c', 'd'], ['e', 'f', ['g', ['j', 'k']]]]
// С помощью рекурсии слейте элементы этого массива в одну строку:
// 'abcdefgjk'
// function func(arr) {
// 	let result = '';
// 	for (elem of arr) {
// 		if (typeof elem == 'object') {
// 			result += func(elem);
// 		} else {
// 			result += elem;
// 		}
// 	}
// 	return result;
// }
// console.log(func(['a', ['b', 'c', 'd'], ['e', 'f', ['g', ['j', 'k']]]]));

// Дан многомерный массив произвольного уровня вложенности, например, такой:
// [1, [2, 7, 8], [3, 4], [5, [6, 7]]]
// Возведите все элементы-числа этого массива в квадрат.
// function func(arr) {
// 	for (let i = 0; i < arr.length; i++) {
// 		if (typeof arr[i] == 'object') {
// 			arr[i] = func(arr[i]);
// 		} else {
// 			arr[i] = arr[i] ** 2;
// 		}
// 	}
// 	return arr;
// }
// console.log(func([1, [2, 7, 8], [3, 4], [5, [6, 7]]]));

// Дан многомерный массив произвольного уровня вложенности, например, такой:
// [1, [2, 7, 8], [3, 4, [5, [6, 7]]]]
// Напишите код, который развернет наш многомерный массив в одномерный. Для приведенного выше массива это будет выглядеть вот так:
// [1, 2, 7, 8, 3, 4, 5, 6, 7]
// let result = [];
// function func(arr) {
// 	for (let i = 0; i < arr.length; i++) {
// 		if (typeof arr[i] == 'object') {
// 			func(arr[i]);
// 		} else {
// 			result.push(arr[i]);
// 		}
// 	} 
// 	return result;
// }
// console.log(func([1, [2, 7, 8], [3, 4, [5, [6, 7]]]]));

// Дан многомерный массив произвольного уровня вложенности, например, такой:
// [1, [2, 7, 8], [3, 4], [5, [6, 7]]]
// Выведите на экран все элементы-массивы, содержащие внутри себя только примитивы.

// function func(arr) {
// 	let result = [];
// 		resultFinish = [];
// 	for (let i = 0; i < arr.length; i++) {
// 		if (typeof arr[i] == 'object') {
// 			for (let j = 0; j < arr[i].length; j++) {
// 				if (typeof arr[i][j] == 'object') {
// 					break;
// 				} else {
// 					result.push(arr[i]);
// 				}
// 			}
// 		}
// 	}
// 	// for (let i = 0; i < result.length; i++) {
// 	// 	if (typeof result[i] == 'object') {
// 	// 		resultFinish.push(result[i]);
// 	// 	}
// 	// }
// 	return result;
// }
// console.log(func([1, [2, 7, 8], [3, 4], [5, [6, 7]]])); 
//   не решил!!!!!!


//===================== Метод map для перебора массива в JavaScript ==============================

// Дан массив с числами. Используя метод map извлеките из каждого элемента массива квадратный корень и запишите результат в новый массив.
// let arr = [1, 2, 3, 4, 5];
// let result = arr.map(function(elem) {
// 	return Math.sqrt(elem);
// });
// console.log(result);

// Дан массив со строками. Используя метод map в конец значению каждого элемента массива добавьте символ '!'.
// let arr = ['a', 'b', 'c'];
// let result = arr.map(function(elem) {
// 	return elem + '!';
// });
// console.log(result);

// Дан массив со строками. Используя метод map переверните символы каждой строки в обратном порядке.
// let arr = ['ass', 'bss', 'css'];
// let result = arr.map(function(elem) {
// 	return elem.split('').reverse().join('');
// });
// console.log(result);

// let arr = ['123', '456', '789'];
// Используя метод map преобразуйте этот массив в следующий:
// let arr = [
// 	[1, 2, 3],
// 	[4, 5, 6],
// 	[7, 8, 9]
// ];
// let arr = ['123', '456', '789'];
// let result = arr.map(function(elem) {
// 	return elem.split('');
// });
// console.log(result);

// Дан массив с числами. Используя метод map запишите в каждый элемент массива значение этого элемента, умноженное на его порядковый номер в массиве.
// let arr = [1, 2, 3, 4, 5];
// let result = arr.map(function(elem, index) {
// 	return elem * index;
// });
// console.log(result);

// ============== Перебор многомерных массивов
// let arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
// let result = arr.map(function(elem) {
// 	return elem.map(function(num) {
// 		return num * num;
// 	});
// });
// console.log(result);


//========================== Метод forEach для перебора массива в JavaScript ==========================

// // Дан массив с числами. Используя метод forEach найдите сумму квадратов элементов этого массива.
// let arr = [1, 2, 3, 4, 5];
// let sum = 0;
// arr.forEach(function(elem) {
// 	sum += elem ** 2;
// });
// console.log(sum);

// Метод forEach появился в JavaScript раньше, чем новый цикл for-of. По сути, эти два способа перебора похожи, но цикл for-of имеет более простой синтаксис, поэтому, скорее всего, чаще вы будете пользоваться именно им.


//==================== Метод filter для фильтрации массива в JavaScript =============================
// Дан массив с числами. Оставьте в нем только положительные числа.
// let arr = [1, -2, 3, -4, 5];
// console.log(arr.filter(elem => elem > 0));

// Дан массив с числами. Оставьте в нем только отрицательные числа.
// let arr = [1, -2, 3, -4, 5];
// console.log(arr.filter(elem => elem < 0));

// Дан массив с числами. Оставьте в нем только числа, которые больше нуля, но меньше 10.
// let arr = [1, -4, 99, 45, -3, 5, 9];
// console.log(arr.filter(elem => elem > 0 && elem < 10));

// Дан массив со строками. Оставьте в нем только те строки, длина которых больше 5-ти символов.
// let arr = ['str', 'global', 'fly', 'tetris', 'mom', 'gadget'];
// console.log(arr.filter(elem => elem.length > 5));

// Дан массив с числами. Оставьте в нем только те числа, произведение которых на их порядковый номер меньше 30.
// let arr = [1, 20, 3, 47, 5, 4, 66];
// console.log(arr.filter((elem, index) => elem * index < 30));

// Дан массив, в нем могут быть обычные элементы и подмассивы, например [1, 2, [3, 4], 5, [6, 7]]. Оставьте в нем только обычные элементы.
// let arr = [1, 2, [3, 4], 5, [6, 7]];
// console.log(arr.filter(elem => typeof elem != 'object'));

// Дан массив с числами. Посчитайте количество отрицательных чисел в этом массиве.
// let arr = [-1, -2, 3, 4, 5, -10];
// console.log(arr.filter(elem => elem < 0).length);


//============================= Метод every для проверки массива в JavaScript =========================

// Дан массив с числами. Проверьте то, что все элементы в массиве больше нуля.
// let arr = [1, 2, -3, 4, 5];
// let result = arr.every(elem => elem > 0);
// console.log(result);

// Дан массив с числами. Проверьте то, что для всех элементов произведение их значений на их порядковый номер меньше 30.
// let arr = [1, 2, 3, 4, 8];
// let result = arr.every((elem, index) => elem * index < 30);
// console.log(result);


//======================= Метод some для проверки массива в JavaScript =============================

// Дан массив с числами. Проверьте то, что в массиве есть хотя бы одно число больше нуля.
// let arr = [-1, -2, -3, -4, -5];
// let result = arr.some(elem => elem > 0);
// console.log(result);

// Дан массив с числами. Проверьте то, что хотя бы для одного элемента произведение его значения на порядковый номер больше 30.
// let arr = [1, 2, 3, 4, 1];
// let result = arr.some((elem, index) => elem * index > 30);
// console.log(result);


//============================= Оператор spread в JavaScript ========================================

// Дан массив:
// let arr = [1, 2, 3, 4, 5];
// Дана также функция:
// function func(num1, num2, num3, num4, num5) {
// 	return num1 + num2 + num3 + num4 + num5;
// }
// Найдите с помощью приведенной функции сумму элементов массива.
// let arr = [1, 2, 3, 4, 5];
// function func(num1, num2, num3, num4, num5) {
//     return num1 + num2 + num3 + num4 + num5;
// }
// console.log(func(...arr));

// Дан массив с числами. Используя Math.min и spread выведите на экран минимальное значение массива.
// let arr= [23, 33, 76, 90, 6, 487];
// console.log(Math.min(...arr));


//============================= Оператор spread и слияние массивов ==================================

// Не запуская код, определите, что выведется в консоль:
// let arr1 = [1, 2, 3];
// let arr2 = [...arr1, 4, 5, 6];
// let arr3 = [...arr2, 7, 8, 9];
// let arr  = [0, ...arr3];
// console.log(arr);


//=============================== Оператор spread для строк и чисел в JavaScript =======================
// let arr1 = ['a', 'b', 'c'];
// let arr2 = [...arr1, ...'12345'];

// console.log(arr2);


//================================= Оператор rest в JavaScript =======================================

// func(1, 2, 3, 4, 5);
// function func(a, b, ...rest) {
// 	console.log(a); // выведет 1
// 	console.log(b); // выведет 2
// 	console.log(rest); // выведет [3, 4, 5]

// func(1, 2);
// function func(a, b, ...rest) {
// 	console.log(a); // выведет 1
// 	console.log(b); // выведет 2
// 	console.log(rest); // выведет []


//========================= Применение операторов rest и spread в JavaScript ===========================

// Напишите функцию, которая будет принимать параметрами произвольное количество чисел и возвращать их среднее арифметическое (сумма делить на количество).
// function func(...nums) {
//     let sum = 0;
//     for (elem of nums) {
//         sum += elem;
//     }
//     let result = sum / nums.length;
//     return result;
// }
// console.log(func(1, 2, 3, 4, 5));

// Для сравнения реализуйте нашу функцию без использования оператора rest.
// let result = unite([1, 2, 3], [4, 5, 6], [7, 8, 9]);
// console.log(result); // выведет [ [1, 2, 3,] [4, 5, 6], [7, 8, 9] ]
// function unite(...arrs){
// 	return arrs;
// }

// let result = unite([1, 2, 3], [4, 5, 6], [7, 8, 9]);
// console.log(result);

// function unite(arr1, arr2, arr3) {
//     let arrey = [];
//     arrey.unshift(arr1, arr2, arr3);
//     return arrey;
// }


//====================== Пересечение произвольного количества массивов на JavaScript ===================

// Самостоятельно, не подсматривая в мой код, повторите решение описанной задачи.
// Давайте напишем функцию getInt, которая будет находить пересечение любого количества массивов.
// function getInt(...arrs) {
//     let result = [];
//     let arr0 = arrs.shift();
//     for (let elem of arr0) {
//         if (inArrays(elem, arrs)) {
//             result.push(elem);
//         }
//     }
//     return result;
// }

// function inArrays(elem, arrs) {
//    for (let arr of arrs) {
//        if (!inArray(elem, arr)) {
//            return false;
//        }
//    }
//    return true;
// }

// function inArray(elem, arr){
// 	return arr.indexOf(elem) !== -1;
// }
// console.log(getInt([1, 2, 3], [2, 3, 4], [4, 3, 2]));



// =================== Разность произвольного количества массивов на JavaScript =======================

// function getDiff(arr1, arr2){
// 	let result = [];
	
// 	let diff1 = getFirstDiff(arr1, arr2);
// 	let diff2 = getFirstDiff(arr2, arr1);
	
// 	return [].concat( diff1, diff2 );
// }

// function getFirstDiff(arr1, arr2){
// 	let result = [];
	
// 	for (let elem of arr1) {
// 		if (inArray(elem, arr2)) {
// 			result.push(elem);
// 		}
// 	}
	
// 	return result;
// }

// function inArray(elem, arr){
// 	return arr.indexOf(elem) !== -1;
// }

// function getDiff(...arrs) {
//     let diff1 = getFirstDiff(arrs);
//     let diff2 = getFirstDiff(arrs.reverse());
//     return [].concat(diff1, diff2);
// }

// function getFirstDiff(arrs) {
//     let result = [];
//     let arr0 = arrs.shift();
//     for (let elem of arr0) {
//         if (inArrays(elem, arrs)) {
//             result.push(elem);
//         }
//     }
//     return result;
// }

// function inArrays(elem, arrs) {
//     for (let arr of arrs) {
//         if (!inArray(elem, arr)) {
//             return false;
//         }
//     }
//     return true;
// }

// function inArray(elem, arr) {
// 	return arr.indexOf(elem) == -1;
// }    
// console.log(getDiff([1, 2, 3], [2, 3, 4, 5]));

// function getDiff(...arrs) {
//     let result = [];
//     for (let i = 0; i < arrs.length; i++) {
//         let arr0 = arrs.pop();
//         for (let elem of arr0) {
//             if (checkInArray(elem, arrs)) {
//                 result.push(elem);
//             }
//         }
//         arrs.unshift(arr0);
//     }
//     return result;
// }

// function checkInArray(elem, arrs) {
//     let flag = true;
//     for (let arr of arrs) {
//         for (let subArr of arr) {
//             if (inArray(elem, arr)) {
//                 flag = false;
//                 break;
//             }
//         }
//     }
//     return flag;
// }

// function inArray(elem, arr) {
// 	return arr.indexOf(elem) !== -1;
// }    

// console.log(getDiff([1,6, 2, 3,5], [4,1, 2, 3], [12,7,1, 2, 3]));


//====================== Деструктуризация массивов в JavaScript ====================================

// В следующем коде части массива записываются в соответствующие переменные:
// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];
// let name       = arr[0];
// let surname    = arr[1];
// let department = arr[2];
// let position   = arr[3];
// let salary     = arr[4];
// Переделайте этот код через деструктуризацию согласно изученной теории.
// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];
// let [name, surname, department, position, salary] = arr;
// console.log(position);
// console.log(name);
// console.log(salary);
// console.log(department);

// function func() {
// 	return ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];
// }
// let arr = func();
// let name       = arr[0];
// let surname    = arr[1];
// let department = arr[2];
// let position   = arr[3];
// let salary     = arr[4];
// Переделайте этот код через деструктуризацию согласно изученной теории.
// function func() {
//     return ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];
// }
// let [name, surname, department, position, salary] = func();
// console.log(position);
// console.log(name);
// console.log(salary);
// console.log(department);

// В следующем коде части массива записываются в соответствующие переменные:
// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];
// let department = arr[2];
// let position   = arr[3];
// Переделайте этот код через деструктуризацию согласно изученной теории.
// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];
// let [,, department, position,] = arr;
// console.log(department);
// console.log(position);

// В следующем коде части массива записываются в соответствующие переменные:
// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];
// let name    = arr[0];
// let surname = arr[1];
// let info = arr.slice(2); // все элементы со второго до конца массива
// Переделайте этот код через деструктуризацию согласно изученной теории.
// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000];
// let [name, surname, ...info] = arr;
// console.log(name);
// console.log(surname);
// console.log(info);

// let arr = ['Иван', 'Иванов', 'отдел разработки', 'программист'];
// let name       = arr[0];
// let surname    = arr[1];
// let department = arr[2];
// let position;
// if (arr[3] !== undefined) {
// 	position = arr[3];
// } else {
// 	position = 'джуниор';
// }
// // Переделайте этот код через деструктуризацию согласно изученной теории.
// let arr = ['Иван', 'Иванов', 'отдел разработки'];
// let [name, surname, department, position = 'джуниор'] = arr;
// console.log(name);
// console.log(surname);
// console.log(department);
// console.log(position);


//============================ Деструктуризация объектов в JavaScript ================================

// В следующем коде части объекта записываются в соответствующие переменные:
// let options = {
// 	color: 'red',
// 	width:  400,
// 	height: 500,
// };
// let color  = options.color;
// let width  = options.width;
// let height = options.height;
// Переделайте этот код через деструктуризацию согласно изученной теории.
// let options = {
//     color: 'red',
//     width: 400,
//     height: 500
// };
// let {color, width, height} = options;
// console.log(color);
// console.log(width);
// console.log(height);

// В следующем коде части объекта записываются в соответствующие переменные:
// let options = {
// 	color: 'red',
// 	width:  400,
// 	height: 500,
// };
// let c = options.color;
// let w = options.width;
// let h = options.height;
// Переделайте этот код через деструктуризацию согласно изученной теории.
// let options = {
//     color: 'red',
//     width: 500,
//     height: 400
// };
// let {color: c, width: w, height: h} = options;
// console.log(c);
// console.log(w);
// console.log(h);

// В следующем коде части объекта записываются в соответствующие переменные:
// let options = {
// 	width:  400,
// 	height: 500,
// };
// let color;
// if (options.color !== undefined) {
// 	color = options.color;
// } else {
// 	color = 'black';
// }
// let width  = options.width;
// let height = options.height;
// Переделайте этот код через деструктуризацию согласно изученной теории.
// let options = {
// 	width:  400,
// 	height: 500,
// };
// let {color = 'black', width, height} = options;
// console.log(color);
// console.log(width);
// console.log(height);

// В следующем коде части объекта записываются в соответствующие переменные:
// let options = {
// 	width:  400,
// 	height: 500,
// };
// let с;
// if (options.с !== undefined) {
// 	с = options.color;
// } else {
// 	с = 'black';
// }
// let w = options.width;
// let h = options.height;
// Переделайте этот код через деструктуризацию согласно изученной теории.
// let options = {
//     width:  400,
//     height: 500,
// };
// let {color: c = 'black', width: w, height: h} = options;
// console.log(c);
// console.log(w);
// console.log(h);


//======================== Деструктуризация параметров функций в JavaScript ===========================

// Переделайте следующий код через деструктуризацию согласно изученной теории:
// function func(employee) {
// 	let name       = employee[0];
// 	let surname    = employee[1];
// 	let department = employee[2];
// 	let position   = employee[3];
// 	let salary     = employee[4];
// }
// func( ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000] );

// func( ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000] );
// function func([name, surname, department, position, salary]) {
//     console.log(name);
//     console.log(surname);
//     console.log(department);
//     console.log(position);
//     console.log(salary);
// }

// Переделайте следующий код через деструктуризацию согласно изученной теории:
// function func(employee) {
// 	let name     = employee[0];
// 	let surname  = employee[1];
// 	let info     = employee.slice(2);
// }
// func( ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000] );

// func( ['Иван', 'Иванов', 'отдел разработки', 'программист', 2000] );
// function func([name, surname, ...info]) {
//     console.log(name);
//     console.log(surname);
//     console.log(info);
// }

// Переделайте следующий код через деструктуризацию согласно изученной теории:
// function func(employee) {
// 	let name       = employee[0];
// 	let surname    = employee[1];
// 	let department = employee[2];
// 	let position;
// 	if (arr[3] !== undefined) {
// 		position = arr[3];
// 	} else {
// 		position = 'джуниор';
// 	}
// }
// func( ['Иван', 'Иванов', 'отдел разработки'] );

// func( ['Иван', 'Иванов', 'отдел разработки'] );
// function func([name, surname, department, position = 'джуниор']) {
//     console.log(name);
//     console.log(surname);
//     console.log(department);
//     console.log(position);
// }

// Переделайте следующий код через деструктуризацию согласно изученной теории:
// function func(department, employee, hired) {
// 	let name     = employee[0];
// 	let surname  = employee[1];	
// 	let year  = hired[0];
// 	let month = hired[1];
// 	let day   = hired[2];
// }
// func( 'отдел разработки', ['Иван', 'Иванов'], '2018-12-31' );

// func( 'отдел разработки', ['Иван', 'Иванов'], '2018-12-31' );
// function func(department, [name, surname], hired) {
//     console.log(department);
//     console.log(name);
//     console.log(surname);
//     console.log(hired);
// }

// Переделайте следующий код через деструктуризацию согласно изученной теории:
// function func(options) {
// 	let color  = options.color;
// 	let width  = options.width;
// 	let height = options.height;
// }
// func( {color: 'red', width: 400, height: 500} );
// function func({color, width, height}) {
//     console.log(color);
//     console.log(width);
//     console.log(height);
// }
// func( {color: 'red', width: 400, height: 500} );

// Переделайте следующий код через деструктуризацию согласно изученной теории:
// function func(options) {
// 	let width  = options.width;
// 	let height = options.height;
// 	let color;
// 	if (options.color !== undefined) {
// 		color = options.color;
// 	} else {
// 		color = 'black';
// 	}
// }
// func( {color: 'red', width: 400, height: 500} );
// function func({color = 'black', width, height}) {
//     console.log(color);
//     console.log(width);
//     console.log(height);
// }
// func( {width: 400, height: 500} );


//================================== Работа с объектом Date в JavaScript ===============================

// Выведите на экран текущий день.
// let date = new Date();
// console.log(date.getDate());

// Выведите на экран текущий месяц.
// let date = new Date();
// console.log(date.getMonth());

// Выведите на экран текущий год.
// let date = new Date();
// console.log(date.getFullYear());

//============================== Форматирование даты в JavaScript ====================================

// Выведите на экран текущую дату-время в формате 12:59:59 31.12.2014. Используйте для всех частей даты (кроме года) созданную нами функцию для добавления нуля при необходимости.
// function addZero(num) {
//     if (num >= 0 && num <= 9) {
//         return '0' + num;
//     } else {
//         return num;
//     }
// }
// let date = new Date();
// console.log(addZero(date.getHours()) + ':' + addZero(date.getMinutes()) + ':' + addZero(date.getSeconds()) + ' ' + addZero(date.getDate()) + '.' + addZero(date.getMonth() + 1) + '.' + date.getFullYear());

// Дана дата в формате год-месяц-день. Преобразуйте эту дату в формат день.месяц.год.
// let str = '1999-12-12';
// let result = str.split('-').reverse().join('.');
// console.log(result);


//================================ Получения дня недели на JavaScript =================================

// Выведите на экран номер текущего дня недели.
// let date = new Date();
// console.log(date.getDay());

// Определите, является ли текущий день недели выходным или рабочим днем.
// let date  = new Date();
// if (date.getDay() == 0 || date.getDay() == 6) {
//     console.log('сегодня выходной');
// } else {
//     console.log('рабочий день');
// }

// Определите сколько дней осталось до ближайшего воскресенья.
// let date = new Date();
// if (date.getDay() != 0) {
//     let result = 7 - date.getDay();
//     console.log(result + ' осталось до воскресения');
// } else {
//     console.log('сегодня воскресение');
// }


//===================== Вывод частей даты словом в JavaScript ====================================

// Пусть дан следующий массив:
// let months = [
// 	'янв', 'фев', 'мар', 'апр', 'май', 'июн',
// 	'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'
// ];
// Выведите с помощью этого массива название текущего месяца.
// let date = new Date();
// let month = date.getMonth();
// let months = ["янв", "фев", "март", "апр", "май", "июнь", "июль", "авг", "сент", "окт", "нояб", "дек"];
// console.log(months[month]);


//============================ Установка времени в объекте Date в JavaScript ============================

// Узнайте, какой день недели был в ваш день рождения.
// let date = new Date(2021, 12, 15);
// let day = date.getDay();
// let days = ["вс", "пн", "вт", "ср", "чт", "пт", "сб"];
// console.log(days[day]);

// let date = new Date(2021, 9, 10); // установим 5 ноября 2025 года
// let day  = date.getDay();
// let days = ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'];

// console.log(days[day]);


//=================================== Работа с getTime ============================================

// Выведите на экран timestamp, соответствующий дате 1 января 2025 года.
// let date = new Date(2025, 1, 1, 23, 59, 59);
// console.log(date.getTime());

// Выведите на экран количество дней, прошедшее между 1 марта 1988 года и 10 января 2000 года.
// let date1 = new Date(2000, 1, 10, 23, 59, 59);
// let date2 = new Date(1988, 3, 1, 23, 59, 59);
// let diff = date1.getTime() - date2.getTime();
// console.log(diff / (1000 * 60 * 60 * 24)); 

// Выведите на экран количество месяцев, прошедшее между вашим рождением и текущим моментом времени.
// let now = new Date();
// let birthday = new Date(1989, 12, 15);
// let diff = now.getTime() - birthday.getTime();
// console.log(diff / (1000 * 60 * 60 * 24 * 30));


//============================ Разница между объектами с датой в JavaScript =========================

// Выведите на экран количество миллисекунд, прошедшее между 1 сентября 2000 года и 15 февраля 2010 года.
// let date1 = new Date(2010, 2, 15);
// let date2 = new Date(2000, 9, 1);
// diff = date1 - date2;
// console.log(diff);  

// Модифицируйте предыдущую задачу так, чтобы на экран выводилась разница в днях.
// let date1 = new Date(2010, 2, 15);
// let date2 = new Date(2000, 9, 1);
// diff = date1 - date2;
// console.log(diff / (1000 * 60 * 60 * 24));

// Модифицируйте предыдущую задачу так, чтобы на экран выводилась разница в месяцах.
// let date1 = new Date(2010, 2, 15);
// let date2 = new Date(2000, 9, 1);
// diff = date1 - date2;
// console.log(diff / (1000 * 60 * 60 * 24 * 30));

// Модифицируйте предыдущую задачу так, чтобы на экран выводилась разница в годах.
// let date1 = new Date(2010, 2, 15);
// let date2 = new Date(2000, 9, 1);
// diff = date1 - date2;
// console.log(diff / (1000 * 60 * 60 * 24 * 365));


//=============================== Автоматическая корректировка дат в JavaScript =========================

// // let date = new Date(2018, 1, 31);
// // console.log(date); // какая дата будет?

// let date = new Date(2018, 12, 33);
// console.log(date); // какая дата будет?

// let date = new Date(2018, 33, 33);
// console.log(date); // какая дата будет?

// let date = new Date(2018, 0, 0);
// console.log(date); //

// Определите, в какую дату JavaScript преобразует следующий момент времени:

// let date = new Date(2018, -12, -33);
// console.log(date); // какая дата будет?

// let date = new Date(2018, 0, 1, 23, 0, 0);
// console.log(date); // какая дата будет?

// let date = new Date(2018, 0, 1, 24, 0, 0); // указываем 24-тый час
// console.log(date); 


//======================== Нахождение последнего дня месяца в JavaScript ==============================

// Оформите этот способ решения проблемы в виде функции, которая параметрами будет принимать месяц и год и возвращать номер последнего дня этого месяца.

// function getLastDay(month, year) {
//     let date = new Date(year, month, 0);
//     return date.getDate();
// }
// console.log(getLastDay(6, 2021));

// Определите, какой день недели будет в последнем дне пятого месяца 2025 года.
// function getLastDayWeak(month, year) {
//     let day = getLastDay(month, year);
//     return getDayOfWeak(day, month - 1, year);
// }
// console.log(getLastDayWeak(12, 2021));

// function getLastDay(month, year) {
//     let date = new Date(year, month, 0,);
//     return date.getDate();
// }
// // console.log(getLastDay(9, 2021));

// function getDayOfWeak(day, month, year) {
//     let date = new Date(year, month, day);
//     let day1 = date.getDay();
//     let days = ["вс", "пн", "вт", "ср", "чт", "пт", "сб"];
//     return days[day1];
// }
// // console.log(getDayOfWeak(30, 8, 2021));

// // Сделайте функцию isLeap, которая параметром будет принимать год и возвращать true, если этого год високосный, и false - если нет.
// function isLeap(year) {
//     let date = new Date(year, 2, 0);
//     return date.getDate() == 29;
// }
// console.log(isLeap(2021));


//=========================== Проверка корректности даты в JavaScript ==================================

// Сделайте функцию checkDate, которая будет выполнять описанную проверку. Пусть функция возвращает true, если дата корректна и false, если нет. Пример работы этой функции для 31 января и 32 января:
// function checkDate(year, month, day) {
//     let date = new Date(year, month, day);
//     return date.getFullYear() == year && date.getMonth() == month && date.getDate() == day;
// }
// // console.log(checkDate(2025, 0, 31)); // выведет true
// console.log(checkDate(2025, 0, 32)); // выведет false


//========================= Получение моментов времени в JavaScript ====================================

// Определите, какой день недели будет 31 декабря текущего года.
// let now = new Date();
// let date = new Date(now.getFullYear(), 11, 31);
// console.log(date.getDay());

// Определите, какой день недели будет 1 числа текущего месяца.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), 1);
// let day = date.getDay();
// let days = ["вс", "пн", "вт", "ср", "чт", "пт", "сб"];
// console.log(days[day]);

// Определите, какой день недели будет 31 декабря следующего года.
// let now = new Date();
// let date = new Date(now.getFullYear() + 1, 11, 31);
// let day = date.getDay();
// let days = ["вс", "пн", "вт", "ср", "чт", "пт", "сб"];
// console.log(days[day]);

// Определите, какой день недели будет через год в такую же дату, как сегодня.
// let now = new Date();
// let date = new Date(now.getFullYear() + 1, now.getMonth(), now.getDate());
// let day = date.getDay();
// let days = ["вс", "пн", "вт", "ср", "чт", "пт", "сб"];
// console.log(days[day]);

// Определите, какой день недели был год назад в такую же дату, как сегодня.
// let now = new Date();
// let date = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());
// let day = date.getDay();
// let days = ["вс", "пн", "вт", "ср", "чт", "пт", "сб"];
// console.log(days[day]);

// Определите, какой день недели был месяц назад в такой же день месяца, как сегодня.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
// let day = date.getDay();
// let days = ["вс", "пн", "вт", "ср", "чт", "пт", "сб"];
// console.log(days[day]);

// Определите, сколько дней между 1 января и 10 сентября текущего года.
// let date1 = new Date(2021, 0, 1);
// let date2 = new Date(2021, 8, 10);
// console.log((date2 - date1) / (1000 * 60 * 60 * 24));

// Определите, сколько дней между 20 числом текущего месяца и 10 числом следующего.
// let now = new Date();
// let date1 = new Date(now.getFullYear(), now.getMonth(), 20);
// let date2 = new Date(now.getFullYear(), now.getMonth() + 1, 10);
// console.log((date2 - date1) / (1000 * 60 * 60 * 24));

// Определите, сколько часов прошло между вчерашним полднем и текущим моментом времени.
// let now = new Date();
// let date1 = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 12);
// let date2 = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1, 12);
// console.log((date1 - date2) / (1000 * 60 * 60));


// Определите, сколько часов прошло между началом дня и текущим моментом времени.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate());
// console.log((now - date) / (1000 * 60 * 60));

// Определите, сколько часов осталось до конца дня.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);
// console.log((date - now) / (1000 * 60 * 60));

// Рассмотрите промежуток от 2000 года до текущего года. Определите, сколько раз 1 января в этом промежутке попадало на выходной день, то есть на субботу или на воскресенье.
// let now = new Date();
// let sum = 0;
// for (let year = 2000; year <= now.getFullYear(); year++) {
// 	let date = new Date(year, 0, 1);
// 	if (date.getDay() == 0 || date.getDay() == 6) {
// 		sum += 1;
// 	}
// }
// console.log(sum);


//===================== Практика на получение моментов времени в JavaScript =============================

// Определите, сколько секунд прошло с начала дня до настоящего момента времени.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate());
// console.log((now - date) / 1000);

// Определите, сколько секунд секунд осталось до конца дня.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);
// console.log((date - now) / 1000);

// Определите, сколько дней осталось до нового года.
// let now = new Date();
// let date1 = new Date(2022, 0, 1);
// console.log((date1 - now) / (1000 * 60 * 60 * 24));

// Определите, сколько пятниц 13-е в текущем году.
// let now = new Date();
// let year = now.getFullYear();
// let sum = 0;
// for (let month = 0; month <= 11; month++) {
//     let date = new Date(year, month, 13);
//     if (date.getDay() == 5) {
//         sum += 1;
//     }
// }
// console.log(sum);

// Определите, какой год был 3 месяца назад
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth() - 3);
// console.log(date.getFullYear());

// Определите, какой день недели будет в последнем дне текущего месяца.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), 30);
// console.log(date.getDay());

// Напишите код, который будет определять, високосный ли текущий год.
// let now = new Date();
// let date = new Date(now.getFullYear() - 1, 2, 0);
// if (date.getDate() == 29) {
//     console.log('высокосный год');
// } else {
//     console.log('не высокосный год');
// }

// Напишите код, который будет находить предыдущий високосный год.
// let now = new Date();
// let sum = 0
// // while (year == 0) {
// //     if (date.getDate() == 29) {
// //         console.log(year + ' - высокосный год');
// //         break;
// //     } else {
// //         year--;
// //     }
// // }
// for (let year = now.getFullYear(); year >= 2000; year--) {
//     if (now.getDate() == 29) {
//         console.log(year + ' - высокосный год');
//     } else {
//         sum += 1;
//         console.log(sum);
//     }
// } неполучилось(((


//=========================== Строковое сравнение дат на JavaScript =======================================

// Напишите код, который сравнит две приведенные ниже даты и выведет сообщение о том, какая из них больше:
// let date1 = '2020-11-31';
// let date2 = '2020-12-01';
// if (date1 > date2) {
//     console.log(date1 + ' больше ' + date2);
// } else {
//     console.log(date2 + ' больше ' + date1);
// }

// Напишите код, который сравнит две приведенные ниже даты и выведет сообщение о том, какая из них больше:
// let date1 = '09-21';
// let date2 = '09-23';
// if (date1 > date2) {
//     console.log(date1 + ' больше ' + date2);
// } else {
//     console.log(date2 + ' больше ' + date1);
// }

// Дана дата, содержащая месяц и день. Определите знак Зодиака, на которую приходится эта дата.
// let date = '08.12';
// if (date >= '03.21' && date <= '04.19') {
//     console.log('Это Овен');
// }
// if (date >= '04.20' && date <= '05.20') {
//     console.log('Это Телец');
// }
// if (date >= '05.21' && date <= '06.21') {
//     console.log('Это Близнецы');
// }
// if (date >= '06.22' && date <= '07.22') {
//     console.log('Это Рак');
// }
// if (date >= '07.23' && date <= '08.22') {
//     console.log('Это Лев');
// }
// if (date >= '08.23' && date <= '09.22') {
//     console.log('Это Дева');
// }
// if (date >= '09.23' && date <= '10.23') {
//     console.log('Это Весы');
// }
// if (date >= '10.24' && date <= '11.22') {
//     console.log('Это Скорпион');
// }
// if (date >= '11.23' && date <= '11.22') {
//     console.log('Это Скорпион');
// }
// if (date >= '10.24' && date <= '12.21') {
//     console.log('Это Стрелец');
// }
// if (date >= '12.22' && date <= '01.20') {
//     console.log('Это Козерог');
// }
// if (date >= '01.21' && date <= '02.18') {
//     console.log('Это Водолей');
// }
// if (date >= '02.19' && date <= '03.20') {
//     console.log('Это Скорпион');
// }


//============================ Сравнение объектов с датами в JavaScript ================================

// Получите объект с датой, содержащий текущий момент времени. Получите объект с датой, содержащий полдень текущего дня. Сравните два этих объекта и определите, был ли уже полдень или нет.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 12, 0, 0);
// if (now > date) {
//     console.log('полдень уже был');
// } else {
//     console.log('полдень еще не наступил');
// }

// Получите объект с датой, содержащий текущий момент времени. Получите объект с датой, содержащий 15 число текущего месяца. Сравните два этих объекта и определите, прошла ли уже половина месяца или нет.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), 15);
// if (now > date) {
//     console.log('половина месяца уже прошла');
// } else {
//     console.log('половина месяца еще не прошла');
// }


//========================= Количество времени до ближайшей даты на JavaScript ===========================

// Используя приведенный мною код, окончательно решите задачу.
// let now  = new Date();
// let date = new Date(now.getFullYear(), 2, 8); // текущий год
// let diff = Math.floor((date - now) / (1000 * 60 * 60 * 24));
// if (diff > 0) {
// 	console.log(diff + ' дн. осталось до 8 марта');
// } else if (diff == 0) {
// 	console.log('сегодня 8 марта');
// } else {
// 	date = new Date(now.getFullYear() + 1, 2, 8);
//     diff = Math.floor((date - now) / (1000 * 60 * 60 * 24));
//     console.log(diff + ' дн. осталось до 8 марта');
// }

// Пусть ваш День Рождения - первое марта. Определите, сколько дней осталось до вашего ближайшего дня рождения.
// let now = new Date();
// let date = new Date(now.getFullYear(), 11, 15);
// let diff = Math.floor((date - now) / (1000 * 60 * 60 * 24));
// if (diff > 0) {
// 	console.log(diff + ' д. осталось до дня рождения');
// } else if (diff == 0) {
// 	console.log('сегодня 8 марта');
// } else {
// 	date = new Date(now.getFullYear() + 1, 11, 15);
//     diff = Math.floor((date - now) / (1000 * 60 * 60 * 24));
//     console.log(diff + ' д. осталось до дня рождения');
// }

// Пусть теперь День Рождения может быть произвольным и содержится в переменных month и day. Определите, сколько дней осталось до заданного этой датой праздника. Учтите при решении, что есть счастливчики, которые родились 29 февраля. Не забудьте их учесть в вашем решении.

// function getDaysBeforeBirthday(day, month) {
//     let now = new Date();
//     let date = new Date(now.getFullYear(), month - 1, day);
//     let diff = Math.floor((date - now) / (1000 * 60 * 60 * 24));
//     if (diff > 0) {
//     console.log(diff + ' д. осталось до дня рождения');
//     } else if (diff == 0) {
//     console.log('сегодня 8 марта');
//     } else {
//     date = new Date(now.getFullYear() + 1, month - 1, day);
//     diff = Math.floor((date - now) / (1000 * 60 * 60 * 24));
//     console.log(diff + ' д. осталось до дня рождения');
//     }
// }
// getDaysBeforeBirthday(29, 2);



//================================ Основы работы с DOM в JavaScript =======================================

//============================== Получение DOM элемента в JavaScript ====================================
// Даны 3 абзаца:
// <p id="elem1">1</p>
// <p id="elem2">2</p>
// <p id="elem3">3</p>
// Запишите ссылку на каждый из абзацев в отдельную переменную и выведите содержимое каждой из этих переменных в консоль.
// let p1 = document.querySelector('#elem1');
// let p2 = document.querySelector('#elem2');
// let p3 = document.querySelector('#elem3');
// console.log(p1);
// console.log(p2);
// console.log(p3);

// let button = document.querySelector('#button');
// console.log(button);


//=================== <!-- Получение DOM элемента в JavaScript --> =====================

// let p1 = document.querySelector('#elem1');
// let p2 = document.querySelector('#elem2');
// let p3 = document.querySelector('#elem3');
// console.log(p1);
// console.log(p2);
// console.log(p3);

// Получите ссылку на первый абзац из дива с id, равным block.
// let elem = document.querySelector('.elem');
// console.log(elem);

// Получите ссылку на первый абзац из дива с классом block.
// let elem = document.querySelector('.elem');
// console.log(elem);

// Получите ссылку на первый абзац с классом www.
// let elem = document.querySelector('.www');
// console.log(elem);

// Сделайте так, чтобы по клику на первую кнопку на экран выводилось число 1, по клику на вторую - число 2, а по клику на третью - число 3.
// let button1 = document.querySelector('#button1');
// let button2 = document.querySelector('#button2');
// let button3 = document.querySelector('#button3');

// button1.addEventListener('click', function() {
//     alert(1);
// });
// button2.addEventListener('click', function() {
//     alert(2);
// });
// button3.addEventListener('click', function() {
//     alert(3);
// });


//============================ Другие типы событий в JavaScript =============================

// Дана кнопка. По двойному клику по ней выведите на экран какое-нибудь сообщение.
// let btn = document.querySelector('#elem');
// btn.addEventListener('dblclick', function() {
//     alert('ура!!!');
// });

// Дана кнопка. По наведению на нее выведите на экран какое-нибудь сообщение.
// let btn = document.querySelector('#btn');
// btn.addEventListener('mouseover', function() {
//     alert('оппа!!!');
// });

// Дана кнопка. По уходу курсора с нее выведите на экран какое-нибудь сообщение.
// let btn = document.querySelector('#btn');
// btn.addEventListener('mouseout', function() {
//     alert('круть!!!');
// });


//===================== Именованные обработчики событий в JavaScript ======================
// Сделайте так, чтобы по клику на первую кнопку выполнилась функция func1, а по клику на вторую - функция func2.
// let button1 = document.querySelector('#button1');
// let button2 = document.querySelector('#button2');
// button1.addEventListener('click', func1);
// button2.addEventListener('click', func2);
// function func1() {
//     alert(1);
// }

// function func2() {
//     alert(2);
// }


//=================== Привязывание одного обработчика ко многим элементам =========================
// Привяжите эту функцию ко всем 5-ти абзацам.
// let elem1 = document.querySelector('#elem1');
// let elem2 = document.querySelector('#elem2');
// let elem3 = document.querySelector('#elem3');
// let elem4 = document.querySelector('#elem4');
// let elem5 = document.querySelector('#elem5');

// elem1.addEventListener('mouseover', func);
// elem2.addEventListener('mouseover', func);
// elem3.addEventListener('mouseover', func);
// elem4.addEventListener('mouseover', func);
// elem5.addEventListener('mouseover', func);

// function func() {
//     alert('message');
// }


//=============== Несколько обработчиков одного события в JavaScript ===========================
// let elem = document.querySelector('#elem');
// elem.addEventListener('click', func1);
// elem.addEventListener('click', func2);
// elem.addEventListener('click', func3);
// function func1() {
//     alert('1');
// }

// function func2() {
//     alert('2');
// }

// function func3() {
//     alert('3');
// }

// Дана кнопка. Привяжите к ней три анонимных обработчика двойного клика по ней. Пусть первый обработчик выводит число 1, второй обработчик - число 2, а третий - число 3.
// let btn = document.querySelector('#btn');
// btn.addEventListener('dblclick', function() {
//     alert(1);
// });
// btn.addEventListener('dblclick', function() {
//     alert(2);
// });
// btn.addEventListener('dblclick', function() {
//     alert(3);
// });


//============================= Работа с текстом тега на JavaScript ===============================
// Даны два абзаца, содержащие своим текстом какие-то числа, и кнопка. По нажатию на кнопку выведите на экран сумму хранящихся чисел.
// let p1 = document.querySelector('#p1');
// let p2 = document.querySelector('#p2');
// let btn = document.querySelector('#btn');

// btn.addEventListener('click', function() {
//     alert(Number(p1.innerHTML) + Number(p2.innerHTML));
// });

// Даны два абзаца и две кнопки. Пусть нажатие на первую кнопку выводит текст первого абзаца, а нажатие на вторую кнопку - текст второго абзаца.
// let p1 = document.querySelector('#p1');
// let p2 = document.querySelector('#p2');
// let btn1 = document.querySelector('#btn1');
// let btn2 = document.querySelector('#btn2');

// btn1.addEventListener('click', function() {
//     alert(p1.innerHTML);
// });
// btn2.addEventListener('click', function() {
//     alert(p2.innerHTML);
// });


// Дан абзац и две кнопки. По нажатию на первую кнопку запишите в абзац слово 'привет', а по нажатию на вторую кнопку - слово 'пока'.
// let p = document.querySelector('#p');
// let btn1 = document.querySelector('#btn1');
// let btn2 = document.querySelector('#btn2');

// btn1.addEventListener('click', function() {
//     p.innerHTML = 'привет';
// });
// btn2.addEventListener('click', function() {
//     p.innerHTML = 'пока';
// });

// Даны 3 абзаца с текстом. По нажатию на первый абзац запишите в его текст число 1, по нажатию на второй абзац запишите в его текст число 2, а по нажатию на третий - запишите в его текст число 3.
// let p1 = document.querySelector('#p1');
// let p2 = document.querySelector('#p2');
// let p3 = document.querySelector('#p3');
// p1.addEventListener('click', function() {
//     p1.innerHTML = 1;
// });
// p2.addEventListener('click', function() {
//     p2.innerHTML = 2;
// });
// p3.addEventListener('click', function() {
//     p3.innerHTML = 3;
// });

// Дан абзац и кнопка. В абзаце записано какое-то число. По нажатию на кнопку возведите значение абзаца в квадрат и запишите его обратно.
// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     p.innerHTML = Number(p.innerHTML) ** 2;
// });

// Дан абзац с числом и кнопка. По нажатию на кнопку прибавьте к значению абзаца единицу и запишите полученное число обратно.
// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     p.innerHTML = Number(p.innerHTML) + 1;
// });

// Дан абзац с текстом и кнопка. По нажатию на кнопку запишите в конец текста абзаца восклицательный знак.
// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     p.innerHTML = p.innerHTML + '!';
// });

// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     p.innerHTML = '!' + p.innerHTML;
// });

// Дан абзац и кнопка. По нажатию на кнопку запишите в абзац текст '<i>hello</i>'.
// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     p.innerHTML = '<i>hello</i>';
// });

// Дан абзац с текстом и кнопка. По нажатию на кнопку прочитайте текст абзаца, оберните этот текст в теги <b> и запишите новый текст обратно в абзац.
// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     p.innerHTML = '<b>' + p.innerHTML + '</b>';
// });


//==================== Работа с атрибутами тегов через свойства элементов =========================
// Дан следующий инпут:
// <input id="elem" type="email">
// Дана также кнопка. По нажатию на кнопку выведите на экран содержимое атрибута type указанного выше инпута.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     alert(elem.type);
// });

// Дан следующий инпут:
// <input id="elem" type="email">
// Дана также кнопка. По нажатию на кнопку запишите в атрибут type значение submit.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     elem.type = 'submit';
// });

// Пусть у вас есть ссылка в виде тега a, кнопка и абзац. По нажатию на кнопку выведите в абзац содержимое атрибута href ссылки.
// let a = document.querySelector('#a');
// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     p.innerHTML = a.href;
// });

// Пусть у вас есть ссылка и кнопка. По нажатию на кнопку добавьте в конец текста ссылки содержимое ее атрибута href в круглых скобках.
// let a = document.querySelector('#a');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     a.innerHTML = a.innerHTML + '(' + a.href + ')'; 
// });

// Пусть у вас есть картинка. Разместите ее на странице в помощью тега img. Пусть даны также кнопка и абзац. Сделайте так, чтобы по клику на кнопку в абзац записался путь к картинки из ее атрибута src.
// let img = document.querySelector('#img');
// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     p.innerHTML = img.src;
// });

// Дана картинка в теге img и кнопка. По нажатию на кнопку в атрибут width запишите значение 300.
// let img = document.querySelector('#img');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     img.width = 300;
// });

// Дана картинка в теге img и кнопка. Пусть в атрибуте width задана некоторая ширина. Сделайте кнопку, по нажатию на которую ширина картинки будет увеличиваться в 2 раза.
// let img = document.querySelector('#img');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     img.width = img.width * 2;
// });

// Пусть у вас есть две картинки. Сделайте на странице тег img и две кнопки. По нажатию на первую кнопку запишите в атрибут src путь к первой картинке, а по нажатию на вторую - путь ко второй картинке.
// let img = document.querySelector('#img');
// let btn1 = document.querySelector('#btn1');
// let btn2 = document.querySelector('#btn2');
// btn1.addEventListener('click', function() {
//     img.src = 'https://static4.depositphotos.com/1000423/454/i/600/depositphotos_4548401-stock-photo-symbol-of-yin-and-yang.jpg';
// });
// btn2.addEventListener('click', function() {
//     img.src = 'https://st.depositphotos.com/1288351/3081/i/600/depositphotos_30815063-stock-photo-paint-smears.jpg';
// });


//============================= Работа с текстовыми полями в JavaScript ===============================
// Сделайте кнопку, нажатие на которую будет выводить текущий текст инпута. После захода на страницу нажмите на кнопку, чтобы увидеть текущий текст инпута, затем поредактируйте текст в инпуте и еще раз нажмите на кнопку. Убедитесь в том, что выведется новый текст инпута.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     alert(elem.value);
// });

// Дан инпут и кнопка. По нажатию на кнопку запишите в инпут какой-нибудь текст.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     elem.value = 'какой-нибудь текст';
// });

// Дан инпут, абзац и кнопка. По нажатию на кнопку запишите в абзац текст из инпута.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// let p = document.querySelector('#p');
// btn.addEventListener('click', function() {
//     p.innerHTML = elem.value;
// });

// Даны два инпута и кнопка. В первый инпут пользователем вводится число. По нажатию на кнопку запишите во второй инпут квадрат введенного числа.
// let elem1 = document.querySelector('#elem1');
// let elem2 = document.querySelector('#elem2');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     elem2.value = Number(elem1.value) ** 2;
// });

// Даны два инпута и кнопка. По нажатию на кнопку запишите в первый инпут значение второго инпута, а во второй инпут - значение первого. Ваш код должен работать универсально, для любых значений инпутов.
// let elem1 = document.querySelector('#elem1');
// let elem2 = document.querySelector('#elem2');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     let elem3 = elem1.value;
//     elem1.value = elem2.value;
//     elem2.value = elem3;
// });

// Даны 5 инпутов, абзац и кнопка. В инпут вводятся числа. По нажатию на кнопку запишите среднее арифметическое введенных чисел в абзац.
// let elem1 = document.querySelector('#elem1');
// let elem2 = document.querySelector('#elem2');
// let elem3 = document.querySelector('#elem3');
// let elem4 = document.querySelector('#elem4');
// let elem5 = document.querySelector('#elem5');
// let btn = document.querySelector('#btn');
// let p = document.querySelector('#p');
// btn.addEventListener('click', function() {
//     p.innerHTML = (Number(elem1.value) + Number(elem2.value) + Number(elem3.value) + Number(elem4.value) + Number(elem5.value)) / 5;
// });

// ============================ Фокус текстовых полей в JavaScript ================================
// Дан инпут. По получению фокуса запишите в него число 1, а по потери фокуса - число 2.
// let elem = document.querySelector('#elem');
// elem.addEventListener('focus', function() {
//     elem.value = 1;
// });
// elem.addEventListener('blur', function() {
//     elem.value = 2;
// });

// Дан инпут. Пусть в него вводится число. По потери фокуса выведите на экран квадрат этого числа.
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     elem.value = Number(elem.value) ** 2;
// });

// Дан инпут, в котором изначально есть какой-то текст. По получению фокуса инпутом очистите содержимое этого инпута.
// let elem = document.querySelector('#elem');
// elem.addEventListener('focus', function() {
//     elem.value = '';
// });


// ========================== Исключения при работе с атрибутами в JavaScript =========================
// Дан див:
// <div id="elem" class="content no-gap"></div>
// Дана также кнопка. По нажатию на кнопку прочитайте и выведите на экран значение атрибута class нашего дива.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     alert(elem.className);
// });

// Дан див:
// <div id="elem"></div>
// Дана также кнопка. По нажатию на кнопку запишите в атрибут class нашего дива какой-нибудь класс.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     elem.className = 'this class';
// });

// Дан див с несколькими CSS классами, записанными через пробел:
// <div id="elem" class="aaa bbb ccc"></div>
// Дана также кнопка. По нажатию на кнопку получите массив CSS классов нашего дива.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     let str = elem.className;
//     let arr = str.split(' ');
//     console.log(arr);
// });


//======================= Цепочки методов и свойств в JavaScript ==================================
// Дан следующий код:
// <img id="image" src="avatar.png">
// let image = document.querySelector('#image');
// console.log(image.src);
// Переделайте приведенный выше код так, чтобы вместо введения переменной image использовалась цепочка.
// console.log(document.querySelector('#image').src);

// <img id="image" src="avatar.png" width="300" height="500">
// console.log(document.querySelector('#image').src);
// console.log(document.querySelector('#image').width);
// console.log(document.querySelector('#image').height);
// Укажите на недостатки данного кода. Исправьте их.
// let elem = document.querySelector('#elem');
// console.log(elem.src);
// console.log(elem.width);
// console.log(elem.height);

// Дан инпут. По получению фокуса этим инпутом запишите в него число 1, а по потери фокуса - число 2. Для обращения у инпуту внутри функции-обработчика используйте объект this.
// let elem = document.querySelector('#elem');
// elem.addEventListener('focus', function() {
//     this.value = 1;
// });
// elem.addEventListener('blur', function() {
//     this.value = 2;
// });

// Дана кнопка, значением которой служит число 1. Сделайте так, чтобы по клику на эту кнопку ее значение каждый раз увеличивалось на единицу.
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     this.innerHTML = Number(this.innerHTML) + 1;
// });

// Даны 5 абзацев с какими-то текстами. По клику на любой абзац запишите в конец его текста восклицательный знак.
// let p1 = document.querySelector('#p1');
// let p2 = document.querySelector('#p2');
// let p3 = document.querySelector('#p3');
// let p4 = document.querySelector('#p4');
// let p5 = document.querySelector('#p5');

// p1.addEventListener('click', func);
// p2.addEventListener('click', func);
// p3.addEventListener('click', func);
// p4.addEventListener('click', func);
// p5.addEventListener('click', func);

// function func() {
//     this.innerHTML = this.innerHTML + '!';
// }

// Даны 3 инпута, в которых записаны какие-то числа. По потери фокуса в любом из инпутов возведите стоящее в нем число в квадрат.
// let elem1 = document.querySelector('#elem1');
// let elem2 = document.querySelector('#elem2');
// let elem3 = document.querySelector('#elem3');

// elem1.addEventListener('blur', func);
// elem2.addEventListener('blur', func);
// elem3.addEventListener('blur', func);

// function func() {
//     this.value = Number(this.value) ** 2;
// }


//============================= Получение группы элементов ====================================
// Даны абзацы и кнопка. По нажатию на кнопку найдите все абзацы, переберите из циклом и установите текст каждого абзаца в значение 'text'.
// let elems = document.querySelectorAll('.par');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     for (let elem of elems) {
//         elem.innerHTML = 'текст';
//     }
// });

// Даны абзацы с текстом и кнопка. По нажатию на кнопку запишите в конец текста каждого абзаца его порядковый номер.
// let elems = document.querySelectorAll('.par');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     for (let i = 0; i < elems.length; i++) {
//         elems[i].innerHTML += i + 1; 
//     }
// });

// Даны инпуты с числами, абзац и кнопка. По нажатию на кнопку найдите сумму чисел из инпутов и запишите эту сумму в текст абзаца.
// let elems = document.querySelectorAll('.digits');
// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     let sum = 0;
//     for (let elem of elems) {
//         sum += Number(elem.value);
//     }
//     p.innerHTML = sum;
// });

// Дана следующая функция:
// function func() {
//     this.value = Number(this.value) + 1;
// }
// Даны также инпуты. Сделайте так, чтобы по потери фокуса в любом из наших инпутов выполнялась приведенная выше функция.
// let elems = document.querySelectorAll('.class');
// for (let elem of elems) {
//     elem.addEventListener('blur', func);
// }

// function func() {
//     this.value = Number(this.value) + 1;
// }

// Даны абзацы с числами. Сделайте так, чтобы по клику на любой абзац его число в нем возводилось в квадрат.
// let elems = document.querySelectorAll('.class');
// for (let elem of elems) {
//     elem.addEventListener('click', func);
// }

// function func() {
//     this.innerHTML = Number(this.innerHTML) ** 2;
// }

// Дан следующий код:
// <div>1</div>
// <div>2</div>
// <div>3</div>
// <div>4</div>
// <div>5</div>
// let divs = document.querySelectorAll('div');
// for (let div of divs) {
//     div.addEventListener('click', func);
// }

// function func() {
//     this.innerHTML++;
// }
// Сделайте функцию-обработчик анонимной.
// let divs = document.querySelectorAll('div');
// for (let div of divs) {
//     div.addEventListener('click', function() {
//         this.innerHTML++;
//     });
// }


//====================== Отвязывание событий через removeEventListener ================================
// Дана ссылка. По нажатию на эту ссылку добавьте в конец ее текста содержимое ее атрибута href в круглых скобках. Сделайте так, чтобы это добавление происходило лишь по первому нажатию.
// let link = document.querySelector('#link');
// link.addEventListener('click', func);

// function func() {
//     link.innerHTML = link.innerHTML + '(' + link.href + ')';
//     this.removeEventListener('click', func);
// }

// Дана кнопка, значением которой служит число 1. Сделайте так, чтобы по клику на эту кнопку ее значение каждый раз увеличивалось на единицу. После того, как значение кнопки достигнет 10 - отвяжите обработчик события, чтобы кнопка больше не реагировала на нажатие.
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', func);

// function func() {
//     if (btn.innerHTML < 10) {
//         btn.innerHTML = Number(btn.innerHTML) + 1;
//     } else {
//         this.removeEventListener('click', func);
//     }
// }


//========================== Отвязывание обработчиков событий в цикле ===============================
// Даны абзацы. По нажатию на любой из абзацев добавьте ему в конец восклицательный знак. Сделайте так, чтобы это добавление происходило лишь по первому нажатию.
// let elems = document.querySelectorAll('p');
// for (let elem of elems) {
//     elem.addEventListener('click', func);
// }

// function func() {
//     this.innerHTML += '!';
//     this.removeEventListener('click', func);
// }


//============================= Отвязывание анонимных функций в JavaScript ===========================
// Пусть мы хотим отвязать эту функцию от абзаца после клика по этому абзацу. Нас, однако, ждет проблема: у функции нет имени, а значит мы не сможем обратится к ней по этому имени, чтобы отвязать ее.
// Для решения проблему нужно дать имя функции, сделав из нее именованное функциональное выражение.

// let elems = document.querySelectorAll('p');

// for (let elem of elems) {
//     elem.addEventListener('click', function func() {
//         alert(this.innerHTML);
//         this.removeEventListener('click', func); // отвязываем функцию
//     });
// }    



//=========================== Работа с атрибутами через методы в JavaScript ===========================
// <input id="elem" value="text">
// Получите значение его атрибута value.   
// let elem = document.querySelector('#elem');
// let value = elem.getAttribute('value');
// console.log(value);

// <input id="elem" class="www zzz">
// Получите значение его атрибута class.
// let elem = document.querySelector('#elem');
// let clas = elem.getAttribute('class');  
// console.log(clas);

// <input id="elem">
// Установите его атрибут value в значение 'text'.
// let elem = document.querySelector('#elem');
// elem.setAttribute('value', 'text');

// <input id="elem">
// Установите ему атрибут class в значение 'valid'.

// let elem = document.querySelector('#elem');
// elem.setAttribute('class', 'valid');

// <input id="elem" value="text">
// Удалите у него атрибут value.
// let elem = document.querySelector('#elem');
// elem.removeAttribute('value');

// <input id="elem" value="text">
// Проверьте наличие у него атрибута value.
// let elem = document.querySelector('#elem');
// console.log(elem.hasAttribute('value'));


//============================== Разница между способами получения атрибутов ===========================
// Дан инпут с каким-то начальным значением. Дана также кнопка. По нажатию на кнопку определите, было ли изменено пользователем начальное значение инпута.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     if (elem.value == elem.getAttribute('value')) {
//         alert('значение не изменилось');
//     } else {
//         alert('значение поменялось');
//     }
// });

// Дан инпут с каким-то начальным значением. Пусть пользователь меняет это значение. Сделайте рядом с инпутом кнопку, по нажатию на которую value инпута вернется в изначальное значение.
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     if (elem.value != elem.getAttribute('value')) {
//        elem.value = elem.getAttribute('value');
//     }
// });


//========================== Манипулирование CSS классами в JavaScript ================================
// Дан элемент:
// <p id="elem" class="www ggg zzz"></p>
// Узнайте количество его классов.
// let elem = document.querySelector('#elem');
// let classNames = elem.classList;
// console.log(classNames.length);

// <p id="elem" class="www ggg zzz"></p>
// Переберите в цикле его классы.
// let elem = document.querySelector('#elem');
// let classNames = elem.classList;
// for (let className of classNames) {
//     console.log(className);
// }

// Дан элемент:
// <p id="elem" class="www ggg zzz"></p>
// Добавьте ему класс xxx.
// let elem = document.querySelector('#elem');
// elem.classList.add('xxx');

// Удалите у него класс www и класс zzz.
// let elem = document.querySelector('#elem');
// elem.classList.remove('zzz', 'www');

// Проверьте наличие у него класса ggg.
// let elem = document.querySelector('#elem');
// console.log(elem.classList.contains('ggg'));

// Дан элемент. Добавьте ему класс www, если его нет и удалите - если есть.
// let elem = document.querySelector('#elem');
// elem.classList.toggle('www');


//================= Стилизация элементов через атрибут style в JavaScript ==========================
// Дан див и кнопка. По клику на кнопку добавьте диву ширину, высоту и границу.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     elem.style.width = '120px';
//     elem.style.height = '120px';
//     elem.style.border = 'solid';
// });

// Дан див с текстом и кнопка. По клику на кнопку установите диву размер шрифта в 20px, а также верхнюю границу и фон.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     elem.style.fontSize = '20px';
//     elem.style.borderTop = 'solid';
//     elem.style.backgroundColor = 'blue';
// });


//====================== Стилизация с помощью CSS классов на JavaScript ============================

// Дан абзац. Даны кнопки 'перечеркнуть', 'сделать жирным', 'сделать красным'. Пусть по нажатию на каждую кнопку заданное действие происходит с абзацем (становится красным, например).
// let elem = document.querySelector('#elem');
// let btn1 = document.querySelector('#btn1');
// let btn2 = document.querySelector('#btn2');
// let btn3 = document.querySelector('#btn3');

// btn1.addEventListener('click', function() {
//     elem.classList.toggle('cross-out');
// });
// btn2.addEventListener('click', function() {
//     elem.classList.toggle('bold');
// });
// btn3.addEventListener('click', function() {
//     elem.classList.toggle('colored');
// });

// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     elem.classList.toggle('active');
// });


//============================= Нахождение элементов по родственным связям =================================
// Найдите первого потомка этого элемента и сделайте его текст красного цвета.
// let elem = document.querySelector('#elem');
// let child = elem.firstElementChild.classList.toggle('colored');

// Найдите последнего потомка этого элемента и сделайте его текст красного цвета.
// let elem = document.querySelector('#elem');
// let child = elem.lastElementChild.classList.toggle('colored');

// Найдите всех потомков этого элемента и добавьте им в конец текст '!'.
// let elem = document.querySelector('#elem');
// let children = elem.children;
// for (let child of children) {
//     child.innerHTML += '!';
// }

// Найдите его родителя и задайте ему красную границу.
// let elem = document.querySelector('#elem');
// let parent = elem.parentElement.classList.toggle('brd')

// Найдите его родителя его родителя и задайте ему красную границу.
// let elem = document.querySelector('#elem');
// let parent = elem.parentElement.parentElement.classList.toggle('brd');

// Найдите ближайшего родителя этого элемента, являющегося тегом div.
// let elem = document.querySelector('#elem');
// let parent = elem.closest('div');
// console.log(parent.id);

// let elem = document.querySelector('#child');
// let parent = elem.closest('.www');
// console.log(parent.id);


// Найдите его соседа сверху и добавьте ему в конец текст '!'.
// let elem = document.querySelector('#elem');
// elem.previousElementSibling.innerHTML = elem.previousElementSibling.innerHTML + '!';

// Найдите его соседа снизу и добавьте ему в конец текст '!'.
// let elem = document.querySelector('#elem');
// elem.nextElementSibling.innerHTML += '!';

// Найдите его соседа снизу его соседа снизу (следующий элемент за соседним) и добавьте ему в конец текст '!'.
// let elem = document.querySelector('#elem');
// let neighbor = elem.nextElementSibling;
// neighbor.nextElementSibling.innerHTML += '!';

// Поменяйте местами текст его соседа сверху и текст его соседа снизу.
// let elem = document.querySelector('#elem');
// let neighborUp = elem.previousElementSibling;
// let neighborDown = elem.nextElementSibling;
// let some = neighborUp.innerHTML;
// neighborUp.innerHTML = neighborDown.innerHTML;
// neighborDown.innerHTML = some;


//========================= Другие полезные методы для поиска элементов =================================
// Получите этот элемент с помощью метода getElementById и установите ему какой-нибудь текст.
// let elem = document.getElementById('elem');
// elem.innerHTML = 'what about lorem???'

// Получите все теги li по имени тега и сделайте их текст красного цвета.
// let elems= document.getElementsByTagName('li');
// for (let elem of elems) {
//     elem.classList.toggle('colored');
// }

// Получите эти элементы по имени класса и сделайте их текст красного цвета.
// let elems = document.getElementsByClassName('www');
// for (let elem of elems) {
//     elem.classList.toggle('colored');
// }


//========================= Поиск элементов внутри другого элемента ===================================
// Найдите внутри родителя элементы с классом www и запишите их в переменную elems1. Затем найдите внутри родителя элементы с классом ggg и запишите их в переменную elems2.
// let parent = document.querySelector('#parent');
// let elems1 = parent.querySelectorAll('.www');
// let elems2 = parent.querySelectorAll('.ggg');


//============================= Пользовательские атрибуты в JavaScript =================================
// Сделайте так, чтобы по клику на див в конец его текста добавилось содержимое его атрибута data-text.
// let elem = document.querySelector('#elem');
// elem.addEventListener('click', function() {
//     elem.innerHTML += elem.dataset.text;
// });



// // Сделайте так, чтобы по клику на любой из дивов ему в конец записывался его порядковый номер.
// let elems = document.getElementsByTagName('div');
// for (let elem of elems) {
//     elem.addEventListener('click', function() {
//         this.innerHTML += this.dataset.num;
//     });
// }

// Дана кнопка. Сделайте так, чтобы эта кнопка считала количество кликов по ней, записывая их в какой-нибудь пользовательский атрибут. Пусть по двойному клику на эту кнопку на экран выводится, сколько кликов по этой кнопке было сделано.
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     btn.dataset.click = Number(btn.dataset.click) + 1;
// });
// btn.addEventListener('dblclick', function() {
//     alert(btn.dataset.click);
// });

// В этом инпуте в атрибуте data-length содержится количество символов, которое нужно ввести в инпут. Сделайте так, чтобы по потери фокуса, если количество введенных символов не совпадает с заданным, выводилось сообщение об этом.
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     if (elem.value.length != elem.dataset.length) {
//         alert('должно быть ' + elem.dataset.length + ' символов');
//     }
// });

// В этом инпуте атрибуты data-min и data-max содержат диапазон. Сделайте так, чтобы по потери фокуса, если количество введенных символов не попадает в этот диапазон, выводилось сообщение об этом.
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     if (elem.value.length < elem.dataset.min || elem.value.length > elem.dataset.max) {
//         alert('количество символов должно быть в диапозоне от ' + elem.dataset.min + ' до ' + elem.dataset.max);
//     }
// });

// Сделайте так, чтобы по клику на див в конец его текста добавлялась стоимость покупки, равная цене, умноженной на количество.
// let elem = document.querySelector('#elem');
// elem.addEventListener('click', function() {
//     elem.innerHTML = elem.innerHTML + ' ' + Number(elem.dataset.productPrice) * Number(elem.dataset.productAmount);
// });

// Даны абзацы. Переберите их циклом и каждому абзацу в атрибут data-num запишите порядковый номер этого абзаца. Используйте метод setAttribute.
// let elems = document.getElementsByTagName('p');
// for (let i = 0; i < elems.length; i++) {
//     elems[i].dataset.num = i ;
// }


//================================ Работа с узлами в JavaScript =======================================
// Переберите циклом все узлы этого дива и выведите их в консоль.
// let elem = document.querySelector('#elem');
// for (let node of elem.childNodes) {
//     console.log(node);
// }

// Переберите циклом все узлы этого дива и выведите в консоль их названия.
// let elem = document.querySelector('#elem');
// for (let node of elem.childNodes) {
//     console.log(node.nodeName);
// }

// Переберите циклом все узлы этого дива и выведите в консоль только узлы-элементы и текстовые узлы.
// let elem = document.querySelector('#elem');
// for (let node of elem.childNodes) {
//     if (node.nodeType == 1 || node.nodeType == 3) {
//         console.log(node);
//     }
// }

// Переберите циклом все узлы этого дива и выведите в консоль тексты всех узлов.
// let elem = document.querySelector('#elem');
// for (let node of elem.childNodes) {
//     console.log(node.textContent);
// }

// Переберите циклом все узлы этого дива и выведите в консоль тексты всех комментариев и текстовых узлов.
// let elem = document.querySelector('#elem');
// for (let node of elem.childNodes) {
//     if (node.data) {
//         console.log(node.data);
//     }
// }

// Переберите циклом все узлы этого дива и выведите в консоль тексты текстовых узлов и элементов.
// let elem = document.querySelector('#elem');
// for (let node of elem.childNodes) {
//     if (node.nodeType == 1 || node.nodeType == 3) {
//         console.log(node.textContent);
//     }
// }

// Переберите циклом все узлы этого дива и каждому узлу в конец запишите его тип.
// let elem = document.querySelector('#elem');
// for (let node of elem.childNodes) {
//     if (node.nodeType == 1) {
//         console.log(node + ' элемент');
//     }
//     if (node.nodeType == 3) {
//         console.log(node + ' текстовый');
//     }
//     if (node.nodeType == 8) {
//         console.log(node + ' комментарий');
//     }
// }


//============================= Отработка изученного материала на работу с DOM ===============================
// Дан инпут и абзац. По потери фокуса в инпуте запишите значение инпута в конец текста абзаца.
// let elem = document.querySelector('#elem');
// let p = document.querySelector('#p');
// elem.addEventListener('blur', function() {
//     p.innerHTML += elem.value;
// });

// Дано несколько инпутов, абзац и кнопка. По нажатию на кнопку получите числа, стоящие в этих инпутах и запишите их сумму в абзац.
// let put = document.querySelectorAll('.put');
// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');

// btn.addEventListener('click', function() {
//     let sum = 0;
//     for (let elem of put) {
//         sum += Number(elem.value);
//     }
//     p.innerHTML = sum;
// });

// Дан инпут. В него вводится число. По потери фокуса найдите сумму цифр этого числа.
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     let arr = elem.value.split('');
//     let sum = 0;
//     for (let el of arr) {
//         sum += Number(el);
//     }
//     console.log(sum);
// });

// Дан инпут. В него вводятся числа через запятую. По потери фокуса найдите среднее арифметическое этих чисел (сумма делить на количество).
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     let arr = elem.value.split(',');
//     let sum = 0;
//     for (let el of arr) {
//         sum += Number(el);
//     }
//     console.log(sum / arr.length);
// });

// Даны 4 инпута. В первый инпут вводится ФИО через пробел. По потери фокуса запишите фамилию, имя и отчество в остальные 3 инпута.
// let elem1 = document.querySelector('#elem1');
// let elem2 = document.querySelector('#elem2');
// let elem3 = document.querySelector('#elem3');
// let elem4 = document.querySelector('#elem4');

// elem1.addEventListener('blur', function() {
//     let arr = elem1.value.split(' ');
//     elem2.value = arr[0];
//     elem3.value = arr[1];
//     elem4.value = arr[2];
// });

// // Дан инпут. В него вводится ФИО через пробел. ФИО вводится с маленькой буквы. Сделайте так, чтобы по потери фокуса инпутом, введенные фамилия, имя и отчество автоматически стали записанными с большой буквы (в этом же инпуте).
// let elem = document.querySelector('#elem');

// elem.addEventListener('blur', function() {
//     let arr = elem.value.split(' ');
//     let result = '';
//     let fullResult = '';
//     for (let el of arr) {
//         result = el.slice(0, 1).toUpperCase() + el.slice(1);
//         fullResult = fullResult + result + ' ';
//     }
//     elem.value = fullResult;
// });

// Дан инпут. В него вводится текст. По потери фокуса узнайте количество слов в этом тексте.
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     let arr = elem.value.split(' ');
//     console.log(arr.length);
// });

// Дан инпут. В него вводится дата в формате 31.12.2016. По потери фокуса в этом же инпуте поставьте эту дату в формате 2016-12-31.
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     let arr = elem.value.split('.').reverse().join('-');
//     elem.value = arr;
// });

// Дан инпут. В него вводится слово. По нажатию на кнопку проверьте то, что это слово читается с начала и с конца одинаково (например, мадам).
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     let arr = elem.value.split('');
//     console.log(elem.value == arr.reverse().join(''));
// });

// Дан инпут. В него вводится число. Проверьте по потери фокуса, что это число содержит внутри себя цифру 3.
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     if (elem.value.indexOf(3) != -1) {
//         console.log(true);
//     } else {
//         console.log(false);
//     }
// });

// Даны несколько абзацев и кнопка. По нажатию на кнопку запишите в конец каждого абзаца его порядковый номер.
// let elems = document.getElementsByTagName('p');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     for (let i = 1; i < elems.length; i++) {
//         elems[i].innerHTML += i;
//     }
// });

// Даны ссылки. Добавьте в конец каждой ссылки ее href в круглых скобках.
// let elems = document.getElementsByTagName('a');
// for (let elem of elems) {
//     elem.innerHTML += '(' + elem.href + ')';
// }

// Даны ссылки. Если ссылка начинается с http://, то добавьте ей в конец стрелку → (делается так: &rarr;).
// let elems = document.getElementsByTagName('a');
// for (let elem of elems) {
//     if (elem.href.startsWith('https://')) {
//         elem.innerHTML += '&rarr;';
//     }
// }

// Даны несколько абзацев с числами. По нажатию на любой абзац запишите в него квадрат числа, которое в нем находится.
// let elems = document.getElementsByTagName('p');
// for (let elem of elems) {
//     elem.addEventListener('click', function() {
//         this.innerHTML = Number(this.innerHTML) ** 2;
//     });
// }

// Дан инпут. В него вводится дата в формате 31.12.2016. По потери фокуса узнайте день недели (словом), который приходится на эту дату.
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     let arr = elem.value.split('.');
//     let date = new Date(arr[2], arr[1] - 1, arr[0]);
//     let day = date.getDay();
//     let days = ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'];
//     elem.value = days[day];
// });

// Дан инпут. Реализуйте кнопочки +1, -1, которые будут увеличивать или уменьшать на 1 значение инпута. Сделайте так, чтобы это значение не могло стать меньше нуля.
// let elem = document.querySelector('#elem');
// let btnPlus1 = document.querySelector('#btnPlus1');
// let btnMinus1 = document.querySelector('#btnMinus1');

// btnPlus1.addEventListener('click', function() {
//     elem.value = Number(elem.value) + 1;
// });
// btnMinus1.addEventListener('click', function() {
//     elem.value = Number(elem.value) - 1;
//     if (elem.value < 0) {
//         elem.value = 0;
//         alert('значение не может быть меньше 0');
//     }
// });

// Дан инпут. Даны абзацы. Пусть в этот инпут записывается суммарное количество нажатий по этим абзацам.
// let el = document.querySelector('#elem');
// let elems = document.getElementsByTagName('p');

// for (let elem of elems) {
//     elem.addEventListener('click', function() {
//         el.value = Number(el.value) + 1;
//     });
// }

// На странице есть дивы. В них есть текст. Обойдите все дивы и обрежьте тот текст, который в них стоит так, чтобы он стал длиной 10 символов. И добавьте троеточие в конец обрезанного текста
// let elems = document.getElementsByTagName('div');
// for (let elem of elems) {
//     elem.innerHTML = elem.innerHTML.slice(0, 11) + '...';
// }

// Дан инпут. В него вводится число. По потери фокуса проверьте, что в нем лежит число от 1 до 100. Если это так - покрасьте инпут в зеленый цвет, а если не так - в красный.
// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', function() {
//     if (elem.value >= 1 && elem.value <= 100) {
//         elem.classList.toggle('colored-green');
//     } else {
//         elem.classList.toggle('colored-red');
//     }
// });

// Дан инпут, кнопка и абзац. В инпут вводится число. По нажатию на кнопку выведите в абзац факториал этого числа.
// let elem = document.querySelector('#input');
// let p = document.querySelector('#p');
// let btn = document.querySelector('#btn');

// btn.addEventListener('click', function() {
//    let num = Number(input.value);
//    let result = 1;
//    for (let i = 1; i <= num; i++) {
//        result *= i;
//    }
//    p.innerHTML = result;
// });


//==================================== Работа с текстареа в JavaScript ========================================
// Дан текстареа и абзац. По потери фокуса в текстареа запишите его текст в абзац.
// let elem = document.querySelector('#elem');
// let p = document.querySelector('#p');

// elem.addEventListener('blur', function() {
//     p.innerHTML = elem.value;
//     elem.value = '';
// });


//================================== Атрибут disabled в JavaScript ============================================
// Дан инпут и кнопка. По нажатию на кнопку заблокируйте инпут.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');

// btn.addEventListener('click', function() {
//     elem.disabled = true;
// });

// Дан инпут и две кнопки. Пусть нажатие на первую кнопку блокирует инпут, а нажатие на вторую - отблокирует.
// let elem = document.querySelector('#elem');
// let btnDis = document.querySelector('#btn-dis');
// let btnEn = document.querySelector('#btn-en');

// btnDis.addEventListener('click', function() {
//     elem.disabled = true;
// });
// btnEn.addEventListener('click', function() {
//     elem.disabled = false;
// });

// // Дан инпут и кнопка. По нажатию на кнопку узнайте, заблокирован инпут или нет.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');

// btn.addEventListener('click', function() {
//     if (elem.disabled) {
//         elem.value = 'Поле заблокировано';
//     } else {
//        elem.value = 'Поле не заблокировано';
//     }
// });

 
//================================== Работа с чекбоксами в JavaScript ========================================
// Дан чекбокс и две кнопки. По нажатию на первую кнопку установите чекбокс в отмеченное состояние, а по нажатию на вторую - в неотмеченное.
// let elem =document.querySelector('#elem');
// let on =document.querySelector('#on');
// let off =document.querySelector('#off');

// on.addEventListener('click', function() {
//   elem.checked;
// });
// off.addEventListener('click', function() {
//   elem.checked = false;
// });

// Дан чекбокс, кнопка и абзац. По нажатию на кнопку, если чекбокс отмечен, выведите в абзац слово 'привет', а если чекбокс не отмечен, то слово 'пока'.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');
// let text = document.querySelector('#text');

// btn.addEventListener('click', function() {
//     if (elem.checked) {
//         text.innerHTML = 'Привет';
//     } else {
//         text.innerHTML = 'Пока';
//     }
// });


//================================== Чередование атрибутов без значений ====================================
// Дан чекбокс и кнопка. Сделайте так, чтобы каждый клик по кнопке приводил к смене состояния чекбокса.
// let elem = document.querySelector('#elem');
// let btn = document.querySelector('#btn');

// btn.addEventListener('click', function() {
//     if (elem.checked) {
//         elem.checked = false;
//     } else {
//         elem.checked = true;
//     }
// });


//===================================== Работа с радиокнопками в JavaScript =======================================
// Даны 3 радиокнопки, абзац и кнопка. По клику на кнопку выведите в абзац value отмеченной радиокнопки.
// let radios = document.querySelectorAll('input[type="radio"]');
// let text = document.querySelector('#text');
// let btn = document.querySelector('#btn');

// btn.addEventListener('click', function() {
//     for (let radio of radios) {
//         if (radio.checked) {
//             text.innerHTML = radio.value;
//         }
//     }
// });


//========================================== Событие change в JavaScript ===========================================
// Дан инпут и абзац. По изменению инпута выведите его текст в абзац.
// let elem = document.querySelector('#elem');
// let text = document.querySelector('#text');

// elem.addEventListener('change', function() {
//     text.innerHTML = this.value;
// });

// Дан чекбокс. По изменению чебокса выведите на экран его новое состояние.
// let elem = document.querySelector('#elem');

// elem.addEventListener('change', function() {
//     if (elem.checked) {
//         console.log(elem.checked);
//     } else {
//         console.log(elem.checked);
//     }
// });

// Дан инпут. По его изменению проверьте, количество символов в нем меньше 5-ти или нет. Если меньше - покрасьте границу инпута в зеленый цвет, а если больше - в красный.
// let elem = document.querySelector('#elem');

// elem.addEventListener('change', function() {
//     if (this.value.length < 5) {
//         this.classList.toggle('colored-border-green');
//     } else {
//         this.classList.toggle('colored-border-red')
//     }
// });


//==================================== Событие input в JavaScript ===========================================
// Дан инпут. Пусть в него вводится текст. Как только длина текста достигнет 5-ти, выведите на экран сообщение об этом.
// let elem = document.querySelector('#elem');

// elem.addEventListener('input', function() {
//     if (this.value.length >= 5) {
//         console.log('длина текста достигла 5 символов');
//     }
// });

// // Дан инпут. Пусть в него разрешено ввести 5 символов. Дан также абзац. По мере ввода символов в инпут пишите, сколько еще символов можно ввести. Когда количество символов превысит 5-ти, то в абзац выводите то, на сколько символов превышена длина текста.
// let elem = document.querySelector('#elem');
// let text = document.querySelector('#text');

// elem.addEventListener('input', function() {
//     let i = this.value.length;
//     if (i < 5) {
//         text.innerHTML = 'можно ввести еще ' + (5 - i) + ' симв.';
//     }
//     if (i == 5) {
//         text.innerHTML = 'стоп больше вводить нельзя';
//     }
//     if (i > 5) {
//         text.innerHTML = 'длина текста превышена на ' + (i - 5) + ' симв.'
//     }
// });


//=================================== Методы focus и blur в JavaScript ========================================
// Даны два инпута. Сделайте так, чтобы после ввода двух символов фокус ввода переходил ко второму инпуту, а после ввода двух символов в этот инпут - фокус из него убирался.
// let elem1 = document.querySelector('#elem1');
// let elem2 = document.querySelector('#elem2');

// elem1.addEventListener('input', function() {
//     if (this.value.length == 2) {
//         elem2.focus();
//     }
// });
// elem2.addEventListener('input', function() {
//     if (elem2.value.length == 2) {
//         elem2.blur();
//     }
// });


//================================== Работа с выпадающими списками в JavaScript =====================================
// Дан селект, абзац и кнопка. По клику на кнопку выведите текст выбранного пункта списка в абзац.
// let select = document.querySelector('#select');
// let text = document.querySelector('#text');
// let btn = document.querySelector('#btn');

// btn.addEventListener('click', function() {
//     text.innerHTML = select.value;
// });

// Сделайте выпадающий список годов от 2020 до 2030. При выборе какого-нибудь пункта списка выведите сообщение о том, високосный этот год или нет.
// let select = document.querySelector('#select');
// // let year = select.value;
// select.addEventListener('change', function() {
//     let date = new Date(select.value, 2, 0);
//     if (date.getDate() == 29) {
//         console.log('високосный год');
//     } else {
//         console.log('невисокосный год');
//     }
// });


// Сделайте выпадающий список с названиями дней недели. В качестве атрибутов value пунктов списка добавьте номера дней недели от 1 до 7. По изменению списка выведите на экран сообщение о том, выбран выходной день или рабочий.
// let select = document.querySelector('#select');
// select.addEventListener('change', function() {
//     if (Number(select.value) >= 1 && Number(select.value) <= 5) {
//         console.log('рабочий день');
//     } else {
//         console.log('выходной день');
//     }
// });


//================================= Изменение выбранного пункта списка на JavaScript ===============================
// Сделайте выпадающий список с названиями месяцев. Сделайте так, чтобы по JavaScript по умолчанию выбирал в этом списке текущий месяц.
// let select = document.querySelector('#select');
// let date = new Date();
// select.value = date.getMonth() + 1;


//=============================== Номер выбранного пункта выпадающего списка =====================================
// Дан инпут и селект. В инпут вводится какое-то число. По потери фокуса сделайте выделенным пункт списка, номер которого равен значению из инпута.
// let elem = document.querySelector('#elem');
// let select = document.querySelector('select');

// elem.addEventListener('blur', function() {
//     select.selectedIndex = this.value - 1;
// });

// Сделайте выпадающий список с названиями дней недели. Сделайте так, чтобы по JavaScript по умолчанию выбирал в этом списке текущий день.
// let select = document.querySelector('#select');
// let date = new Date();
// select.selectedIndex = date.getDay() - 1;


//=============================== Получение пунктов выпадающего списка на JavaScript ================================
// Переберите все пункты списка циклом и в конец текста каждого пункта добавьте значение его атрибута value
// let select = document.querySelector('#select');
// for (let option of select) {
//     option.innerHTML += ' - ' + option.value; 
// }


//=========================== Работа с пунктами выпадающего списка на JavaScript =================================
// Переберите пункты списка циклом и для выбранного пункта в конец текста добавьте восклицательный знак, а для невыбранных пунктов - вопросительный.
// let select = document.querySelector('#select');
// for (let option of select) {
//     if (option.selected) {
//         option.text += '!';
//     } else {
//         option.text += '?';
//     }
// }

// Дан выпадающий список и кнопка. По клику на кнопку сделайте отмеченным последний пункт списка.
// let select = document.querySelector('#select');
// let btn = document.querySelector('#btn');

// btn.addEventListener('click', function() {
//     let lastOption = select[select.length - 1];
//     lastOption.selected = true;
// });

// Дан селект и кнопка. По нажатию на кнопку выведите на экран текст отмеченного пункта списка.
// let select = document.querySelector('#select');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     console.log(select[select.selectedIndex].text);
// });

// Дан селект и кнопка. По нажатию на кнопку добавьте в конец текста выбранного пункта восклицательный знак.
// let select = document.querySelector('#select');
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function() {
//     select[select.selectedIndex].text += '!';
// });


//================================ Основы работы с объектом Event в JavaScript ====================================
// Самостоятельно проделайте описанные манипуляции и выведите объект с событием в консоль. Изучите структуру этого объекта.
// let btn = document.querySelector('#btn');
// btn.addEventListener('click', function(event) {
//     console.log(event)
// });


//======================================= Координаты события в JavaScript =======================================
// Сделайте так, чтобы при движении мышки по странице, отображались координаты курсора, подобно тому, как это сделано в следующем образце:
// let elem = document.getElementById('elem');
// document.addEventListener('mousemove', function(event) {
//     elem.innerHTML = event.clientX + ' : ' + event.clientY; 
// });


//================================== Тип события в объекте Event в JavaScript ===================================
// Допишите код функции func так, чтобы при клике на элемент этот элемент красился в зеленый цвет, а при двойном клике - в красный.
// let elem = document.querySelector('#elem');

// elem.addEventListener('click', func);
// elem.addEventListener('dblclick', func);

// function func(event) {
// 	if (event.type == 'click') {
//         elem.classList.toggle('colored-green');
//     }
//     if (event.type == 'dblclick') {
//         elem.classList.toggle('colored-red');
//     }
// }


//================================ Элемент события в объекте Event в JavaScript ====================================
// Привяжите к тегу ul обработчик клика. В этом обработчике проверяйте с помощью свойства tagName, по какому тегу был клик. Если клик был по тегу li - добавьте в конец текста этого тега восклицательный знак. А если клик был по тегу ul - добавьте ему в конец еще один пункт списка.
// let elem = document.querySelector('#elem');
// elem.addEventListener('click', function(event) {
//     if (event.target.tagName == 'LI') {
//         event.target.innerHTML += '!'
//     }
//     if (event.target.tagName == 'UL') {
//         event.target.innerHTML += '<li>text</li>';
//     }
// });


// =============================== Получение нажатых клавиш в JavaScript ===================================
// Дан абзац и инпут. В него вводится текст и нажимается клавиша Enter. Сделайте так, чтобы по нажатию Enter введенный текст попадал в абзац под инпутом, а содержимое инпута очищалось.
// let elem = document.querySelector('#elem');
// let text = document.querySelector('#text');

// elem.addEventListener('keydown', function(event) {
//     if (event.code == 'Enter') {
//         text.innerHTML = this.value;
//     }
// });


//=========================== Отслеживание клавиш-модификаторов в JavaScrip ======================================
// Дан элемент. Сделайте так, чтобы по клику на него он красился в красный цвет, но только если в момент клика нажата клавиша Alt.
// let elem = document.querySelector('#elem');

// elem.addEventListener('click', function(event) {
//     if(event.altKey) {
//         elem.classList.toggle('colored');
//     }
// });


// Сделайте так, чтобы по клику на любую li, в конец ее текста добавлялось число 1, если нажата клавиша Ctrl, и число 2, если нажата клавиша Shift.
// let elem = document.querySelector('#elem');
// elem.addEventListener('click', function(event) {
//     if (event.target.tagName == 'LI') {
//         if (event.ctrlKey) {
//             event.target.innerHTML += 1;
//         }
//         if (event.shiftKey) {
//             event.target.innerHTML += 2;
//         }  
//     }
// });


//====================================== Отмена действия по умолчанию в JavaScript ======================================
// Даны ссылки. Сделайте так, чтобы по клику на ссылку ей в конец записывался ее href, а перехода по ссылке не происходило.
// let elems = document.querySelectorAll('a');
// for (let elem of elems) {
//     elem.addEventListener('click', function(event) {
//         event.preventDefault();
//         elem.innerHTML += elem.href;
//     });
// }

// Даны два инпута, абзац и ссылка. Пусть в инпуты вводятся числа. Сделайте так, чтобы по клику на ссылку в абзац записалась сумма введенных чисел.
// let elem1 = document.querySelector('#elem1');
// let elem2 = document.querySelector('#elem2');
// let link = document.querySelector('#link');
// let text = document.querySelector('#text');

// link.addEventListener('click', function(event) {
//     event.preventDefault();
//     text.innerHTML = Number(elem1.value) + Number(elem2.value);
// });


//====================================== Всплытие событий в JavaScript ============================================
// Самостоятельно напишите код, который будет демонстрировать всплытие событий. Проверьте на нем всплытие различных типов событий. Учтите, что всплывать могут не все события. Экспериментально найдите хотя бы одно событие, которое не будет всплывать.

// let elem1 = document.querySelector('#elem1');
// let elem2 = document.querySelector('#elem2');
// let elem3 = document.querySelector('#elem3');

// elem1.addEventListener('mouseout', function() {
//     alert('голубой');
// });
// elem2.addEventListener('mouseout', function() {
//     alert('розовый');
// });
// elem3.addEventListener('mouseout', function() {
//     alert('желтый');
// });


//================================== Получение целевого элемента при всплытии событий =====================================
// Навешайте на див обработчик клика. В этом обработчике определите, в каком из тегов сработало событие.
// let elem = document.querySelector('div');
// elem.addEventListener('click', function(event) {
//     if (event.target.tagName == 'DIV') {
//         console.log('клик по диву');
//     }
//     if (event.target.tagName == 'UL') {
//         console.log('клик по всему списку');
//     } 
//     if (event.target.tagName == 'LI') {
//         console.log('клик по элементу списка');
//     }
// });

// Модифицируйте предыдущую задачу. Сделайте так, чтобы при клике на li, ей в конец добавлялся восклицательный знак, а при клике на ul - ей в конец добавлялась новая li.
// let elem = document.querySelector('div');
// let i = 4;
// elem.addEventListener('click', function(event) {
//     if (event.target.tagName == 'DIV') {
//         console.log('клик по диву');
//     }
//     if (event.target.tagName == 'UL') {
//         event.target.innerHTML += '<li>' + i++ + '</li>'

//     } 
//     if (event.target.tagName == 'LI') {
//         event.target.innerHTML += '!';
//     }
// });


//============================== Прекращение всплытия событий в JavaScript ==========================================
// Самостоятельно реализуйте корректную работу описанной задачи.
// мы можем сделать так, чтобы при клике на кнопку отменить всплытие, родитель не реагировал на этот клик.
// let parent = document.querySelector('#parent');
// let button = document.querySelector('button');
// let block  = document.querySelector('#block');

// button.addEventListener('click', function(event) {
// 	block.classList.add('active');
//     event.stopImmediatePropagation();
// });
// parent.addEventListener('click', function() {
// 	block.classList.remove('active');
// });


//===================================== Погружение событий в JavaScript ===========================================
// elem1.addEventListener('click', function() {
// 	alert('зеленый - погружение');
// }, true);
// elem1.addEventListener('click', function() {
// 	alert('зеленый - всплытие');
// }, false);

// elem2.addEventListener('click', function() {
// 	alert('голубой - погружение');
// }, true);
// elem2.addEventListener('click', function() {
// 	alert('голубой - всплытие');
// }, false);

// elem3.addEventListener('click', function() {
// 	alert('красный - погружение');
// }, true);
// elem3.addEventListener('click', function() {
// 	alert('красный- всплытие');
// }, false);


//============================== Навешивание обработчиков на новые элементы в JavaScript ===================================
// let button = document.querySelector('button');
// let list   = document.querySelector('ul');
// let items  = list.querySelectorAll('li');

// for (let item of items) {
// 	item.addEventListener('click', handler);
// 

// button.addEventListener('click', function() {
// 	let item = document.createElement('li');
// 	item.innerHTML = 'item';
	
// 	item.addEventListener('click', handler);
	
// 	list.appendChild(item);
// });

// function handler() {
// 	this.innerHTML = this.innerHTML + '!';
// }


//=================================== Делегирование событий в JavaScript =====================================
// let btn = document.querySelector('button');
// let list = document.querySelector('ul');
// let items = list.querySelectorAll('li');

// list.addEventListener('click', function(event) {
// 	let li = event.target.closest('li');
// 	if (li) {
// 		li.innerHTML += '!';
// 	}
// });

// btn.addEventListener('click', function() {
// 	let elem = document.createElement('li');
// 	elem.innerHTML = 'item <i>italic</i> item';
// 	list.append(elem);

// 	// elem.addEventListener('click', func); / упростил
// });

// // function func() {
// // 	this.innerHTML += '!'; / упростил
// // }


//==================================== Основы работы с контекстом в JavaScript ==========================================


//====================================== Потеря контекста в JavaScript ==========================================
// "use strict";

// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', parent);

// function parent() {
// 	console.log(this); // выведет ссылку на наш инпут
	
// 	function child() {
// 		console.log(this); // выведет undefined
// 	}
// 	child();
// }

// "use strict";

// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', parent);

// function parent() {
// 	console.log(this.value); // что выведет?
	
// 	function child() {
// 		console.log(this.value); // что выведет?
// 	}
// 	child();
// }


//================================= Решение проблемы с контекстом в JavaScript ===================================
// Автор кода хотел, чтобы по потери фокуса на экран вывелся квадрат числа из value инпута. Однако, почему-то при потери фокуса в консоль выдается ошибка. Исправьте ошибку автора кода. Напишите текст, в котором вы дадите объяснение автору кода, почему возникла его ошибка.

// 1-й способ
// "use strict";

// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', func);

// function func() {
// 	let self = this;
// 	square();
// 	function square() {
// 		alert(self.value * self.value);
// 	}
// }

// Возьмите код из предыдущей задачи и исправьте проблему кода с помощью изученного второго способа.
// 2-й способ
// "use strict";

// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', func);

// function func() {
// 	square(this);
// 	function square(param) {
// 		alert(param.value ** 2);
// 	}
// }

// Возьмите код из предыдущей задачи и исправьте проблему кода с помощью изученного третьего способа.
// 3-й способ
// "use strict";

// let elem = document.querySelector('#elem');
// elem.addEventListener('blur', func);

// function func() {
// 	let square = () => {
// 		alert(this.value * this.value);
// 	}
// 	square();
// }


//===================================== Привязывание контекста через метод call в JavaScript ===============================
// С помощью метода call и функции func выведите на экран value каждого из инпутов.
// function func() {
// 	console.log(this.value);
// }

// let elem1 = document.querySelector('#elem1');
// let elem2 = document.querySelector('#elem2');
// let elem3 = document.querySelector('#elem3');

// func.call(elem1);
// func.call(elem2);
// func.call(elem3);

// let elems = document.querySelectorAll('input'); // по другому
// for (let elem of elems) { 
// 	console.log(elem.value);
// }

// Добавьте в последнюю строчку метод call так, чтобы на экран вывелось 'привет, Иванов Иван'. Слово 'привет' должно взяться из value инпута, а 'Иванов' и 'Иван' должны быть параметрами функциями.
// let elem = document.querySelector('#elem');
// function func(surname, name) {
// 	console.log(this.value + ', ' + surname + ' ' + name);
// }
// func.call(elem, 'Иванов', 'Иван'); // тут должно вывести 'привет, Иванов Иван'


//=================================== Привязывание контекста через метод apply в JavaScript ===============================
// Добавьте в последнюю строчку метод apply так, чтобы на экран вывелось 'привет, Иванов Иван'. Слово 'привет' должно взяться из value инпута, а 'Иванов' и 'Иван' должны быть параметрами функциями.
// let elem = document.querySelector('#elem');
// function func(surname, name) {
// 	console.log(this.value + ', ' + surname + ' ' + name);
// }
// func.apply(elem, ['Иванов', 'Иван']); // тут должно вывести 'привет, Иванов Иван'


//================================= Привязывание контекста через метод bind в JavaScript =================================
// Напишите в указанном месте конструкцию с методом bind так, чтобы this внутри функции func всегда указывал на инпут из переменной elem.
// let elem = document.getElementById('elem');
// function func(surname, name) {
// 	console.log(this.value + ', ' + surname + ' ' + name);
// }
// func = func.bind(elem);
// func('Иванов', 'Иван'); // тут должно вывести 'привет, Иванов Иван'
// func('Петров', 'Петр'); // тут должно вывести 'привет, Петров Петр'


//========================== Основы работы с функцией setInterval в JavaScript ====================================
// Запустите таймер, который каждые 3 секунды будет что-нибудь выводить в консоль.
// setInterval(function() {
// 	console.log('У меня все получиться!!! Я стану очень крутым программистом, за которым в очередь будут выстраиваться очень крутые компании!!!')
// }, 3000);


//================================ Счетчик через функцию setInterval в JavaScript ======================================
// Пусть дана переменная, в которой изначально хранится число 100. Запустите таймер, который каждую секунду будет уменьшать значение этой переменной на 1 и выводить это значение в консоль.
// let i = 100;
// setInterval(() => console.log(i--), 1000);


//========================================== Остановка таймера JavaScript ================================================
// Пусть дана переменная, в которой изначально хранится число 10. Запустите таймер, который каждую секунду будет уменьшать значение этой переменной на 1 и выводить это значение в консоль. Как только значение переменной достигнет нуля - остановите таймер.
// let i = 10;
// let timerId = setInterval(() => {
// 	console.log(--i);
// 	if (i <= 0) {
// 		clearInterval(timerId);
// 	}
// }, 1000);


//======================================== Кнопка для запуска таймера на JavaScript ===================================
// Сделайте кнопку, по нажатию на которую в консоль будет выводится обратный отсчет, начиная с 100.
// let start = document.querySelector('#start');
// start.addEventListener('click', function func() {
// 	let i = 100;
// 	setInterval(() => console.log(i--), 1000);

// 	this.removeEventListener('click', func)
// });


//============================== Кнопки для запуска и остановки таймера на JavaScript ===================================
// Пусть дана переменная, в которой изначально хранится число 100. Даны также две кнопки. По нажатию на первую кнопку запустите таймер, который каждую секунду будет уменьшать значение переменной на 1 и выводить новое значение в консоль. Как только значение переменной достигнет нуля - остановите таймер.

// По нажатию на вторую кнопку остановите таймер. Также остановите таймер, если вторая кнопка не была нажата, но значение переменной достигло нуля.


// let timerId;
// let start = document.getElementById('start');
// let finish = document.getElementById('stop');

// start.addEventListener('click', function func() {
// 	let i = 100;
// 	timerId = setInterval(() => {
// 		console.log(i--);

// 		if (i <= -1) {
// 			clearInterval(timerId);
// 		}
// 	}, 1000);
// 	this.removeEventListener('click', func);
// });

// finish.addEventListener('click', function func() {
// 	clearInterval(timerId);
// });

// Некоторый программист написал код, который по нажатию на кнопку запускает таймер, выводящий в консоль текущий момент времени:
// После запуска кода, однако, оказалось, что кнопка остановки не работает. Исправьте ошибку автора кода.
// let start = document.querySelector('#start');
// let finish  = document.querySelector('#stop');
// let timerId;

// start.addEventListener('click', function() {
// 	timerId = setInterval(function() {
// 		let date = new Date;
// 		console.log(date.getMinutes() + ' ' + date.getSeconds());
// 	}, 1000);
// });

// finish.addEventListener('click', function() {
// 	clearInterval(timerId);
// });

// Еще один программист также написал код для решения предыдущей задачи:
// После запуска кода, однако, опять оказалось, что кнопка остановки не работает. Исправьте ошибку автора кода.
// let start = document.querySelector('#start');
// let finish  = document.querySelector('#stop');
// let timerId;
// start.addEventListener('click', function() {
// 	timerId = setInterval(function() {
// 		let date = new Date;
// 		console.log(date.getMinutes() + ' ' + date.getSeconds());
// 	}, 1000);
// });
// finish.addEventListener('click', function() {
// 	clearInterval(timerId);
// });

// Еще один программист также написал код для решения предыдущей задачи:
// После запуска кода, однако, опять оказалось, что кнопка остановки не работает. Исправьте ошибку автора кода.
// let start = document.querySelector('#start');
// let stop  = document.querySelector('#stop');
// let timerId;
// start.addEventListener('click', function() {
// 	timerId = setInterval(function() {
// 		let date = new Date;
// 		console.log(date.getMinutes() + ' ' + date.getSeconds());
// 	}, 1000);
// });
// stop.addEventListener('click', function() {
// 	clearInterval(timerId);
// });

// Еще один программист также написал код для решения предыдущей задачи:
// После запуска кода, однако, опять оказалось, что кнопка остановки не работает. Исправьте ошибку автора кода.
// let start = document.querySelector('#start');
// let stop  = document.querySelector('#stop');
// let timerId;
// start.addEventListener('click', function() {
// 	timerId = setInterval(function() {
// 		let date = new Date;
// 		console.log(date.getMinutes() + ' ' + date.getSeconds());
// 	}, 1000);
// });
// stop.addEventListener('click', function() {
// 	clearInterval(timerId);
// });

// Приведенный мною в теоретической части код не учитывает то, что на кнопку старт можно сделать несколько нажатий. Для исправления этой проблемы можно по нажатию на кнопку старт отвязывать событие от этой кнопки, а по нажатию на кнопку стоп - привязывать обратно. Исправьте проблему.
// let timerId;
// let start = document.getElementById('start');
// let stop = document.getElementById('stop');
// start.addEventListener('click', newStart);
// stop.addEventListener('click', function() {
// 	clearInterval(timerId);
// 	start.addEventListener('click', newStart);
// });
// function newStart() {
// 	let i = 100;
// 	timerId = setInterval(() => {
// 		console.log(i--);
// 		if (i <= -1) {	
// 			clearInterval(timerId);
// 		}
// 		start.removeEventListener('click', newStart);
// 	}, 1000);
	
// } 


//=============================== Практика на таймеры и работу с DOM в JavaScript ========================================
// Пусть в инпуте в атрибуте value изначально записано число 10. Запустите таймер, который каждую секунду будет уменьшать это число на единицу.
// let elem = document.getElementById('elem');
// setInterval(() => {
// 	elem.value = Number(elem.value) - 1;
// }, 1000);

// Модифицируйте предыдущую задачу так, чтобы, как только содержимое инпута станет равно нулю, таймер прекратил свою работу.
// let elem = document.getElementById('elem');
// let timerId = setInterval(() => {
// 	elem.value = Number(elem.value) - 1;
// 	if (elem.value == 0) {
// 		clearInterval(timerId);
// 	}
// }, 1000);


//==================================== Таймеры и потеря контекста в JavaScript ===========================================
// Автор кода хотел, чтобы по нажатию на кнопку, значение этой кнопки каждую секунду увеличивалось на 1. Однако, по нажатию на кнопку вообще ничего не происходит. Исправьте ошибку автора кода. Напишите текст, в котором вы дадите объяснение автору кода, почему возникла его ошибка.
// let elem = document.querySelector('#elem');
// elem.addEventListener('click', function() {
// 	let self = this;
// 	setInterval(function() {
// 		self.value = Number(self.value) + 1;
// 	}, 1000);
// });
// Исправьте проблему предыдущей задачи через стрелочную функцию.
// let elem = document.querySelector('#elem');
// elem.addEventListener('click', function() {
// 	setInterval( () => this.value = Number(this.value) + 1, 1000);
// });


//===================================== Передача контекста параметром функции setInterval ==================================
// Автор кода хотел, чтобы по нажатию на кнопку, значение этой кнопки каждую секунду уменьшалось на 1. Однако, по нажатию на кнопку вообще ничего не происходит. Исправьте ошибку автора кода, используя изученный в данном уроке способ.
// let elem = document.querySelector('#elem');
// elem.addEventListener('click', function() { // через объявленную функцию
// 	setInterval(func, 1000, this);
// 	function func(self) {
// 		self.value--;
// 	}
// });
// elem.addEventListener('click', function() { // через анонимную функцию
// 	setInterval(function(self) {
// 		self.value--;
// 	}, 1000, this);
// });


//============================ Практика на таймеры и работу с DOM в JavaScript ==========================================
// Дана кнопка. Дан абзац, текстом которого является число. По нажатию на кнопку запустите таймер, который каждую секунду будет увеличивать текст абзаца на 1.
// let btn = document.getElementById('btn');
// let text = document.getElementById('text');
// btn.addEventListener('click', function() {
// 	setInterval(() => {
// 		text.innerHTML = Number(text.innerHTML) + 1;
// 	}, 1000);
// });

// Дана кнопка. Дан абзац, текстом которого является число, например, 10. По нажатию на кнопку запустите таймер, который каждую секунду будет уменьшать текст абзаца на 1. Как только значение абзаца станет равно нулю - остановите таймер.
// let btn = document.getElementById('btn');
// let text = document.getElementById('text');
// btn.addEventListener('click', function() {
// 	let timerId = setInterval(() => {
// 		text.innerHTML = Number(text.innerHTML) - 1;
// 		if (text.innerHTML == 0) {
// 			clearInterval(timerId);
// 		}
// 	}, 1000);
// });


// Дан инпут с числом. Сделайте так, чтобы каждую секунду в нем появлялся квадрат того числа, которое в нем записано.
// let elem = document.getElementById('elem');
// setInterval(func, 1000, elem);
// function func(self) {
// 	self.value = Number(self.value) ** 2;
// }

// Дан инпут. В него вводится число. По потери фокуса сделайте так, чтобы в абзаце ниже начал тикать обратный отсчет, начиная с введенного числа. Когда отсчет дойдет до нуля - он должен закончится.
// let elem = document.getElementById('elem');
// let text = document.getElementById('text');
// elem.addEventListener('blur', function() {
// 	text.innerHTML = this.value;
// 	let timerId = setInterval(function() {
// 		text.innerHTML = Number(text.innerHTML) - 1;
// 		if (text.innerHTML == 0) {
// 			clearInterval(timerId);
// 		}
// 	}, 1000);
// });

// Дан инпут, кнопка и абзац. В инпут вводится какое-то число. По нажатию на кнопку запишите введенное число в текст абзаца и запустите обратный отсчет в абзаце: пусть каждую секунду число в абзаце уменьшается на единицу, пока не дойдет до нуля.
// let elem = document.getElementById('elem');
// let btn = document.getElementById('btn');
// let text = document.getElementById('text');
// btn.addEventListener('click', function() {
// 	text.innerHTML = elem.value;
// 	let timerId = setInterval(function() {
// 		text.innerHTML--;
// 		if (text.innerHTML == 0) {
// 			clearInterval(timerId);
// 		}
// 	}, 1000);
// });

// Дан абзац и две кнопки. Сделайте так, чтобы по нажатию на первую кнопку в абзаце начал тикать таймер от 1 до бесконечности, а по нажатию на вторую таймер останавливался.
// let timer = document.getElementById('timer');
// let start = document.getElementById('start');
// let stop = document.getElementById('stop');
// let timerId;
// let i = 1;
// start.addEventListener('click', func);
// stop.addEventListener('click', function() {
// 	clearInterval(timerId);
// 	start.addEventListener('click', func);
// });
// function func() {
// 	timer.innerHTML = i;
// 	timerId = setInterval(function() {
// 		timer.innerHTML = Number(timer.innerHTML) + 1;
// 		i = Number(timer.innerHTML);
// 	}, 1000);
// 	start.removeEventListener('click', func);
// }

// Дан абзац. Сделайте так, чтобы каждую секунду он менял свой цвет с красного на зеленый и наоборот.
// let elem = document.getElementById('text');
// let i = 1;
// elem.classList.add('colored-red');
// setInterval(function() {
// 	i += 1;
// 	if (i % 2 == 0) {
// 		elem.classList.add('colored-green');
// 		elem.classList.remove('colored-red');
// 	} else {
// 		elem.classList.add('colored-red');
// 		elem.classList.remove('colored-green');
// 	}
// }, 1000);

// Если выводить на экран каждую секунду текущий момент времени, то можно сделать тикающие часы. Реализуйте такие же часики, как показано ниже в образце:
// let clock = document.getElementById('clock');
// setInterval(function() {
// 	let date = new Date();
// 	let	h = addZero(date.getHours());
// 	let	m = addZero(date.getMinutes());
// 	let	s = addZero(date.getSeconds());
// 	clock.innerHTML = h + ':' + m + ':' + s;
// }, 1000);

// function addZero(num) {
// 	if (num <= 9) {
// 		return '0' + num;
// 	} else {
// 		return num;
// 	}
// }


//==================================== Функция setTimeout в JavaScript ========================================
// Дан абзац. Напишите код, который выведет сообщение в этот абзац через 10 секунд после загрузки страницы.
// let text = document.getElementById('text');
// setTimeout(function() {
// 	text.innerHTML = 'Ты станешь крутым программистом и самые крутые компании будут выстраиваться в очередь, чтобы ты на них поработал!!!!!!';
// }, 10000);

// Выведите в консоль число 0. Через секунду выведите число 1, через две секунды выведите число 2, через 3 секунды выведите число 3. И так далее до бесконечности.
// let i = 1;
// setTimeout(function timer() {  // не решил
// 	console.log(i++);
// 	timer();
// }, i * 1000);


// let i = 0;
// func();

// function func() {
// 	console.log(i++);
// 	if (i <= 10) {
// 		setTimeout(func, 1000);
// 	}
// };


//===================================== Создание и вставка элементов на JavaScript =======================================
// Вставьте ему в конец li с текстом 'пункт'.
// let elem = document.getElementById('elem');
// let li = document.createElement('li');
// li.innerHTML = 'пункт';
// elem.appendChild(li);

// Сделайте так, чтобы по клику на кнопку в конец списка добавлялся li с текстом 'пункт'.
// let elem = document.getElementById('elem');
// let btn = document.getElementById('button');
// btn.addEventListener('click', function() {
// 	let li = document.createElement('li');
// 	li.innerHTML = 'пункт';
// 	elem.appendChild(li); 
// });  


//=============================== Привязывание событий при вставке элементов ========================================
// Дан ol и кнопка. Сделайте так, чтобы по клику на кнопку в конец ol добавлялся тег li. Сделайте так, чтобы по клику на любой из добавленных li в конец его текста записывался восклицательный знак.
// let elem = document.getElementById('elem');
// let btn = document.getElementById('btn');

// btn.addEventListener('click', function(){
//     let li = document.createElement('li');
//     li.addEventListener('click', function(){
//         this.innerHTML += '!';
//     });
//     elem.appendChild(li);
// });


//===================================== Создание элементов в цикле на JavaScript ===========================================
// Дан пустой ul. Запустите цикл, который вставит в него 10 тегов li. Сделайте так, чтобы текстом каждой li был ее порядковый номер.
// let elem = document.getElementById('elem');
// for (let i = 1; i <= 10; i++) {
//     let li = document.createElement('li');
//     li.innerHTML = i;
//     elem.appendChild(li);
// }


//============================== Навешивание обработчиков в цикле на JavaScript ==================================
// Дан див. Запустите цикл, который добавит в наш див 5 инпутов. Пусть дан также абзац. Сделайте так, чтобы каждый из новых инпутов по потери фокуса записывал свой текст в абзац.
// let parent = document.getElementById('parent');
// let text = document.getElementById('text');

// for (let i = 1; i <= 5; i++) {
//     let input = document.createElement('input');
//     input.addEventListener('blur', function() {
//         if (i == 1) {
//             text.innerHTML = text.innerHTML + input.value;
//         } else {
//         text.innerHTML = text.innerHTML + '<br>' + input.value;
//         }
//     });
//     parent.appendChild(input);
// }


//================================== Создание элементов из массива на JavaScript =========================================
// Модифицируйте мой код так, чтобы по клику на абзац к его содержимому прибавлялась единица.
// let arr = [1, 2, 3, 4, 5];
// let parent = document.getElementById('parent');

// for (let elem of arr) {
//     let p = document.createElement('p');
//     p.innerHTML = elem;
//     p.addEventListener('click', function() {
//         p.innerHTML = Number(p.innerHTML) + 1;
//     }); 
//     parent.appendChild(p);
// }


//==================================== Практика на создание списков ul на JavaScript ======================================
// Дан массив. Вставьте элементы этого массива в конец ul так, чтобы каждый элемент стоял в своем li.
// let elems = document.getElementById('elem');
// let arr = [11, 22, 33, 44, 55];

// for (let elem of arr) {
//     let li = document.createElement('li');
//     li.innerHTML = elem;
//     elems.appendChild(li);
// }

// Модифицируйте предыдущую задачу так, чтобы по клику на любой из вставленных элементов на экран выводился текст этого элемента.
// let elems = document.getElementById('elem');
// let arr = [11, 22, 33, 44, 55];

// for (let elem of arr) {
//     let li = document.createElement('li');
//     li.innerHTML = elem;
//     li.addEventListener('click', function() {
//         console.log(li.innerHTML);
//     });
//     elems.appendChild(li);
// }

// Модифицируйте предыдущую задачу так, чтобы по клику на li ей в конец добавлялся '!'.
// let elems = document.getElementById('elem');
// let arr = [11, 22, 33, 44, 55];

// for (let elem of arr) {
//     let li = document.createElement('li');
//     li.innerHTML = elem;
//     li.addEventListener('click', function() {
//         console.log(li.innerHTML);
//         li.innerHTML += '!';
//     });
//     elems.appendChild(li);
// }

// Модифицируйте предыдущую задачу так, чтобы по повторное нажатие на li не приводило к добавлению второго '!'.
// let elems = document.getElementById('elem');
// let arr = [11, 22, 33, 44, 55];

// for (let elem of arr) {
//     let li = document.createElement('li');
//     li.innerHTML = elem;
//     li.addEventListener('click', function() {
//         console.log(li.innerHTML);
//     });
//     li.addEventListener('click', function func() {
//         li.innerHTML += '!';
//         li.removeEventListener('click', func);
//     });    
//     elems.appendChild(li);
// }


//===================================== Создание HTML таблиц на JavaScript =============================================
// Дана пустая HTML таблица. С помощью двух вложенных циклов for заполните эту таблицу 5-ю рядами с 5-ю колонками.
// let table = document.getElementById('table');

// for (let i = 0; i < 5; i++) {
//     let tr = document.createElement('tr');

//     for (let i = 0; i < 5; i++) {
//         let td = document.createElement('td');
//         tr.appendChild(td);
//     }

//     table.appendChild(tr);
// }

// Модифицируйте предыдущую задачу так, чтобы таблица создавалась размером 10 рядов на 5 колонок.
// let table = document.getElementById('table');

// for (let i = 0; i < 10; i++) {
//     let tr = document.createElement('tr');

//     for (let i = 0; i < 5; i++) {
//         let td = document.createElement('td');
//         tr.appendChild(td);
//     }

//     table.appendChild(tr);
// }

// Модифицируйте предыдущую задачу так, чтобы в каждую td добавлялся текст 'x'.
// let table = document.getElementById('table');

// for (let i = 0; i < 10; i++) {
//     let tr = document.createElement('tr');

//     for (let i = 0; i < 5; i++) {
//         let td = document.createElement('td');
//         td.innerHTML = 'x';
//         tr.appendChild(td);
//     }

//     table.appendChild(tr);
// }

// Реализуйте генератор таблиц, ширина и высота таблиц задается в двух инпутах (например, таблица 5 на 10 ячеек).
// let table = document.getElementById('table');
// let width = document.getElementById('width');
// let height = document.getElementById('height');

// width.addEventListener('blur', func);
// height.addEventListener('blur', func);


// function func() {
//     for (let i = 0; i < Number(width.value); i++) {
//         let tr = document.createElement('tr');
    
//         for (let i = 0; i < Number(height.value); i++) {
//             let td = document.createElement('td');
//             tr.appendChild(td);
//         }
    
//         table.appendChild(tr);
//     }

// }


//========================================= Последовательное заполнение HTML таблиц =====================================
// Выведите на экран таблицу table размером 5 рядов на 5 колонок так, чтобы в ее ячейках последовательно стояли числа от 1 до 25.
// let table = document.getElementById('table');
// let k = 1;
// for (let i = 0; i < 5; i++) {
//     let tr = document.createElement('tr');
//         for (let i = 0; i < 5; i++) {
//             let td = document.createElement('td');
//             td.innerHTML = k;
//             k++;
//             tr.appendChild(td);
//         }
//     table.appendChild(tr);
// }

// Модифицируйте предыдущую задачу так, чтобы в ячейках таблицы были записаны четные числа в промежутке от 2 до 50.

// let table = document.getElementById('table');
// let k = 1;
// for (let i = 0; i < 5; i++) {
//     let tr = document.createElement('tr');
//         for (let i = 0; i < 10; i++) {
//             let td = document.createElement('td');
//             td.innerHTML = k;  
//             k++;
//             if (td.innerHTML % 2 == 0 && k <= 51) {
//                 tr.appendChild(td);
//             }
//         }
//     table.appendChild(tr);
// }


//============================= Создание HTML таблицы из массива на JavaScript =========================================
// Не подсматривая в теоретическую часть урока, выведите элементы приведенного массива в виде HTML таблицы table.
// let arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]];
// let table = document.getElementById('table');

// for (let subArr of arr) {
//     let tr = document.createElement('tr');
    
//     for(let elem of subArr) {
//         let td = document.createElement('td');
//         td.innerHTML = elem;
//         tr.appendChild(td);
//     }

//     table.appendChild(tr);
// }

// Модифицируйте предыдущую задачу так, чтобы в таблицу записывались не элементы, а квадраты этих элементов.
// let arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]];
// let table = document.getElementById('table');

// for (let subArr of arr) {
//     let tr = document.createElement('tr');
    
//     for(let elem of subArr) {
//         let td = document.createElement('td');
//         td.innerHTML = elem ** 2;
//         tr.appendChild(td);
//     }

//     table.appendChild(tr);
// }


//=================================== Создание HTML таблицы из массива объектов ========================================
// Выведите элементы этого массива в виде HTML таблицы.
// let employees = [
// 	{name: 'employee1', age: 30, salary: 400},
// 	{name: 'employee2', age: 31, salary: 500},
// 	{name: 'employee3', age: 32, salary: 600},
// ];
// let table = document.getElementById('table');

// for (let elem of employees) {
//     let tr = document.createElement('tr');

//     let td1 = document.createElement('td');
//     td1.innerHTML = elem.name;
//     tr.appendChild(td1);

//     let td2 = document.createElement('td');
//     td2.innerHTML = elem.age;
//     td2.addEventListener('click', function() {
//         this.innerHTML = Number(this.innerHTML) + 1;
//     });
//     tr.appendChild(td2);

//     let td3 = document.createElement('td');
//     td3.innerHTML = elem.salary;
//     tr.appendChild(td3);

//     table.appendChild(tr);
// }

// Модифицируйте предыдущую задачу так, чтобы по клику на любую ячейку с зарплатой ее содержимое увеличивалось на 10%.

// let employees = [
// 	{name: 'employee1', age: 30, salary: 400},
// 	{name: 'employee2', age: 31, salary: 500},
// 	{name: 'employee3', age: 32, salary: 600},
// ];
// let table = document.getElementById('table');

// for (let elem of employees) {
//     let tr = document.createElement('tr');

//     let td1 = document.createElement('td');
//     td1.innerHTML = elem.name;
//     tr.appendChild(td1);

//     let td2 = document.createElement('td');
//     td2.innerHTML = elem.age;
//     td2.addEventListener('click', function() {
//         this.innerHTML = Number(this.innerHTML) + 1;
//     });
//     tr.appendChild(td2);

//     let td3 = document.createElement('td');
//     td3.innerHTML = elem.salary;
//     td3.addEventListener('click', function() {
//         this.innerHTML = Number(this.innerHTML) + Number(this.innerHTML) * 0.1;
//     });
//     tr.appendChild(td3);

//     table.appendChild(tr);
// }


//========================================= Добавление рядов и колонок в HTML таблицу ====================================
// Сделайте кнопку, по нажатию на которую в таблицу будет добавляться новый ряд.
// let table = document.getElementById('table');
// let btn = document.getElementById('btn');

// btn.addEventListener('click', function() {
//     let tr = document.createElement('tr');

//     for (let i = 1; i <= 3; i++) {
//         let td = document.createElement('td');
//         tr.appendChild(td);
//     }
//     table.appendChild(tr);
// });


// Дана также кнопка. Сделайте так, чтобы по нажатию на кнопку таблица увеличивалась на один ряд и на одну колонку.
// let table = document.getElementById('table');
// let btn = document.getElementById('btn');

// btn.addEventListener('click', function() {
//     let tr = document.createElement('tr'); 
//     let trs = document.querySelectorAll('#table tr');
//     for (let i = 1; i <= trs.length + 1; i++) {
//         let td = document.createElement('td');
//         tr.appendChild(td);
//     }

//     for(let tr of trs) {
//         let td = document.createElement('td');
//         tr.appendChild(td);
//     }
//     table.append(tr);
// });


//===================================== Изменение ячеек HTML таблицы на JavaScript ========================================
// Пусть дана некоторая HTML таблица с числами и кнопка. По нажатию на кнопку увеличьте число в каждой ячейки таблицы в два раза.

// let tds = document.querySelectorAll('#table td');
// let btn = document.getElementById('btn');

// btn.addEventListener('click', function() {
//     for (let td of tds) {
//         td.innerHTML = Number(td.innerHTML) * 2;
//     }
// });


// Порядковый номер ячейки таблицы на JavaScript
// Дана HTML таблица. Запишите в каждую ячейку ее порядковый номер с конца. То есть последней ячейке запишите 1, предпоследней - 2, и так далее.
// let tds = document.querySelectorAll('#table td');
// for (let i = 0; i < tds.length; i++) {
//     tds[i].innerHTML = tds.length - i;
// }


//================================= Номер колонки и ряда таблицы на JavaScript =========================================
// let trs = document.querySelectorAll('#table tr');

// for (let i = 0; i < trs.length; i++) {
// 	let tr = trs[i];
// 	let tds = tr.querySelectorAll('td');
	
// 	for (let j = 0; j < tds.length; j++) {
// 		let td = tds[j];
// 		td.innerHTML = (i + 1) + '.' + (j + 1);
// 	}
// }

// Дана HTML таблица. Запишите в каждую ячейку ее порядковый номер в ряду.
// let trs = document.querySelectorAll('#table tr');

// for (let i = 0; i < trs.length; i++) {
// 	let tr = trs[i];
// 	let tds = tr.querySelectorAll('td');
	
// 	for (let j = 0; j < tds.length; j++) {
// 		let td = tds[j];
// 		td.innerHTML = j + 1;
// 	}
// }


//============================ Порядковый номер ячейки по клику на JavaScript =====================================
// Дана HTML таблица. Сделайте так, чтобы по клику на любую ячейку в эту ячейку записывался порядковый номер этой ячейки с конца таблицы.
// let tds = document.querySelectorAll('#table td');
// for (let i = 0; i < tds.length; i++) {
//     tds[i].addEventListener('click', function() {
//         tds[i].innerHTML = tds.length - i;
//     });
// }


//============================== Порядковый номер клика в ячейке HTML таблицы ==========================================
// Модифицируйте код теоретической части урока так, чтобы повторное нажатие по ячейке не приводило к увеличению счетчика.
// let tds = document.querySelectorAll('#table td');
// let i = 1;
// for (let td of tds) {
// 	td.addEventListener('click', function func() {
// 		this.innerHTML = i;
// 		i++;
//         td.removeEventListener('click', func);
// 	});
// }

// Модифицируйте описанную в теоретической части урока задачу так, чтобы при кликах на ячейки чередовались числа 1, 2 и 3.
// let tds = document.querySelectorAll('#table td');

// let i = 1;
// for (let td of tds) {
// 	td.addEventListener('click', function() {
// 		this.innerHTML = i;
		
// 		if (i == 1) {
// 			i = 2;
// 		} else if (i == 2) {
// 			i = 3;
// 		} else {
//             i = 1;
//         }
// 	});
// }


//========================================= Удаление элементов на JavaScript ============================================
// let parent = document.getElementById('parent');
// let btn = document.getElementById('button');
// let elem = document.getElementById('elem');

// btn.addEventListener('click', function() {
//     parent.removeChild(elem);
// });

// Сделайте так, чтобы по каждому клику на кнопку удалялся последний элемент из #parent.
// let parent = document.getElementById('parent');
// let btn = document.getElementById('button');
// let li = document.querySelectorAll('li');

// btn.addEventListener('click', func);
// function func() {
//     let last = li[li.length - 1];
//     last.parentNode.removeChild(last);
// }

// Сделайте так, чтобы по нажатию на #elem этот элемент удалился.
// let elem = document.getElementById('elem');
// elem.parentElement.removeChild(elem);

// Сделайте так, чтобы по нажатию на #elem этот элемент удалился.
// let elem = document.getElementById('elem');
// elem.remove();


//====================================== Самоудаление элементов на JavaScript ==========================================
// Сделайте так, чтобы любая li удалялась по клику на нее.
// let parent = document.getElementById('parent');
// let elems = document.querySelectorAll('li');
// for (let elem of elems) {
//     elem.addEventListener('click', function() {
//         elem.remove();
//     });
// }


//==================================== Самоудаление новых элементов на JavaScript ==================================
// Сделайте так, чтобы по клику на кнопку в список добавлялся новый элемент. Сделайте так, чтобы любая li удалялась по клику на нее. Речь идет как о тех li, которые уже есть в списке, так о новых, созданных после нажатия на кнопку.
// let parent = document.getElementById('parent');
// let btn = document.getElementById('button');
// let elems = document.querySelectorAll('li');
// let i = 3;

// btn.addEventListener('click', function() {
//     let li = document.createElement('li');
//     li.innerHTML = i + 1;
//     i++;
//     parent.appendChild(li);

//     li.addEventListener('click', function() {
//         li.parentElement.removeChild(this);
//     });
// });

// for (let elem of elems) {
//     elem.addEventListener('click', function() {
//         elem.remove();
//     });
// }


//====================================== Ссылка на удаление элемента на JavaScript ======================================
// Самостоятельно, не подсматривая в мой код, решите описанную задачу.
// let elem = document.getElementById('elem');
// let remove = document.getElementById('remove');

// remove.addEventListener('click', function(event) {
//     elem.parentElement.removeChild(elem);
//     event.preventDefault();
// });


//================================== Создание ссылок для удаление элементов на JavaScript ==================================
// Дан тег ul. Добавьте в конец каждого тега li ссылку на удаления этого li из списка.

// let elems = document.querySelectorAll('li');

// for (let elem of elems) {
//     let link = document.createElement('a');
//     link.href = '';
//     link.innerHTML = 'remove';
//     elem.appendChild(link);

//     link.addEventListener('click', function(event) {
//         elem.parentElement.removeChild(elem);
//         event.preventDefault();
//     });
// }

// Дана HTML таблица. Добавьте в нее еще одну колонку, в которой для каждого ряда таблицы будет стоять ссылка на удаление этого ряда.
// let trs = document.querySelectorAll('tr');

// for (let tr of trs) {
//     let td = document.createElement('td');
//     let a = document.createElement('a');
//     a.href = '';
//     a.innerHTML = 'remove';
//     tr.appendChild(td);
//     td.appendChild(a);

//     a.addEventListener('click', function(event) {
//         tr.parentElement.removeChild(tr);
//         event.preventDefault();
//     });
// }


//=================================== Вставка элементов в начало или в конец на JavaScript ================================
// Вставьте ему в начало элемент с текстом 'start', а в конец - элемент с текстом 'finish'.
// let elem = document.getElementById('elem');

// let liFirst = document.createElement('li');
// liFirst.innerHTML = 'start';
// elem.prepend(liFirst);

// let liLast = document.createElement('li');
// liLast.innerHTML = 'finish';
// elem.append(liLast)

// Вставьте перед этим элементом элемент с текстом 'new'.
// let parent = document.getElementById('parent');
// let elem = document.getElementById('elem');

// let li = document.createElement('li');
// li.innerHTML = 'new';
// parent.insertBefore(li, elem);

// Модифицируйте предыдущую задачу так, чтобы клик на вставленный элемент приводил к тому, что в конец его текста будет добавляться '!'.
// let parent = document.getElementById('parent');
// let elem = document.getElementById('elem');

// let li = document.createElement('li');
// li.innerHTML = 'new';

// li.addEventListener('click', function() {
//     this.innerHTML += '!';
// });
// parent.insertBefore(li, elem);


//=================================== Смежная вставка элементов на JavaScript ===========================================
// Вставьте перед ним абзац с текстом '!!!'.
// let p = document.createElement('p');
// p.innerHTML = '!!!';

// let elem = document.getElementById('elem');
// elem.insertAdjacentElement('beforeBegin', p);

// Вставьте после него абзац с текстом '!!!'.
// let p = document.createElement('p');
// p.innerHTML = '!!!';

// let elem = document.getElementById('elem');
// elem.insertAdjacentElement('afterEnd', p);

// Вставьте ему в начало абзац с текстом '!!!'.
// let p = document.createElement('p');
// p.innerHTML = '!!!';

// let elem = document.getElementById('elem');
// elem.insertAdjacentElement('afterBegin', p);


// Вставьте ему в конец абзац с текстом '!!!'.
// let p = document.createElement('p');
// p.innerHTML = '!!!';

// let elem = document.getElementById('elem');
// elem.insertAdjacentElement('beforeEnd', p);


// Дан элемент. Вставьте перед ним следующий тег:
// let elem = document.getElementById('elem');
// elem.insertAdjacentHTML('beforeBegin', '<div class="www"><p>text</p><p>text</p><input></div>');


//========================================= Клонирование элементов на JavaScript ==========================================
// Дан инпут. Дана кнопка. По нажатию на кнопку клонируйте этот инпут.
// let elem = document.getElementById('elem');
// let btn = document.getElementById('btn');

// btn.addEventListener('click', function() {
//     let clone = elem.cloneNode(true);
// elem.insertAdjacentElement('beforeBegin' , clone);

// });


//========================================= Проверка элементов в JavaScript ==============================================
// Проверьте, является ли этот элемент элементом с классом www.
// let elem = document.getElementById('elem');
// console.log(elem.matches('div.www'));

// Дан элемент. Проверьте, является ли этот элемент абзацем.
// let elem = document.getElementById('elem');
// console.log(elem.matches('p.www'));

// Проверьте, является ли элемент из elem2 потомком элемента из elem1.
// let elem1 = document.getElementById('elem1');
// let elem2 = document.getElementById('elem2');

// let contains = elem1.contains(elem2);
// console.log(contains);


//============================= Редактирование отдельного элемента на JavaScript ========================================
// Модифицируйте приведенный выше код так, чтобы текст абзаца менялся не по потери фокуса, а по мере ввода текста в инпут.
// let elem = document.getElementById('elem');
// let input = document.getElementById('input');

// input.value = elem.innerHTML;

// input.addEventListener('input', function() {
//     elem.innerHTML = this.value;
// });

//Самостоятельно, не подсматривая в мой код, решите описанную задачу.
// let parent = document.getElementById('parent');
// let elem = document.getElementById('elem');

// elem.addEventListener('click', function func() {
//     let input = document.createElement('input');
    
//     input.value = elem.innerHTML;
//     input.addEventListener('input', function() {
//         elem.innerHTML = this.value;
//     });
//     parent.appendChild(input);

//     this.removeEventListener('click', func);
// });


//============================== Прячем текст при редактировании элемента на JavaScript =============================
// let elem = document.getElementById('elem');
// elem.addEventListener('click', function func() {
//     let input = document.createElement('input');
//     input.value = elem.innerHTML;
//     elem.innerHTML = '';
//     elem.appendChild(input);

//     input.addEventListener('blur', function() {
//         elem.innerHTML = this.value;
//         elem.addEventListener('click', func);
//     });
//     this.removeEventListener('click', func);
// });


//===================================== Редактирование в группе элементов на JavaScript ===================================
// Дан тег ul. Сделайте так, чтобы по клику на любую li в ней появлялся инпут, с помощью которого можно будет поредатировать текст этой li.
// let elems = document.querySelectorAll('#parent li');
// for (let elem of elems) {
//     elem.addEventListener('click', function func() {
//     let input = document.createElement('input');
//     input.value = elem.innerHTML;
//     elem.innerHTML = '';
//     elem.appendChild(input);

//     input.addEventListener('blur', function() {
//         elem.innerHTML = this.value;
//         elem.addEventListener('click', func);
//     });
    
//     this.removeEventListener('click', func);
//     });
// }


// Дана HTML таблица. Сделайте так, чтобы по клику на любую ячейку в ней появлялся инпут для редактирования текста этой ячейки.
// let elems = document.querySelectorAll('td');
// for(let elem of elems) {
//     elem.addEventListener('click', function func() {
    //     let input = document.createElement('input');
    //     input.value = elem.innerHTML;
    //     elem.innerHTML = '';
    //     elem.appendChild(input);

    //     input.addEventListener('blur', function() {
    //         elem.innerHTML = this.value;
    //         elem.addEventListener('click', func);
//     });
    
//     this.removeEventListener('click', func);
//     });
// }


//============================== Одновременное редактирование и удаление элементов ====================================
// Добавьте ссылку на удаление в конец каждого абзаца.
// Сделайте так, чтобы по клику на span в нем появлялся инпут для редактирования.
// let parent = document.getElementById('parent');
// let elems = document.querySelectorAll('#parent p');
// let spans = document.querySelectorAll('#parent span');

// for (let elem of elems) {
//     let removeLink = document.createElement('a');
//     removeLink.href = '';
//     removeLink.innerHTML = 'remove';
//     elem.appendChild(removeLink);

//     removeLink.addEventListener('click', function(event) {
//         elem.parentElement.removeChild(elem);
//         event.preventDefault();
//     });
// }
// for (let span of spans) {
//     span.addEventListener('click', function func() {
//         let input = document.createElement('input');
//         input.value = this.innerHTML;
//         span.innerHTML = '';
//         span.appendChild(input);

//         input.addEventListener('blur', function() {
//             span.innerHTML = this.value;
//             span.addEventListener('click', func);
//         });

//         this.removeEventListener('click', func);
//     }); 
// }

// Оберните сначала текст абзаца в теги span, добавьте к этим тегам возможность редактирования, а затем добавьте в конец каждого абзаца ссылку на удаление.

// let elems = document.querySelectorAll('p');

// for (let elem of elems) {
//     let span = document.createElement('span');
//     span.innerHTML = elem.innerHTML;
//     elem.innerHTML = '';
//     elem.appendChild(span);

//     let removeLink = document.createElement('a');
//     removeLink.href = '';
//     removeLink.innerHTML = 'remove';
//     elem.appendChild(removeLink);

//     removeLink.addEventListener('click', function(event) {
//         elem.parentElement.removeChild(elem);
//         event.preventDefault();
//     });
// }

// let spans = document.querySelectorAll('span');
// for (let span of spans) {
//     span.addEventListener('click', function func() {
//         let input = document.createElement('input');
//         input.value = this.innerHTML;
//         span.innerHTML = '';
//         span.appendChild(input);

//         input.addEventListener('blur', function() {
//             span.innerHTML = this.value;
//             span.addEventListener('click', func);
//         });

//     this.removeEventListener('click', func);
//     }); 
// }


//==================================== Стилизация элементов на JavaScript ================================================
// Добавьте в конец каждого абзаца ссылку, по клику на которую текст абзаца будет перечеркиваться (а ссылка - нет).
// let elems = document.querySelectorAll('p');
// for (let elem of elems) {
//     let span = document.createElement('span');
//     span.innerHTML = elem.innerHTML;
//     elem.innerHTML = '';
//     elem.appendChild(span);

//     let a = document.createElement('a');
//     a.href = '';
//     a.innerHTML = 'перечеркнуть';
//     elem.appendChild(a);

//     a.addEventListener('click', function(event) {
//         span.classList.toggle('through');
//         event.preventDefault();

//     });
// }

// Модифицируйте предыдущую задачу так, чтобы после нажатия на ссылку эта ссылка удалялась из абзаца (а текст абзаца становился перечеркнутым).
// let elems = document.querySelectorAll('p');
// for (let elem of elems) {
//     let span = document.createElement('span');
//     span.innerHTML = elem.innerHTML;
//     elem.innerHTML = '';
//     elem.appendChild(span);

//     let a = document.createElement('a');
//     a.href = '';
//     a.innerHTML = 'перечеркнуть';
//     elem.appendChild(a);

//     a.addEventListener('click', function(event) {
//         span.classList.toggle('through');
//         event.preventDefault();
//         this.parentElement.removeChild(this);    
//     });
// }

// Дана некоторая HTML таблица. Добавьте в эту таблицу еще одну колонку со ссылкой. По нажатию на эту ссылку ряд с этой ссылкой должен стать зеленого фона.
// Модифицируйте предыдущую задачу так, чтобы первое нажатие по ссылке красило ряд в зеленый фон, а второе нажатие отменяло это действие.
// let parent = document.getElementById('parent');
// let trs = document.querySelectorAll('#parent tr');

// for (let tr of trs) {
//     let td = document.createElement('td');
//     tr.append(td);

//     let a = document.createElement('a');
//     a.href = '';
//     a.innerHTML = 'green';
//     td.appendChild(a);

//     a.addEventListener('click', function(event) {
//         tr.classList.toggle('colored-green');
//         event.preventDefault();
//     });
// }


//=================================== Кнопки для скрытия и показа элемента на JavaScript ====================================
// Модифицируйте мой код так, чтобы была только одна кнопка. Пусть по первому клику на эту кнопку элемент показывается, а по второму - скрывается.
// let elem = document.querySelector('#elem');
// let show = document.querySelector('#show');
// // let hide = document.querySelector('#hide');

// show.addEventListener('click', function() {
//     elem.classList.toggle('hidden');
// });

 
//=================================== Много элементов с кнопками показа на JavaScript ==================================
// Изучите мое решение, а затем самостоятельно, не подсматривая в мой код, решите эту задачу.
// Первый способ
// let btns = document.querySelectorAll('button');

// for (let btn of btns) {
//     btn.addEventListener('click', function() {
//         let elem = document.querySelector('#' + this.dataset.elem);
//         elem.classList.toggle('hidden');
//     });
// }

// Изучите мое решение, а затем самостоятельно, не подсматривая в мой код, решите эту задачу.
// Второй способ
// let btns = document.querySelectorAll('button');
// let elems = document.querySelectorAll('p');

// for (let i = 0; i < btns.length; i++) {
//     btns[i].addEventListener('click', function() {
//         elems[i].classList.toggle('hidden');
//     });
// }

// Изучите мое решение, а затем самостоятельно, не подсматривая в мой код, решите эту задачу.
// Третий способ
// let btns = document.querySelectorAll('button');

// for (let btn of btns) {
//     btn.addEventListener('click', function() {
//         this.previousElementSibling.classList.toggle('hidden');
//     });
// }


//=================================== Активация элементов на JavaScript ===============================================
// Дана HTML список ul. Сделайте так, чтобы по нажатию на любой пункт списка он активировался красным фоном.
// Модифицируйте предыдущую задачу так, чтобы по нажатию на активированный пункт списка активация с него снималась.
// let elems = document.querySelectorAll('li');

// for (let elem of elems) {
//     elem.addEventListener('click', function() {
//         this.classList.toggle('active');
//     });
// }


//====================================== Чередование стилей активации на JavaScript =======================================
// Разберите мой код, а затем самостоятельно повторите решение этой задачи.
// let tds = document.querySelectorAll('td');
// let color = 'color1';

// for (let td of tds) {
//     td.addEventListener('click', function() {
//         if (color == 'color1') {
//             color = 'color2';
//         } else {
//             color = 'color1';
//         }
//         td.classList.add(color);
//     })
// }

// Чередование многих цветов из массива
// let tds = document.querySelectorAll('#table td');

// let i = 0;
// let colors = ['color1', 'color2', 'color3'];

// for (let td of tds) {
// 	td.addEventListener('click', function() {
// 		this.classList.add(colors[i]);
		
// 		i++;
// 		if (i == colors.length) {
// 			i = 0;
// 		}
// 	});
// }


//==================================== Активация ограниченного количества элементов =====================================
// // Сделайте так, чтобы в одном ряду таблице можно было активировать не более 5-ти ячеек.
// let trs = document.querySelectorAll('tr');
// for (let i = 0; i < trs.length; i++) {
//     let tds = document.querySelectorAll('td');
//     for (let td of tds) {
//         td.addEventListener('click', function() {
//             let activeTds = document.querySelectorAll('td.active');
//             if (activeTds && activeTds.length < 5) {
//                     this.classList.add('active');
//             }
//         });
//     } ////////   не сделал!!!!!!!!!!!!!!!!!! //////////////////////
// }


//=============================== Практика на изменение элементов на JavaScript ================================
// Дан массив. Выведите его элементы в виде списка ul.
// let arr = [1, 2, 3, 4, 5, 6];
// let parent = document.getElementById('parent');
// for (let elem of arr) {
//     let li = document.createElement('li');
//     li.innerHTML = elem;
//     parent.appendChild(li);
// }

// Модифицируйте предыдущую задачу так, чтобы по клику на любую li в ней появлялся инпут, с помощью которого ее можно будет 
// поредактировать.

// let arr = [1, 2, 3, 4, 5, 6];
// let parent = document.getElementById('parent');
// for (let elem of arr) {
//     let li = document.createElement('li');
//     li.innerHTML = elem;
//     parent.appendChild(li);

//     li.addEventListener('click', function func() {
//         let input = document.createElement('input');
//         input.value = li.innerHTML;
//         li.innerHTML = '';
//         li.appendChild(input);

//         input.addEventListener('blur', function() {
//             li.innerHTML = this.value;
//             li.addEventListener('click', func);
//         });
//         this.removeEventListener('click', func);
//     });
// }

// Модифицируйте предыдущую задачу так, чтобы под списком был инпут, с помощью которого можно будет добавить новый элемент в конец списка ul. Сделайте так, чтобы новые li также можно было редактировать.
// let arr = [1, 2, 3, 4, 5, 6];
// let parent = document.getElementById('parent');

// let inp = document.createElement('input');
// parent.insertAdjacentElement('afterEnd', inp);

// inp.addEventListener('blur', function() {
//     let li = document.createElement('li');
//     li.innerHTML = inp.value;
//     parent.appendChild(li);

//     li.addEventListener('click', function func() {
//         let input = document.createElement('input');
//         input.value = li.innerHTML;
//         li.innerHTML = '';
//         li.appendChild(input);

//         input.addEventListener('blur', function() {
//             li.innerHTML = this.value;
//             li.addEventListener('click', func);
//         });
//         this.removeEventListener('click', func);
//     });
// });

// for (let elem of arr) {
//     let li = document.createElement('li');
//     li.innerHTML = elem;
//     parent.appendChild(li);

//     li.addEventListener('click', function func() {
//         let input = document.createElement('input');
//         input.value = li.innerHTML;
//         li.innerHTML = '';
//         li.appendChild(input);

//         input.addEventListener('blur', function() {
//             li.innerHTML = this.value;
//             li.addEventListener('click', func);
//         });
//         this.removeEventListener('click', func);
//     });
// }

// Модифицируйте предыдущую задачу так, чтобы в конце каждой li стояла ссылка 'удалить', с помощью которой можно будет удалить эту li из ul.
// let arr = [1, 2, 3, 4, 5, 6];
// let parent = document.getElementById('parent');

// let inp = document.createElement('input');
// parent.insertAdjacentElement('afterEnd', inp);

// inp.addEventListener('blur', function() {
//     let li = document.createElement('li');
//     li.innerHTML = inp.value;
//     parent.appendChild(li);
//     this.value = '';

//     let span = document.createElement('span');
//     span.innerHTML = li.innerHTML;
//     li.innerHTML = '';
//     li.appendChild(span);

//     getRemove(li);

//     span.addEventListener('click', function func() {
//         let input = document.createElement('input');
//         input.value = span.innerHTML;
//         span.innerHTML = '';
//         span.appendChild(input);

//         input.addEventListener('blur', function() {
//             span.innerHTML = this.value;
//             span.addEventListener('click', func);
//         });
//         this.removeEventListener('click', func);
//     });
// });

// for (let elem of arr) {
//     let li = document.createElement('li');
//     li.innerHTML = elem;
//     parent.appendChild(li);

//     let span = document.createElement('span');
//     span.innerHTML = li.innerHTML;
//     li.innerHTML = '';
//     li.appendChild(span);

//     getRemove(li);
// }

// let spans = document.querySelectorAll('span');
// for (let span of spans) {
//     span.addEventListener('click', function func() {
//         let input = document.createElement('input');
//         input.value = span.innerHTML;
//         span.innerHTML = '';
//         span.appendChild(input);

//         input.addEventListener('blur', function() {
//             span.innerHTML = this.value;
//             span.addEventListener('click', func);
//         });
//         this.removeEventListener('click', func);
//     });
// }

// function getRemove(li) {
//     let a = document.createElement('a');
//     a.innerHTML = ' remove';
//     li.appendChild(a);
//     a.addEventListener('click', function(event) {
//         parent.removeChild(li);
//         event.preventDefault();
//     });
// }


// Модифицируйте предыдущую задачу так, чтобы в конце каждой li также стояла ссылка 'перечеркнуть', с помощью которой можно будет перечеркнуть текст данного тега li.
// let arr = [1, 2, 3, 4, 5, 6];
// let parent = document.getElementById('parent');

// let inp = document.createElement('input');
// parent.insertAdjacentElement('afterEnd', inp);

// inp.addEventListener('blur', function() {
//     let li = document.createElement('li');
//     li.innerHTML = inp.value;
//     parent.appendChild(li);
//     this.value = '';

//     let span = document.createElement('span');
//     span.innerHTML = li.innerHTML;
//     li.innerHTML = '';
//     li.appendChild(span);

//     getRemove(li);
//     getThrough(li, span);
//     getInput(span);
// });

// for (let elem of arr) {
//     let li = document.createElement('li');
//     li.innerHTML = elem;
//     parent.appendChild(li);

//     let span = document.createElement('span');
//     span.innerHTML = li.innerHTML;
//     li.innerHTML = '';
//     li.appendChild(span);

//     getRemove(li);
//     getThrough(li, span);
// }
// let spans = document.querySelectorAll('span');
// for (let span of spans) {
//     getInput(span);
// }

// function getRemove(li) {
//     let a = document.createElement('a');
//     a.innerHTML = ' remove';
//     li.appendChild(a);
    
//     a.addEventListener('click', function(event) {
//         parent.removeChild(li);
//         event.preventDefault();
//     });
// }

// function getThrough(li, span) {
//     let a = document.createElement('a');
//     a.innerHTML = ' line-through';
//     li.appendChild(a);
    
//     a.addEventListener('click', function(event) {
//         span.classList.toggle('through');
//         event.preventDefault();
//     });
// }

// function getInput(span) {
//     span.addEventListener('click', function func() {
//         let input = document.createElement('input');
//         input.value = span.innerHTML;
//         span.innerHTML = '';
//         span.appendChild(input);

//         input.addEventListener('blur', function() {
//             span.innerHTML = this.value;
//             span.addEventListener('click', func);
//         });
//         this.removeEventListener('click', func);
//     });
// }


// Выведите этих работников в HTML таблице.
// let employees = [
// 	{name: 'employee1', age: 30, salary: 400},
// 	{name: 'employee2', age: 31, salary: 500},
// 	{name: 'employee3', age: 32, salary: 600},
// ];
// let parent = document.getElementById('parent');
// for (let elem of employees) {
//     let tr = document.createElement('tr');
//     let td1 = document.createElement('td');
//     td1.innerHTML = elem.name;
//     tr.appendChild(td1);

//     let td2 = document.createElement('td');
//     td2.innerHTML = elem.age;
//     tr.appendChild(td2);

//     let td3 = document.createElement('td');
//     td3.innerHTML = elem.salary;
//     tr.appendChild(td3);

//     parent.appendChild(tr);
// }

// Добавьте ячейкам созданной таблицы возможность редактирования.
// let employees = [
// 	{name: 'employee1', age: 30, salary: 400},
// 	{name: 'employee2', age: 31, salary: 500},
// 	{name: 'employee3', age: 32, salary: 600},
// ];
// let parent = document.getElementById('parent');
// for (let elem of employees) {
//     let tr = document.createElement('tr');
    
//     let td1 = document.createElement('td');
//     td1.innerHTML = elem.name;
//     getRedaction(td1);
//     tr.appendChild(td1);

//     let td2 = document.createElement('td');
//     td2.innerHTML = elem.age;
//     getRedaction(td2);
//     tr.appendChild(td2);

//     let td3 = document.createElement('td');
//     td3.innerHTML = elem.salary;
//     getRedaction(td3);
//     tr.appendChild(td3);

//     parent.appendChild(tr);
// }

// function getRedaction(td) {
//     td.addEventListener('click', function func() {
//         let input = document.createElement('input');
//         input.value = td.innerHTML;
//         td.innerHTML = '';
//         td.appendChild(input);

//         input.addEventListener('blur', function() {
//             td.innerHTML = this.value;
//             td.addEventListener('click', func);
//         });
//         this.removeEventListener('click', func);
//     });
// }

// Добавьте в вашу таблицу новую колонку со ссылкой на удаления ряда из таблицы.
// let employees = [
// 	{name: 'employee1', age: 30, salary: 400},
// 	{name: 'employee2', age: 31, salary: 500},
// 	{name: 'employee3', age: 32, salary: 600},
// ];
// let parent = document.getElementById('parent');
// for (let elem of employees) {
//     let tr = document.createElement('tr');
    
//     let td1 = document.createElement('td');
//     td1.innerHTML = elem.name;
//     getRedaction(td1);
//     tr.appendChild(td1);

//     let td2 = document.createElement('td');
//     td2.innerHTML = elem.age;
//     getRedaction(td2);
//     tr.appendChild(td2);

//     let td3 = document.createElement('td');
//     td3.innerHTML = elem.salary;
//     getRedaction(td3);
//     tr.appendChild(td3);

//     getRemove(tr);  
//     parent.appendChild(tr);
// }

// function getRedaction(td) {
//     td.addEventListener('click', function func() {
//         let input = document.createElement('input');
//         input.value = td.innerHTML;
//         td.innerHTML = '';
//         td.appendChild(input);

//         input.addEventListener('blur', function() {
//             td.innerHTML = this.value;
//             td.addEventListener('click', func);
//         });
//         this.removeEventListener('click', func);
//     });
// }

// function getRemove(tr) {
//     let td = document.createElement('td');
//     tr.appendChild(td);

//     let a = document.createElement('a');
//     a.href = '';
//     a.innerHTML = 'remove';
//     td.appendChild(a);

//     a.addEventListener('click', function(event) {
//         parent.removeChild(tr);
//         event.preventDefault();
//     })
// }

// делайте под таблицей 3 инпута и кнопку для добавление нового работника. Пусть в инпуты вводятся имя, возраст и зарплата, и по нажатию на кнопку новый работник добавляется в таблицу. Реализуйте редактирование ячеек для вновь добавленных работников.
// let employees = [
// 	{name: 'employee1', age: 30, salary: 400},
// 	{name: 'employee2', age: 31, salary: 500},
// 	{name: 'employee3', age: 32, salary: 600},
// ];
// let parent = document.getElementById('parent');

// for (let elem of employees) {
//     let tr = document.createElement('tr');
    
//     createTd(tr, elem.name);

//     createTd(tr, elem.age);

//     createTd(tr, elem.salary);

//     getRemove(tr);  
//     parent.appendChild(tr);
// }

// for (let i = 1; i <= 3; i++) {
//     let input = document.createElement('input');
//     parent.insertAdjacentElement('afterEnd', input);
// }

// let inputs = document.querySelectorAll('input');

// let btn = document.createElement('button');
// btn.innerHTML = 'click';
// parent.insertAdjacentElement('afterEnd', btn);

// btn.addEventListener('click', function() {
//     let tr = document.createElement('tr');
//     let elem1 = inputs[0].value;
//     let elem2 = inputs[1].value;
//     let elem3 = inputs[2].value;
   
//     createTd(tr, elem1);
//     createTd(tr, elem2);
//     createTd(tr, elem3);
    
//     getRemove(tr);
//     parent.appendChild(tr);
// });



// function getRedaction(td) {
//     td.addEventListener('click', function func() {
//         let input = document.createElement('input');
//         input.value = td.innerHTML;
//         td.innerHTML = '';
//         td.appendChild(input);

//         input.addEventListener('blur', function() {
//             td.innerHTML = this.value;
//             td.addEventListener('click', func);
//         });
//         this.removeEventListener('click', func);
//     });
// }

// function getRemove(tr) {
//     let td = document.createElement('td');
//     tr.appendChild(td);

//     let a = document.createElement('a');
//     a.href = '';
//     a.innerHTML = 'remove';
//     td.appendChild(a);

//     a.addEventListener('click', function(event) {
//         parent.removeChild(tr);
//         event.preventDefault();
//     })
// }

// function createTd(tr, elem) {
//     let td = document.createElement('td');
//     td.innerHTML = elem;
//     getRedaction(td);
//     tr.appendChild(td);
// }


// Выведите на экран каждого работника в своем теге li тега ul.
// let employees = [
// 	{name: 'employee1', age: 30, salary: 400},
// 	{name: 'employee2', age: 31, salary: 500},
// 	{name: 'employee3', age: 32, salary: 600},
// ];

// let ul = document.createElement('ul');
// document.body.append(ul);

// for (let elem of employees) {
//     let li = document.createElement('li');
//     li.innerHTML = elem.name + ' ' + elem.age + ' ' + elem.salary;
//     ul.append(li);
// }


// Сделайте так, чтобы по клику на имя, возраст или зарплату работника появлялся инпут для редактирования этого поля.
// let employees = [
// 	{name: 'employee1', age: 30, salary: 400},
// 	{name: 'employee2', age: 31, salary: 500},
// 	{name: 'employee3', age: 32, salary: 600},
// ];

// let ul = document.createElement('ul');
// document.body.append(ul);

// for (let elem of employees) {
//     let li = document.createElement('li');
//     li.innerHTML = elem.name + ' ' + elem.age + ' ' + elem.salary;
//     ul.append(li);

//     li.addEventListener('click', function func() {
//         let input = document.createElement('input');
//         input.value = this.innerHTML;
//         this.innerHTML = '';
//         li.append(input);

//         input.addEventListener('blur', function() {
//             li.innerHTML = this.value;
//             li.addEventListener('click', func);
//         });
//         this.removeEventListener('click', func);
//     });
// }


// Добавьте в конец каждого тега li ссылку на удаление этого li из списка.
// let employees = [
// 	{name: 'employee1', age: 30, salary: 400},
// 	{name: 'employee2', age: 31, salary: 500},
// 	{name: 'employee3', age: 32, salary: 600},
// ];

// let ul = document.createElement('ul');
// document.body.append(ul);

// for (let elem of employees) {
//     let li = document.createElement('li');
//     li.innerHTML = elem.name + ' ' + elem.age + ' ' + elem.salary;
//     ul.append(li);

//     li.addEventListener('click', function func() {
//         let input = document.createElement('input');
//         input.value = this.innerHTML;
//         this.innerHTML = '';
//         li.append(input);

//         input.addEventListener('blur', function() {
//             li.innerHTML = this.value;
//             li.addEventListener('click', func);
//         });
//         this.removeEventListener('click', func);
//     });

//     let a = document.createElement('a');
//     a.href = '';
//     a.innerHTML = ' ' + 'remove';
//     li.append(a);

//     a.addEventListener('click', function(event) {
//         ul.removeChild(li);
//         event.preventDefault();
//     });
// }

// Под списком сделайте форму для добавление нового работника.

// let employees = [
// 	{name: 'employee1', age: 30, salary: 400},
// 	{name: 'employee2', age: 31, salary: 500},
// 	{name: 'employee3', age: 32, salary: 600},
// ];

// let ul = document.createElement('ul');
// document.body.append(ul);

// for (let i = 1; i <= 3; i++) {
//     let input = document.createElement('input');
//     ul.insertAdjacentElement('afterEnd', input);
// }

// let inputs = document.querySelectorAll('input');

// let btn = document.createElement('button');
// btn.innerHTML = 'New Employee';
// document.body.append(btn);

// btn.addEventListener('click', function() {
//     let elem1 = inputs[0].value;
//     let elem2 = inputs[1].value;
//     let elem3 = inputs[2].value;
    
//     let li = document.createElement('li');
//     li.innerHTML = elem1 + ' ' + elem2 + ' ' + elem3;
//     ul.append(li);

//     createInput(li);
//     getRemove(ul, li);
    
// });

// for (let elem of employees) {
//     let li = document.createElement('li');
//     li.innerHTML = elem.name + ' ' + elem.age + ' ' + elem.salary;
//     ul.append(li);

//     createInput(li);
//     getRemove(ul, li);
// }


// function createInput(li) {
//     let span = document.createElement('span');
//     span.innerHTML = li.innerHTML;
//     li.innerHTML = '';
//     li.append(span);
//     span.addEventListener('click', function func() {
//         let input = document.createElement('input');
//         input.value = this.innerHTML;
//         this.innerHTML = '';
//         this.append(input);

//         input.addEventListener('blur', function() {
//             span.innerHTML = this.value;
//             span.addEventListener('click', func);
//         });
//         this.removeEventListener('click', func);
//     });
// }

// function getRemove(ul, li) {
//     let a = document.createElement('a');
//     a.href = '';
//     a.innerHTML = ' ' + 'remove';
//     li.append(a);

//     a.addEventListener('click', function(event) {
//         ul.removeChild(li);
//         event.preventDefault();
//     });
// }


//=================================== Поиск ячеек таблицы с помощью атрибута data =========================================
// Сделайте так, чтобы по клику на любую ячейку в красный фон красились все ячейки этой колонки.
// let tds = document.querySelectorAll('td');
// for (let td of tds) {
//     td.addEventListener('click', function() {
//         let col = td.dataset.col;
//         let colTds = document.querySelectorAll('#table td[data-col="' + col + '"]');

//         for (let td of colTds) {
//             td.classList.toggle('colored-red');
//         }
//     });
// }              

// Сделайте кнопку, по нажатию на которую в красный фон покрасится та ячейка, номер которой совпадает с номером из переменных.
// let col = 2;
// let row = 3;
// let trs = document.querySelectorAll('td');

// let btn = document.createElement('button');
// btn.innerHTML = 'Click Me';
// table.insertAdjacentElement('afterEnd', btn);

// btn.addEventListener('click', function() {
//     for (let tr of trs) {
//         if (tr.dataset.row == row) {
//             let rowTds = document.querySelectorAll('#table td[data-row="' + row + '"]');
//             for (let td of rowTds) {
//                 if (td.dataset.col == col) {
//                     td.classList.add('colored-red');
//                 }
//             }   
//         }
//     }
// });


//======================================= Добавление номера колонки и ряда в таблицу =========================================
// Напишите скрипт, который добавит в каждую ячейку таблицы атрибут data-col с номером колонки таблицы, в которой находится эта ячейка.
// let trs = document.querySelectorAll('tr');

// for (let tr of trs) {
//     let tds = tr.querySelectorAll('td');
//     let j = 1;
//     for (let td of tds) {
//         td.setAttribute('data-col', j++);
//     }
// }

// Модифицируйте предыдущую задачу так, чтобы в ячейку добавлялся еще и номер ее ряда, вот так:
// let trs = document.querySelectorAll('tr');
// let row = 1;
// for (let tr of trs) {
//     tr.setAttribute('data-row', row++);
//     let tds = tr.querySelectorAll('td');
//     let col = 1;
    
//     for (let td of tds) {
//         td.setAttribute('data-col', col++);
//         td.setAttribute('data-row', tr.getAttribute('data-row'));
//     }
//     tr.removeAttribute('data-row');
// }

// Дана некоторая таблица. Сделайте так, чтобы по клику на любую ячейку в ее текст выводился номер ряда и номер колонки этой ячейки.
// let trs = document.querySelectorAll('tr');
// let row = 1;
// for (let tr of trs) {
//     tr.setAttribute('data-row', row++);
//     let col = 1;
//     let tds = tr.querySelectorAll('td');
//     for (let td of tds) {
//         td.setAttribute('data-col', col++);
//         td.setAttribute('data-row', tr.getAttribute('data-row'));
//         td.addEventListener('click', function() {
//             this.innerHTML = td.dataset.row + 'ряд' + ' ' + td.dataset.col + 'колонка';
//         });
//     }
//     tr.removeAttribute('data-row');
// }

// Пусть у нас есть некоторая квадратная HTML таблица. В такой таблице есть две диагонали. Назовем главной диагональ, идущую от верхнего левого угла к нижнему правому. Сделайте так, чтобы по клику на любую ячейку главной диагонали эта ячейка красилась в красный цвет фона, а по клику любую другую ячейку - она красилась в зеленый.
// let trs = document.querySelectorAll('tr');
// let row = 1;
// for (let tr of trs) {
//     tr.setAttribute('data-row', row++);
//     let col = 1;
//     let tds = tr.querySelectorAll('td');
//     for (let td of tds) {
//         td.setAttribute('data-col', col++);
//         td.setAttribute('data-row', tr.getAttribute('data-row'));
//         td.addEventListener('click', function() {
//             if (td.dataset.row == td.dataset.col) {
//                 this.classList.toggle('colored-red');
//             } else {
//                 this.classList.toggle('colored-green');
//             }
//         });
//     }
//     tr.removeAttribute('data-row');
// }


//=================================== Поиск ячеек таблицы через селектор CSS на JavaScript ==================================
// Найдите все ячейки третьего столбца и покрасьте их в красный фон.
// let tds = document.querySelectorAll('#table td:nth-child(3)');
// for (let td of tds) {
//     td.classList.add('colored-red');
// }

// Найдите третью ячейку первого ряда и покрасьте ее в красный фон.
// let tds = document.querySelectorAll('#table tr:nth-child(1) td:nth-child(3)');
// for (let td of tds) {
//     td.classList.add('colored-red');
// }

// Найдите все четные ряды и покрасьте в них все нечетные ячейки.
// let tds = document.querySelectorAll('#table tr:nth-child(even) td:nth-child(odd)');
// for (let td of tds) {
//     td.classList.add('colored-red');
// }


//============================== Функции для работы с DOM элементом на JavaScript =========================================
// Модифицируйте созданную мною функцию так, чтобы параметром она принимала не id элемента, а произвольный CSS селектор.
// setSelector('p', 'colored-text');

// function setSelector(selector, text) {
//     let elems = document.querySelector(selector);
//     for (let elem of elems) {
//         elem.innerHTML = text;
//     }
// }

// Сделайте функцию setAttr, которая будет менять атрибут DOM элементу. Пусть первым параметром функция принимает селектор элемента, вторым - имя атрибута, а третьим - его новое значение.

// setAttr('button', 'allRight', 2);
// function setAttr(selector, nameAttribute, newValue) {
//     let elems = document.querySelectorAll(selector);
//     for (let elem of elems) {
//         elem.setAttribute(nameAttribute, newValue);
//     }
// }


//=========================================== Функции для работы с группой DOM элементов ===================================
// Сделайте функцию appendText, которая первым параметром будет принимать селектор, а вторым - текст. Сделайте так, чтобы данная функция добавляла текст в конец переданных элементов.
// appendText('p', 'миру мир');
// function appendText(selector, text) {
//     let elems = document.querySelectorAll(selector);
//     for (let elem of elems) {
//         elem.innerHTML += text;
//     }
// }


//======================================= Передача коллбэка для работы с DOM на JavaScript ==================================
// Даны абзацы. С помощью созданной нами функции forEach для каждого абзаца добавьте в конец его текста восклицательный знак.
// forEach('.elem', function(elem) {
//     elem.innerHTML += '!';
// });

// function forEach(selector, func) {
//     let elems = document.querySelectorAll(selector);
//     for (let elem of elems) {
//         func(elem);
//     }
// }


//==================================== Передача порядкового номера в коллбэк на JavaScript ==================================
// Даны абзацы. С помощью созданной нами функции forEach для каждого абзаца добавьте ему в начало его порядковый номер.
// forEach('.elem', function(elem, index) {
//     elem.innerHTML = index + elem.innerHTML;
// });

// function forEach(selector, func) {
//     let elems = document.querySelectorAll(selector);
//     for (let i = 0; i < elems.length; i++) {
//         func(elems[i], i);
//     } 
// } 


//======================================== Передача DOM элемента параметром функции ==========================================

// let elem1 = document.getElementById('elem1');
// let elem2 = document.getElementById('elem2');
// appendText(elem1, 'wwwwwwwww');
// appendText(elem2, 'xxxxxxxxxxxxx');
    
// function appendText(elem, text) {
//     elem.insertAdjacentText('beforeEnd', text);
// }

// Даны абзацы. Получите их, переберите циклом и каждому добавьте в конец '!' с помощью функции appendText, сделанной в предыдущей задаче.
// let elems = document.querySelectorAll('p');
// for (let elem of elems) {
//     appendText(elem, '!');
// }
// function appendText(elem, text) {
//     elem.insertAdjacentText('beforeEnd', text);
// }

// Сделайте функцию setValue, которая первым параметром будет принимать ссылку на инпут, а вторым - текст. Сделайте так, чтобы данная функция устанавливала переданный текст в value инпута.
// let input = document.getElementById('inp');
// setValue(input, 'western');

// function setValue(elem, text) {
//     elem.value = text;
// }


//================================= Передача DOM группы элементов параметрами функций =====================================
// Сделайте функцию appendText, которая первым параметром будет принимать массив DOM элементов, а вторым - текст. Сделайте так, чтобы данная функция добавляла текст в конец переданных элементов.
// let elems = document.querySelectorAll('.elem');
// appendText(elems, 'dfeeeeeee');

// function appendText(elems, text) {
//     for (let elem of elems) {
//         elem.insertAdjacentText('beforeEnd', text);
//     }
// }

// Сделайте функцию appendElem, которая первым параметром будет принимать ссылку DOM объект, в котором лежит тег ul, а вторым - текст. Сделайте так, чтобы данная функция создавала новую li с переданным текстом и добавляла ее в конец переданного тега ul.
// let parent = document.getElementById('parent');
// appendElem(parent, 'rakamakafo');
// appendElem(parent, 'akunamatata');

// function appendElem(elem, text) {
//     let li = document.createElement('li');
//     li.innerHTML = text;
//     elem.append(li);
// }

// Дан массив и ul. С помощью функции appendElem, созданной в предыдущей задаче, запишите каждый элемент массива в отдельную li в этом ul.
// let arr = ['million', 'dollar', 'I am', 'rich', 'happy', 'helthy', 'sexy', 'clever', 'sociable'];
// let parent = document.getElementById('parent');
// for (let elem of arr) {
//     appendElem(parent, elem);
// }

// function appendElem(elem, text) {
//     let li = document.createElement('li');
//     li.innerHTML = text;
//     elem.append(li);
// }


//=============================== Функция для создания HTML таблиц на JavaScript =========================================
// Допишите код представленной выше заготовки функции. Потестируйте работу готовой функции.
// let parent = document.getElementById('parent');
// createTable(10, 24, parent);

// function createTable(rows, cols, parent) {
// 	let table = document.createElement('table');
	
// 	for (let i = 1; i <= rows; i++) {
//         let tr = document.createElement('tr');
//         table.append(tr);
// 		for (let j = 1; j <= cols; j++) {
// 			let td = document.createElement('td');
//             tr.append(td);
// 		}
// 	}
	
// 	parent.appendChild(table);
// }


//================================== Возврат таблицы из функции на JavaScript ========================================
// Переделайте вашу функцию createTable в соответствии с описанным в теории.
// let parent = document.getElementById('parent');
// let table = createTable(4, 3);
// parent.append(table);

// function createTable(rows, cols) {
// 	let table = document.createElement('table');
	
// 	for (let i = 1; i <= rows; i++) {
//         let tr = document.createElement('tr');
//         table.append(tr);
// 		for (let j = 1; j <= cols; j++) {
// 			let td = document.createElement('td');
//             tr.append(td);
// 		}
// 	}
// 	return table;
// }

// С помощью функции createTable создайте новую таблицу, а затем вставьте ее в конец дива в абзацами.
// let parent = document.getElementById('elem');
// let table = createTable(4, 3);
// parent.append(table);

// function createTable(rows, cols) {
// 	let table = document.createElement('table');
	
// 	for (let i = 1; i <= rows; i++) {
//         let tr = document.createElement('tr');
//         table.append(tr);
// 		for (let j = 1; j <= cols; j++) {
// 			let td = document.createElement('td');
//             tr.append(td);
// 		}
// 	}
// 	return table;
// }


//================================== Функция для создания таблицы из двухмерного массива =====================================
// Реализуйте описанную функцию. Проверьте ее работу.
// let div = document.querySelector('#elem');

// let arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
// let table = createTableByArr(arr);

// div.appendChild(table);

// function createTableByArr(arr) {
// 	let table = document.createElement('table');
	
// 	for (let i = 0; i < arr.length; i++) {
//         let tr = document.createElement('tr');
//         table.append(tr);
// 		for (let j = 0; j < arr[i].length; j++) {
// 			let td = document.createElement('td');
//             td.innerHTML = arr[i][j];
//             tr.append(td);
// 		}
// 	}
// 	return table;
// }


//============================== Создание HTML таблицы из одномерного массива на JavaScript ===============================
// Реализуйте описанную функцию convertArr. Потестируйте ее работу.
// let elem = document.getElementById('elem');
// let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
// let cols = 4;
// let table = createTableByArr(convertArr(arr, cols));
// elem.append(table);

// function createTableByArr(arr) {
// 	let table = document.createElement('table');
	
// 	for (let i = 0; i < arr.length; i++) {
//         let tr = document.createElement('tr');
//         table.append(tr);
// 		for (let j = 0; j < arr[i].length; j++) {
// 			let td = document.createElement('td');
//             td.innerHTML = arr[i][j];
//             tr.append(td);
// 		}
// 	}
// 	return table;
// }
// let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
// let cols = 4;
// function convertArr(arr, cols) {
//     let newArr = [];
//     let rows = arr.length / cols;
//     for (let i = 0; i < rows; i++) {
//         newArr[i] = [];
//         for (let j = 0; j < cols; j++) {
//             newArr[i].push(arr.shift());
//         }
//     }
//     return newArr;
// }

 
//=================================== Нехватка элементов в массиве при создании таблицы ==================================
// Реализуйте описанную функцию normalizeArr. Потестируйте ее работу.
// let elem = document.getElementById('elem');
// let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
// let cols = 4;
// let twoDimArr = convertArr(arr, cols);
// let normalTwoDimArr = normalizeArr(twoDimArr, cols, '');
// let table = createTableByArr(normalTwoDimArr);
// elem.append(table);

// function createTableByArr(arr) {
// 	let table = document.createElement('table');
	
// 	for (let i = 0; i < arr.length; i++) {
//         let tr = document.createElement('tr');
//         table.append(tr);
// 		for (let j = 0; j < arr[i].length; j++) {
// 			let td = document.createElement('td');
//             td.innerHTML = arr[i][j];
//             tr.append(td);
// 		}
// 	}
// 	return table;
// }

// function convertArr(arr, cols) {
//     let newArr = [];
//     let rows = arr.length / cols;
//     for (let i = 0; i < rows; i++) {
//         newArr[i] = [];
//         for (let j = 0; j < cols; j++) {
//             newArr[i].push(arr.shift());
//         }
//     }
//     return newArr;
// }

// function normalizeArr(arr, cols, box) {
//     let lastElem = arr.pop();
//     for (let i = 0; i < cols; i++) {
//         if (lastElem[i] == undefined) {
//             lastElem[i] = box;
//         }
//     }
//     arr.push(lastElem);
//     return arr;
// }


//======================== Передача параметров в модуль через замыкания в JavaScript =================================
// Дана кнопка и три инпута, в которые вводятся числа. По нажатию на кнопку выведите в консоль сумму введенных чисел. Реализуйте задачу с помощью модуля.

// ;(function(selector1, selector2) {
//     let btn = document.querySelector(selector1);
//     let elems = document.querySelectorAll(selector2);

//     btn.addEventListener('click', function() {
//         let result = 0;
//         for (let elem of elems) {
//             result += Number(elem.value);
//         }
//         console.log(result);
//     });
// })('#btn', 'input');


//======================= Экспорт переменных и функций в модулях через замыкания в JavaScript ==============================
// Эскортируйте наружу одну из переменных и две любые функции.
// ;(function() {
// 	let str1 = 'переменная модуля';
// 	let str2 = 'переменная модуля';
// 	let str3 = 'переменная модуля';
	
// 	function func1() {
// 		alert('функция модуля');
// 	}
// 	function func2() {
// 		alert('функция модуля');
//         alert(str1);
// 	}
// 	function func3() {
// 		alert('функция модуля');
// 	}

//     window.func2 = func2;
//     window.str1 = str1;
// })();
// func2();

// Эскортируйте наружу объект с первыми пятью функциями и первыми двумя переменными.
// ;(function() {
// 	let str1 = 'переменная модуля';
// 	let str2 = 'переменная модуля';
// 	let str3 = 'переменная модуля';
	
// 	function func1() {
// 		alert('функция модуля');
// 	}
// 	function func2() {
// 		alert('функция модуля');
// 	}
// 	function func3() {
// 		alert('функция модуля');
// 	}
// 	function func4() {
// 		alert('функция модуля');
// 	}
// 	function func5() {
// 		alert('функция модуля');
// 	}
//     window.module = {str1, str2, func1, func2, func3, func4, func5};
// })();

// module.func3();
// alert(module.str2);


//================================ Библиотеки через замыкания в JavaScript =============================================
// Оформите этот код в виде модуля. Эспортируйте наружу все функции, кроме вспомогательной.

// ;(function() {
//     function avg1(arr) {
//         return sum(arr, 1) / arr.length;
//     }
    
//     function avg2(arr) {
//         return sum(arr, 2) / arr.length;
//     }
    
//     function avg3(arr) {
//         return sum(arr, 3) / arr.length;
//     }
    
//     // вспомогательная функция
//     function sum(arr, pow) {
//         let res = 0;
        
//         for (let elem of arr) {
//             res += elem ** pow;
//         }
        
//         return res;
//     }
//     window.avg = {avg1, avg2, avg3};
// })();
// alert(avg.avg1([1, 2, 3]) + avg.avg2([1, 2, 3]));


// var array1 = [true,  true,  true,  false,
//     true,  true,  true,  true ,
//     true,  false, true,  false,
//     true,  false, false, true ,
//     true,  true,  true,  true ,
//     false, false, true,  true ];

// function countSheeps(arrayOfSheep) {
//     let result = 0;
//     for (let elem of arrayOfSheep) {
//       if (elem == true) {
//         result += 1;
//       }
//     }
//     return result;
// }

// console.log(countSheeps(array1));

// function highAndLow(numbers){
//     let arr = [];
//     let arr1 = [];
//     let arr2 = [];
//     arr = numbers.split(' ');
//     for (let elem of arr) {
//         elem = Number(elem);
//         arr1.push(elem);
//     }
//     arr2.push(getMaxOfArray(arr1));
//     arr2.push(getMinOfArray(arr1));
//     let str = arr2.join(' ');
//     return str;
//
// }
//
// function getMaxOfArray(numArray) {
//     return Math.max.apply(null, numArray);
//   }
//
// function getMinOfArray(numArray) {
// return Math.min.apply(null, numArray);
// }
//
// console.log(highAndLow("1 2 3 4 5"));




// ======================================================================================================================
// ======================================================================================================================
// ============================================ Высший учебник JavaScript ===============================================
// ======================================================================================================================
// ======================================================================================================================

// ================================= Введение в регулярные выражения в JavaScript =======================================


// Напишите регулярку, которая найдет строки 'ahb', 'acb', 'aeb' по шаблону: буква 'a', любой символ, буква 'b'.
// let str = 'ahb acb aeb aeeb adcb axeb';
// console.log(str.replace(/a.b/g, '!'));


// Напишите регулярку, которая найдет строки 'abba', 'adca', 'abea' по шаблону: буква 'a', 2 любых символа, буква 'a'.
// let str = 'aba aca aea abba adca abea';
// console.log(str.replace(/a..a/g, '!'));



// Напишите регулярку, которая найдет строки 'abba' и 'abea', не захватив 'adca'.
// let str = 'aba aca aea abba adca abea';
// console.log(str.replace(/ab.a/g, '!'));


//=================================== Операторы повторения символов в регулярках ========================================
// // Напишите регулярку, которая найдет строки 'aba', 'abba', 'abbba' по шаблону: буква 'a', буква 'b' любое количество раз, буква 'a'.
// let str = 'aa aba abba abbba abca abea';
// let result = str.replace(/ab+a/g, '!');
// console.log(result);
//
// // Напишите регулярку, которая найдет строки 'aa', 'aba', 'abba', 'abbba' по шаблону: буква 'a', буква 'b' любое количество раз (в том числе ниодного раза), буква 'a'.
// let str = 'aa aba abba abbba abca abea';
// console.log(str.replace(/ab*a/g, '!'));
//
// // Напишите регулярку, которая найдет строки 'aa', 'aba' по шаблону: буква 'a', буква 'b' один раз или ниодного, буква 'a'.
// let str = 'aa aba abba abbba abca abea';
// console.log(str.replace(/ab?a/g, '!'));
//
// // Напишите регулярку, которая найдет строки 'aa', 'aba', 'abba', 'abbba', не захватив 'abca' и 'abea'.
// let str = 'aa aba abba abbba abca abea';
// console.log(str.replace(/ab*a/g, '!'));


//================================== Группирующие скобки в регулярках JavaScript ====================================
// Напишите регулярку, которая найдет строки по шаблону: строка 'ab' повторяется 1 или более раз.
// let str = 'ab abab abab abababab abea';
// console.log(str.replace(/(ab)+/g, '!'));


//================================= Экранировка спецсимволов в регулярках JavaScript ==================================
// Напишите регулярку, которая найдет строку 'a.a', не захватив остальные.
// let str = 'a.a aba aea';
// console.log(str.replace(/a\.a/g, '!'));

// Напишите регулярку, которая найдет строку '2+3', не захватив остальные.
// let str = '2+3 223 2223';
// console.log(str.replace(/2\+3/, '!'));

// // Напишите регулярку, которая найдет строки '2+3', '2++3', '2+++3', не захватив остальные (+ может быть любое количество).
// let str = '23 2+3 2++3 2+++3 345 567';
// console.log(str.replace(/2\++3/g, '!'));

// // Напишите регулярку, которая найдет строки '23', '2+3', '2++3', '2+++3', не захватив остальные.
// let str = '23 2+3 2++3 2+++3 445 677';
// console.log(str.replace(/2\+*3/g, '!'));

// Напишите регулярку, которая найдет строки '*q+', '*qq+', '*qqq+', не захватив остальные.
// let str = '*+ *q+ *qq+ *qqq+ *qqq qqq+';
// console.log(str.replace(/\*q+\+/g, '!'));

// Напишите регулярку, которая найдет строки в квадратных скобках и заменят их на '!'.
// let str = '[abc] {abc} abc (abc) [abc]';
// console.log(str.replace(/\[abc\]/g, '!'));


//=============================== Фигурные скобки в регулярных выражения JavaScript ==================================
// Напишите регулярку, которая найдет строки 'abba', 'abbba', 'abbbba' и только их.
// let str = 'aa aba abba abbba abbbba abbbbba';
// console.log(str.replace(/ab{2,4}a/g, '!'));

// Напишите регулярку, которая найдет строки вида 'aba', в которых 'b' встречается менее 3-х раз (включительно).
// let str = 'aa aba abba abbba abbbba abbbbba';
// console.log(str.replace(/ab{1,3}a/g, '!'));

// Напишите регулярку, которая найдет строки вида 'aba', в которых 'b' встречается более 4-х раз (включительно).
// let str = 'aa aba abba abbba abbbba abbbbba';
// console.log(str.replace(/ab{4,}a/g, '!'));


//================================ Ограничение жадности в регулярках в JavaScript ==================================
// Напишите регулярку, которая найдет все строки по краям которых стоят буквы 'a', и заменит каждую из них на '!'. Между буквами a может быть любой символ (кроме 'a').
// let str = 'aba accca azzza wwwwa';
// console.log(str.replace(/a.+?a/g, '!'));


//================================= Группы символов в регулярных выражениях JavaScript ===============================
// Напишите регулярку, которая найдет строки, в которых по краям стоят буквы 'a', а между ними одна цифра.
// let str = 'a1a a2a a3a a4a a5a aba aca';
// console.log(str.replace(/a\d+a/g, '!'));

// Напишите регулярку, которая найдет строки, в которых по краям стоят буквы 'a', а между ними любое количество цифр.
// let str = 'a1a a22a a333a a4444a a55555a aba aca';
// console.log(str.replace(/a\d+a/g, "!"));

// Напишите регулярку, которая найдет строки, в которых по краям стоят буквы 'a', а между ними любое количество цифр (в том числе и ноль цифр, то есть строка 'aa').
// let str = 'aa a1a a22a a333a a4444a a55555a aba aca';
// console.log(str.replace(/a\d*a/g, '!'));

// Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a' и 'b', а между ними - не число.
// let str = 'avb a1b a2b a3b a4b a5b abb acb';
// console.log(str.replace(/a\D+b/g, '!'));

// Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a' и 'b', а между ними - не буква и не цифра.
// let str = 'ave a#b a2b a$b a4b a5b a-b acb';
// console.log(str.replace(/a\W+b/g, '!'));

// Напишите регулярку, которая заменит все пробелы на '!'.
let str = 'ave a#a a2a a$a a4a a5a a-a aca';
console.log(str.replace(/\s+/g, '!'));
